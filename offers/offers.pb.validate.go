// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: offers/offers.proto

package offers

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _offers_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Offer

	// no validation rules for EndDate

	// no validation rules for Price

	// no validation rules for OfferType

	// no validation rules for OfferEntityId

	return nil
}

// CreateOfferRequestValidationError is the validation error returned by
// CreateOfferRequest.Validate if the designated constraints aren't met.
type CreateOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferRequestValidationError) ErrorName() string {
	return "CreateOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferRequestValidationError{}

// Validate checks the field values on CreateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateOfferResponseValidationError is the validation error returned by
// CreateOfferResponse.Validate if the designated constraints aren't met.
type CreateOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOfferResponseValidationError) ErrorName() string {
	return "CreateOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOfferResponseValidationError{}

// Validate checks the field values on GetOfferRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetOfferRequestValidationError is the validation error returned by
// GetOfferRequest.Validate if the designated constraints aren't met.
type GetOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferRequestValidationError) ErrorName() string { return "GetOfferRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferRequestValidationError{}

// Validate checks the field values on GetOfferResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOfferResponseValidationError is the validation error returned by
// GetOfferResponse.Validate if the designated constraints aren't met.
type GetOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOfferResponseValidationError) ErrorName() string { return "GetOfferResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOfferResponseValidationError{}

// Validate checks the field values on UpdateOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateOfferRequestValidationError is the validation error returned by
// UpdateOfferRequest.Validate if the designated constraints aren't met.
type UpdateOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferRequestValidationError) ErrorName() string {
	return "UpdateOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferRequestValidationError{}

// Validate checks the field values on UpdateOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateOfferResponseValidationError is the validation error returned by
// UpdateOfferResponse.Validate if the designated constraints aren't met.
type UpdateOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOfferResponseValidationError) ErrorName() string {
	return "UpdateOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOfferResponseValidationError{}

// Validate checks the field values on DeleteOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteOfferRequestValidationError is the validation error returned by
// DeleteOfferRequest.Validate if the designated constraints aren't met.
type DeleteOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOfferRequestValidationError) ErrorName() string {
	return "DeleteOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOfferRequestValidationError{}

// Validate checks the field values on DeleteOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteOfferResponseValidationError is the validation error returned by
// DeleteOfferResponse.Validate if the designated constraints aren't met.
type DeleteOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOfferResponseValidationError) ErrorName() string {
	return "DeleteOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOfferResponseValidationError{}

// Validate checks the field values on AcceptOfferRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcceptOfferRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AcceptOfferRequestValidationError is the validation error returned by
// AcceptOfferRequest.Validate if the designated constraints aren't met.
type AcceptOfferRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOfferRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOfferRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOfferRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOfferRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOfferRequestValidationError) ErrorName() string {
	return "AcceptOfferRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOfferRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOfferRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOfferRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOfferRequestValidationError{}

// Validate checks the field values on AcceptOfferResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AcceptOfferResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AcceptOfferResponseValidationError is the validation error returned by
// AcceptOfferResponse.Validate if the designated constraints aren't met.
type AcceptOfferResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptOfferResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptOfferResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptOfferResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptOfferResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptOfferResponseValidationError) ErrorName() string {
	return "AcceptOfferResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AcceptOfferResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptOfferResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptOfferResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptOfferResponseValidationError{}
