// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spots/spots.proto

package spots

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _spots_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateSpotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateSpotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Message

	// no validation rules for Icon

	// no validation rules for Marker

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for Vw

	// no validation rules for Int

	return nil
}

// CreateSpotRequestValidationError is the validation error returned by
// CreateSpotRequest.Validate if the designated constraints aren't met.
type CreateSpotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpotRequestValidationError) ErrorName() string {
	return "CreateSpotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpotRequestValidationError{}

// Validate checks the field values on CreateSpotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSpotResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateSpotResponseValidationError is the validation error returned by
// CreateSpotResponse.Validate if the designated constraints aren't met.
type CreateSpotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpotResponseValidationError) ErrorName() string {
	return "CreateSpotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpotResponseValidationError{}

// Validate checks the field values on GetSpotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSpotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetSpotRequestValidationError is the validation error returned by
// GetSpotRequest.Validate if the designated constraints aren't met.
type GetSpotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpotRequestValidationError) ErrorName() string { return "GetSpotRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSpotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpotRequestValidationError{}

// Validate checks the field values on GetSpotResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetSpotResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Message

	// no validation rules for Icon

	// no validation rules for Marker

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for Vw

	// no validation rules for Int

	return nil
}

// GetSpotResponseValidationError is the validation error returned by
// GetSpotResponse.Validate if the designated constraints aren't met.
type GetSpotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpotResponseValidationError) ErrorName() string { return "GetSpotResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSpotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpotResponseValidationError{}

// Validate checks the field values on UpdateSpotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateSpotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Message

	// no validation rules for Icon

	// no validation rules for Marker

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for Vw

	// no validation rules for Int

	return nil
}

// UpdateSpotRequestValidationError is the validation error returned by
// UpdateSpotRequest.Validate if the designated constraints aren't met.
type UpdateSpotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpotRequestValidationError) ErrorName() string {
	return "UpdateSpotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpotRequestValidationError{}

// Validate checks the field values on UpdateSpotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSpotResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateSpotResponseValidationError is the validation error returned by
// UpdateSpotResponse.Validate if the designated constraints aren't met.
type UpdateSpotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpotResponseValidationError) ErrorName() string {
	return "UpdateSpotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpotResponseValidationError{}

// Validate checks the field values on DeleteSpotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteSpotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteSpotRequestValidationError is the validation error returned by
// DeleteSpotRequest.Validate if the designated constraints aren't met.
type DeleteSpotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpotRequestValidationError) ErrorName() string {
	return "DeleteSpotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpotRequestValidationError{}

// Validate checks the field values on DeleteSpotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteSpotResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSpotResponseValidationError is the validation error returned by
// DeleteSpotResponse.Validate if the designated constraints aren't met.
type DeleteSpotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpotResponseValidationError) ErrorName() string {
	return "DeleteSpotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpotResponseValidationError{}
