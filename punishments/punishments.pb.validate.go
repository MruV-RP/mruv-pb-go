// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: punishments/punishments.proto

package punishments

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _punishments_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on PunishmentMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PunishmentMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for ExpirationDate

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for Date

	// no validation rules for Active

	return nil
}

// PunishmentMessageValidationError is the validation error returned by
// PunishmentMessage.Validate if the designated constraints aren't met.
type PunishmentMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PunishmentMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PunishmentMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PunishmentMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PunishmentMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PunishmentMessageValidationError) ErrorName() string {
	return "PunishmentMessageValidationError"
}

// Error satisfies the builtin error interface
func (e PunishmentMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPunishmentMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PunishmentMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PunishmentMessageValidationError{}

// Validate checks the field values on BanMessage with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BanMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Ip

	// no validation rules for ExpirationDate

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for BanDate

	// no validation rules for Active

	// no validation rules for UnbanDate

	// no validation rules for UnbanAdmin

	return nil
}

// BanMessageValidationError is the validation error returned by
// BanMessage.Validate if the designated constraints aren't met.
type BanMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanMessageValidationError) ErrorName() string { return "BanMessageValidationError" }

// Error satisfies the builtin error interface
func (e BanMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanMessageValidationError{}

// Validate checks the field values on WarnMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WarnMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for ExpirationDate

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for WarnDate

	// no validation rules for Active

	// no validation rules for UnwarnDate

	// no validation rules for UnwarnAdmin

	return nil
}

// WarnMessageValidationError is the validation error returned by
// WarnMessage.Validate if the designated constraints aren't met.
type WarnMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarnMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarnMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarnMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarnMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarnMessageValidationError) ErrorName() string { return "WarnMessageValidationError" }

// Error satisfies the builtin error interface
func (e WarnMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarnMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarnMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarnMessageValidationError{}

// Validate checks the field values on BlockMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BlockMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for BlockDate

	// no validation rules for Active

	// no validation rules for UnblockDate

	// no validation rules for UnblockAdmin

	return nil
}

// BlockMessageValidationError is the validation error returned by
// BlockMessage.Validate if the designated constraints aren't met.
type BlockMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockMessageValidationError) ErrorName() string { return "BlockMessageValidationError" }

// Error satisfies the builtin error interface
func (e BlockMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockMessageValidationError{}

// Validate checks the field values on AdminJailMessage with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AdminJailMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for AjDate

	// no validation rules for JailTime

	return nil
}

// AdminJailMessageValidationError is the validation error returned by
// AdminJailMessage.Validate if the designated constraints aren't met.
type AdminJailMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminJailMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminJailMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminJailMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminJailMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminJailMessageValidationError) ErrorName() string { return "AdminJailMessageValidationError" }

// Error satisfies the builtin error interface
func (e AdminJailMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminJailMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminJailMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminJailMessageValidationError{}

// Validate checks the field values on UnBanMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnBanMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for BanId

	return nil
}

// UnBanMessageValidationError is the validation error returned by
// UnBanMessage.Validate if the designated constraints aren't met.
type UnBanMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBanMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBanMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBanMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBanMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBanMessageValidationError) ErrorName() string { return "UnBanMessageValidationError" }

// Error satisfies the builtin error interface
func (e UnBanMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBanMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBanMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBanMessageValidationError{}

// Validate checks the field values on UnBlockMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnBlockMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for BlockId

	return nil
}

// UnBlockMessageValidationError is the validation error returned by
// UnBlockMessage.Validate if the designated constraints aren't met.
type UnBlockMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockMessageValidationError) ErrorName() string { return "UnBlockMessageValidationError" }

// Error satisfies the builtin error interface
func (e UnBlockMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockMessageValidationError{}

// Validate checks the field values on UnWarnMessage with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnWarnMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for WarnId

	return nil
}

// UnWarnMessageValidationError is the validation error returned by
// UnWarnMessage.Validate if the designated constraints aren't met.
type UnWarnMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnWarnMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnWarnMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnWarnMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnWarnMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnWarnMessageValidationError) ErrorName() string { return "UnWarnMessageValidationError" }

// Error satisfies the builtin error interface
func (e UnWarnMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnWarnMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnWarnMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnWarnMessageValidationError{}

// Validate checks the field values on UnAdminJailMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnAdminJailMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	return nil
}

// UnAdminJailMessageValidationError is the validation error returned by
// UnAdminJailMessage.Validate if the designated constraints aren't met.
type UnAdminJailMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnAdminJailMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnAdminJailMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnAdminJailMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnAdminJailMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnAdminJailMessageValidationError) ErrorName() string {
	return "UnAdminJailMessageValidationError"
}

// Error satisfies the builtin error interface
func (e UnAdminJailMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnAdminJailMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnAdminJailMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnAdminJailMessageValidationError{}

// Validate checks the field values on PunishRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PunishRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Reason

	// no validation rules for Admin

	return nil
}

// PunishRequestValidationError is the validation error returned by
// PunishRequest.Validate if the designated constraints aren't met.
type PunishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PunishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PunishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PunishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PunishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PunishRequestValidationError) ErrorName() string { return "PunishRequestValidationError" }

// Error satisfies the builtin error interface
func (e PunishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPunishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PunishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PunishRequestValidationError{}

// Validate checks the field values on PunishResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PunishResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// PunishResponseValidationError is the validation error returned by
// PunishResponse.Validate if the designated constraints aren't met.
type PunishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PunishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PunishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PunishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PunishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PunishResponseValidationError) ErrorName() string { return "PunishResponseValidationError" }

// Error satisfies the builtin error interface
func (e PunishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPunishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PunishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PunishResponseValidationError{}

// Validate checks the field values on BanRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *BanRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Ip

	// no validation rules for Time

	// no validation rules for Reason

	// no validation rules for Admin

	return nil
}

// BanRequestValidationError is the validation error returned by
// BanRequest.Validate if the designated constraints aren't met.
type BanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanRequestValidationError) ErrorName() string { return "BanRequestValidationError" }

// Error satisfies the builtin error interface
func (e BanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanRequestValidationError{}

// Validate checks the field values on BanResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BanResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BanId

	return nil
}

// BanResponseValidationError is the validation error returned by
// BanResponse.Validate if the designated constraints aren't met.
type BanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BanResponseValidationError) ErrorName() string { return "BanResponseValidationError" }

// Error satisfies the builtin error interface
func (e BanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BanResponseValidationError{}

// Validate checks the field values on BlockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	// no validation rules for Reason

	// no validation rules for Admin

	return nil
}

// BlockRequestValidationError is the validation error returned by
// BlockRequest.Validate if the designated constraints aren't met.
type BlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockRequestValidationError) ErrorName() string { return "BlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e BlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockRequestValidationError{}

// Validate checks the field values on BlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *BlockResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BlockId

	return nil
}

// BlockResponseValidationError is the validation error returned by
// BlockResponse.Validate if the designated constraints aren't met.
type BlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BlockResponseValidationError) ErrorName() string { return "BlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e BlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BlockResponseValidationError{}

// Validate checks the field values on WarnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WarnRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Character

	// no validation rules for Time

	// no validation rules for Reason

	// no validation rules for Admin

	return nil
}

// WarnRequestValidationError is the validation error returned by
// WarnRequest.Validate if the designated constraints aren't met.
type WarnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarnRequestValidationError) ErrorName() string { return "WarnRequestValidationError" }

// Error satisfies the builtin error interface
func (e WarnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarnRequestValidationError{}

// Validate checks the field values on WarnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WarnResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WarnId

	return nil
}

// WarnResponseValidationError is the validation error returned by
// WarnResponse.Validate if the designated constraints aren't met.
type WarnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WarnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WarnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WarnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WarnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WarnResponseValidationError) ErrorName() string { return "WarnResponseValidationError" }

// Error satisfies the builtin error interface
func (e WarnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWarnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WarnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WarnResponseValidationError{}

// Validate checks the field values on AdminJailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AdminJailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	// no validation rules for Time

	// no validation rules for Reason

	// no validation rules for Admin

	return nil
}

// AdminJailRequestValidationError is the validation error returned by
// AdminJailRequest.Validate if the designated constraints aren't met.
type AdminJailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminJailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminJailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminJailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminJailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminJailRequestValidationError) ErrorName() string { return "AdminJailRequestValidationError" }

// Error satisfies the builtin error interface
func (e AdminJailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminJailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminJailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminJailRequestValidationError{}

// Validate checks the field values on AdminJailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AdminJailResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AdminJailResponseValidationError is the validation error returned by
// AdminJailResponse.Validate if the designated constraints aren't met.
type AdminJailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminJailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminJailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminJailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminJailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminJailResponseValidationError) ErrorName() string {
	return "AdminJailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminJailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminJailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminJailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminJailResponseValidationError{}

// Validate checks the field values on MuteGlobalChatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MuteGlobalChatsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Account

	return nil
}

// MuteGlobalChatsRequestValidationError is the validation error returned by
// MuteGlobalChatsRequest.Validate if the designated constraints aren't met.
type MuteGlobalChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGlobalChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGlobalChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGlobalChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGlobalChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGlobalChatsRequestValidationError) ErrorName() string {
	return "MuteGlobalChatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MuteGlobalChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGlobalChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGlobalChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGlobalChatsRequestValidationError{}

// Validate checks the field values on MuteGlobalChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MuteGlobalChatsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MuteGlobalChatsResponseValidationError is the validation error returned by
// MuteGlobalChatsResponse.Validate if the designated constraints aren't met.
type MuteGlobalChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteGlobalChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteGlobalChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteGlobalChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteGlobalChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteGlobalChatsResponseValidationError) ErrorName() string {
	return "MuteGlobalChatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MuteGlobalChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteGlobalChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteGlobalChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteGlobalChatsResponseValidationError{}

// Validate checks the field values on UnBanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnBanRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BanId

	// no validation rules for Reason

	// no validation rules for AdminId

	return nil
}

// UnBanRequestValidationError is the validation error returned by
// UnBanRequest.Validate if the designated constraints aren't met.
type UnBanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBanRequestValidationError) ErrorName() string { return "UnBanRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnBanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBanRequestValidationError{}

// Validate checks the field values on UnBanResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnBanResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnBanResponseValidationError is the validation error returned by
// UnBanResponse.Validate if the designated constraints aren't met.
type UnBanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBanResponseValidationError) ErrorName() string { return "UnBanResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnBanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBanResponseValidationError{}

// Validate checks the field values on UnBlockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnBlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BlockId

	// no validation rules for Reason

	// no validation rules for AdminId

	return nil
}

// UnBlockRequestValidationError is the validation error returned by
// UnBlockRequest.Validate if the designated constraints aren't met.
type UnBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockRequestValidationError) ErrorName() string { return "UnBlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockRequestValidationError{}

// Validate checks the field values on UnBlockResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnBlockResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnBlockResponseValidationError is the validation error returned by
// UnBlockResponse.Validate if the designated constraints aren't met.
type UnBlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnBlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnBlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnBlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnBlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnBlockResponseValidationError) ErrorName() string { return "UnBlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnBlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnBlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnBlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnBlockResponseValidationError{}

// Validate checks the field values on UnWarnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnWarnRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WarnId

	// no validation rules for Reason

	// no validation rules for AdminId

	return nil
}

// UnWarnRequestValidationError is the validation error returned by
// UnWarnRequest.Validate if the designated constraints aren't met.
type UnWarnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnWarnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnWarnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnWarnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnWarnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnWarnRequestValidationError) ErrorName() string { return "UnWarnRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnWarnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnWarnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnWarnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnWarnRequestValidationError{}

// Validate checks the field values on UnWarnResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnWarnResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnWarnResponseValidationError is the validation error returned by
// UnWarnResponse.Validate if the designated constraints aren't met.
type UnWarnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnWarnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnWarnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnWarnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnWarnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnWarnResponseValidationError) ErrorName() string { return "UnWarnResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnWarnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnWarnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnWarnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnWarnResponseValidationError{}

// Validate checks the field values on UnAdminJailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnAdminJailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	// no validation rules for Reason

	// no validation rules for AdminId

	return nil
}

// UnAdminJailRequestValidationError is the validation error returned by
// UnAdminJailRequest.Validate if the designated constraints aren't met.
type UnAdminJailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnAdminJailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnAdminJailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnAdminJailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnAdminJailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnAdminJailRequestValidationError) ErrorName() string {
	return "UnAdminJailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnAdminJailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnAdminJailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnAdminJailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnAdminJailRequestValidationError{}

// Validate checks the field values on UnAdminJailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnAdminJailResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnAdminJailResponseValidationError is the validation error returned by
// UnAdminJailResponse.Validate if the designated constraints aren't met.
type UnAdminJailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnAdminJailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnAdminJailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnAdminJailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnAdminJailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnAdminJailResponseValidationError) ErrorName() string {
	return "UnAdminJailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnAdminJailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnAdminJailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnAdminJailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnAdminJailResponseValidationError{}

// Validate checks the field values on UnMuteGlobalChatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnMuteGlobalChatsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Account

	return nil
}

// UnMuteGlobalChatsRequestValidationError is the validation error returned by
// UnMuteGlobalChatsRequest.Validate if the designated constraints aren't met.
type UnMuteGlobalChatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnMuteGlobalChatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnMuteGlobalChatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnMuteGlobalChatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnMuteGlobalChatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnMuteGlobalChatsRequestValidationError) ErrorName() string {
	return "UnMuteGlobalChatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnMuteGlobalChatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnMuteGlobalChatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnMuteGlobalChatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnMuteGlobalChatsRequestValidationError{}

// Validate checks the field values on UnMuteGlobalChatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnMuteGlobalChatsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnMuteGlobalChatsResponseValidationError is the validation error returned by
// UnMuteGlobalChatsResponse.Validate if the designated constraints aren't met.
type UnMuteGlobalChatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnMuteGlobalChatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnMuteGlobalChatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnMuteGlobalChatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnMuteGlobalChatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnMuteGlobalChatsResponseValidationError) ErrorName() string {
	return "UnMuteGlobalChatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnMuteGlobalChatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnMuteGlobalChatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnMuteGlobalChatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnMuteGlobalChatsResponseValidationError{}

// Validate checks the field values on GetPlayerBansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerBansRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Ip

	return nil
}

// GetPlayerBansRequestValidationError is the validation error returned by
// GetPlayerBansRequest.Validate if the designated constraints aren't met.
type GetPlayerBansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerBansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerBansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerBansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerBansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerBansRequestValidationError) ErrorName() string {
	return "GetPlayerBansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerBansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerBansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerBansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerBansRequestValidationError{}

// Validate checks the field values on GetPlayerBansResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerBansResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetBans() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerBansResponseValidationError{
					field:  fmt.Sprintf("Bans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPlayerBansResponseValidationError is the validation error returned by
// GetPlayerBansResponse.Validate if the designated constraints aren't met.
type GetPlayerBansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerBansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerBansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerBansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerBansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerBansResponseValidationError) ErrorName() string {
	return "GetPlayerBansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerBansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerBansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerBansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerBansResponseValidationError{}

// Validate checks the field values on GetPlayerWarnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerWarnsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	return nil
}

// GetPlayerWarnsRequestValidationError is the validation error returned by
// GetPlayerWarnsRequest.Validate if the designated constraints aren't met.
type GetPlayerWarnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerWarnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerWarnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerWarnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerWarnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerWarnsRequestValidationError) ErrorName() string {
	return "GetPlayerWarnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerWarnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerWarnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerWarnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerWarnsRequestValidationError{}

// Validate checks the field values on GetPlayerWarnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerWarnsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetWarns() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlayerWarnsResponseValidationError{
					field:  fmt.Sprintf("Warns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPlayerWarnsResponseValidationError is the validation error returned by
// GetPlayerWarnsResponse.Validate if the designated constraints aren't met.
type GetPlayerWarnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerWarnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerWarnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerWarnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerWarnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerWarnsResponseValidationError) ErrorName() string {
	return "GetPlayerWarnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerWarnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerWarnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerWarnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerWarnsResponseValidationError{}

// Validate checks the field values on GetPlayerAdminJailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerAdminJailRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	return nil
}

// GetPlayerAdminJailRequestValidationError is the validation error returned by
// GetPlayerAdminJailRequest.Validate if the designated constraints aren't met.
type GetPlayerAdminJailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerAdminJailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerAdminJailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerAdminJailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerAdminJailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerAdminJailRequestValidationError) ErrorName() string {
	return "GetPlayerAdminJailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerAdminJailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerAdminJailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerAdminJailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerAdminJailRequestValidationError{}

// Validate checks the field values on GetPlayerAdminJailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPlayerAdminJailResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JailTime

	// no validation rules for Reason

	// no validation rules for Admin

	// no validation rules for Date

	return nil
}

// GetPlayerAdminJailResponseValidationError is the validation error returned
// by GetPlayerAdminJailResponse.Validate if the designated constraints aren't met.
type GetPlayerAdminJailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlayerAdminJailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlayerAdminJailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlayerAdminJailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlayerAdminJailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlayerAdminJailResponseValidationError) ErrorName() string {
	return "GetPlayerAdminJailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlayerAdminJailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlayerAdminJailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlayerAdminJailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlayerAdminJailResponseValidationError{}

// Validate checks the field values on GetBanRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetBanRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetBanRequestValidationError is the validation error returned by
// GetBanRequest.Validate if the designated constraints aren't met.
type GetBanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBanRequestValidationError) ErrorName() string { return "GetBanRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBanRequestValidationError{}

// Validate checks the field values on GetWarnRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetWarnRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetWarnRequestValidationError is the validation error returned by
// GetWarnRequest.Validate if the designated constraints aren't met.
type GetWarnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWarnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWarnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWarnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWarnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWarnRequestValidationError) ErrorName() string { return "GetWarnRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWarnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWarnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWarnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWarnRequestValidationError{}

// Validate checks the field values on GetBlockRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetBlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetBlockRequestValidationError is the validation error returned by
// GetBlockRequest.Validate if the designated constraints aren't met.
type GetBlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBlockRequestValidationError) ErrorName() string { return "GetBlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBlockRequestValidationError{}

// Validate checks the field values on IsPlayerBannedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsPlayerBannedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Player

	// no validation rules for Ip

	return nil
}

// IsPlayerBannedRequestValidationError is the validation error returned by
// IsPlayerBannedRequest.Validate if the designated constraints aren't met.
type IsPlayerBannedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPlayerBannedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPlayerBannedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPlayerBannedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPlayerBannedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPlayerBannedRequestValidationError) ErrorName() string {
	return "IsPlayerBannedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsPlayerBannedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPlayerBannedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPlayerBannedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPlayerBannedRequestValidationError{}

// Validate checks the field values on IsPlayerBannedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsPlayerBannedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Banned

	// no validation rules for BanId

	return nil
}

// IsPlayerBannedResponseValidationError is the validation error returned by
// IsPlayerBannedResponse.Validate if the designated constraints aren't met.
type IsPlayerBannedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPlayerBannedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPlayerBannedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPlayerBannedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPlayerBannedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPlayerBannedResponseValidationError) ErrorName() string {
	return "IsPlayerBannedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsPlayerBannedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPlayerBannedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPlayerBannedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPlayerBannedResponseValidationError{}

// Validate checks the field values on IsCharacterBlockedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCharacterBlockedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	return nil
}

// IsCharacterBlockedRequestValidationError is the validation error returned by
// IsCharacterBlockedRequest.Validate if the designated constraints aren't met.
type IsCharacterBlockedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCharacterBlockedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCharacterBlockedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCharacterBlockedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCharacterBlockedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCharacterBlockedRequestValidationError) ErrorName() string {
	return "IsCharacterBlockedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsCharacterBlockedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCharacterBlockedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCharacterBlockedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCharacterBlockedRequestValidationError{}

// Validate checks the field values on IsCharacterBlockedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCharacterBlockedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Blocked

	// no validation rules for BlockId

	return nil
}

// IsCharacterBlockedResponseValidationError is the validation error returned
// by IsCharacterBlockedResponse.Validate if the designated constraints aren't met.
type IsCharacterBlockedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCharacterBlockedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCharacterBlockedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCharacterBlockedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCharacterBlockedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCharacterBlockedResponseValidationError) ErrorName() string {
	return "IsCharacterBlockedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsCharacterBlockedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCharacterBlockedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCharacterBlockedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCharacterBlockedResponseValidationError{}

// Validate checks the field values on IsCharacterJailedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCharacterJailedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Character

	return nil
}

// IsCharacterJailedRequestValidationError is the validation error returned by
// IsCharacterJailedRequest.Validate if the designated constraints aren't met.
type IsCharacterJailedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCharacterJailedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCharacterJailedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCharacterJailedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCharacterJailedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCharacterJailedRequestValidationError) ErrorName() string {
	return "IsCharacterJailedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsCharacterJailedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCharacterJailedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCharacterJailedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCharacterJailedRequestValidationError{}

// Validate checks the field values on IsCharacterJailedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsCharacterJailedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Jailed

	// no validation rules for JailTime

	return nil
}

// IsCharacterJailedResponseValidationError is the validation error returned by
// IsCharacterJailedResponse.Validate if the designated constraints aren't met.
type IsCharacterJailedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsCharacterJailedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsCharacterJailedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsCharacterJailedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsCharacterJailedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsCharacterJailedResponseValidationError) ErrorName() string {
	return "IsCharacterJailedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsCharacterJailedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsCharacterJailedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsCharacterJailedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsCharacterJailedResponseValidationError{}

// Validate checks the field values on WatchBansRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WatchBansRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBansRequestValidationError is the validation error returned by
// WatchBansRequest.Validate if the designated constraints aren't met.
type WatchBansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBansRequestValidationError) ErrorName() string { return "WatchBansRequestValidationError" }

// Error satisfies the builtin error interface
func (e WatchBansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBansRequestValidationError{}

// Validate checks the field values on WatchBlocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchBlocksRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBlocksRequestValidationError is the validation error returned by
// WatchBlocksRequest.Validate if the designated constraints aren't met.
type WatchBlocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBlocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBlocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBlocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBlocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBlocksRequestValidationError) ErrorName() string {
	return "WatchBlocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBlocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBlocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBlocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBlocksRequestValidationError{}

// Validate checks the field values on WatchWarnsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WatchWarnsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchWarnsRequestValidationError is the validation error returned by
// WatchWarnsRequest.Validate if the designated constraints aren't met.
type WatchWarnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchWarnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchWarnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchWarnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchWarnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchWarnsRequestValidationError) ErrorName() string {
	return "WatchWarnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchWarnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchWarnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchWarnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchWarnsRequestValidationError{}

// Validate checks the field values on WatchAdminJailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchAdminJailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchAdminJailsRequestValidationError is the validation error returned by
// WatchAdminJailsRequest.Validate if the designated constraints aren't met.
type WatchAdminJailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchAdminJailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchAdminJailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchAdminJailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchAdminJailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchAdminJailsRequestValidationError) ErrorName() string {
	return "WatchAdminJailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchAdminJailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchAdminJailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchAdminJailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchAdminJailsRequestValidationError{}

// Validate checks the field values on WatchUnBansRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchUnBansRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchUnBansRequestValidationError is the validation error returned by
// WatchUnBansRequest.Validate if the designated constraints aren't met.
type WatchUnBansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUnBansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUnBansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUnBansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUnBansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUnBansRequestValidationError) ErrorName() string {
	return "WatchUnBansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUnBansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUnBansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUnBansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUnBansRequestValidationError{}

// Validate checks the field values on WatchUnBlocksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchUnBlocksRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchUnBlocksRequestValidationError is the validation error returned by
// WatchUnBlocksRequest.Validate if the designated constraints aren't met.
type WatchUnBlocksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUnBlocksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUnBlocksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUnBlocksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUnBlocksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUnBlocksRequestValidationError) ErrorName() string {
	return "WatchUnBlocksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUnBlocksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUnBlocksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUnBlocksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUnBlocksRequestValidationError{}

// Validate checks the field values on WatchUnWarnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchUnWarnsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchUnWarnsRequestValidationError is the validation error returned by
// WatchUnWarnsRequest.Validate if the designated constraints aren't met.
type WatchUnWarnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUnWarnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUnWarnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUnWarnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUnWarnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUnWarnsRequestValidationError) ErrorName() string {
	return "WatchUnWarnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUnWarnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUnWarnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUnWarnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUnWarnsRequestValidationError{}

// Validate checks the field values on WatchUnAdminJailsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchUnAdminJailsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchUnAdminJailsRequestValidationError is the validation error returned by
// WatchUnAdminJailsRequest.Validate if the designated constraints aren't met.
type WatchUnAdminJailsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUnAdminJailsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUnAdminJailsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUnAdminJailsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUnAdminJailsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUnAdminJailsRequestValidationError) ErrorName() string {
	return "WatchUnAdminJailsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUnAdminJailsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUnAdminJailsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUnAdminJailsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUnAdminJailsRequestValidationError{}

// Validate checks the field values on WatchPlayerPunishmentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPlayerPunishmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for CharacterId

	return nil
}

// WatchPlayerPunishmentsRequestValidationError is the validation error
// returned by WatchPlayerPunishmentsRequest.Validate if the designated
// constraints aren't met.
type WatchPlayerPunishmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPlayerPunishmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPlayerPunishmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPlayerPunishmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPlayerPunishmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPlayerPunishmentsRequestValidationError) ErrorName() string {
	return "WatchPlayerPunishmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPlayerPunishmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPlayerPunishmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPlayerPunishmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPlayerPunishmentsRequestValidationError{}

// Validate checks the field values on WatchPlayerPunishmentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPlayerPunishmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Punishment.(type) {

	case *WatchPlayerPunishmentsResponse_Ban:

		if v, ok := interface{}(m.GetBan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerPunishmentsResponseValidationError{
					field:  "Ban",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerPunishmentsResponse_Block:

		if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerPunishmentsResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerPunishmentsResponse_Warn:

		if v, ok := interface{}(m.GetWarn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerPunishmentsResponseValidationError{
					field:  "Warn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerPunishmentsResponse_Aj:

		if v, ok := interface{}(m.GetAj()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerPunishmentsResponseValidationError{
					field:  "Aj",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WatchPlayerPunishmentsResponseValidationError is the validation error
// returned by WatchPlayerPunishmentsResponse.Validate if the designated
// constraints aren't met.
type WatchPlayerPunishmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPlayerPunishmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPlayerPunishmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPlayerPunishmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPlayerPunishmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPlayerPunishmentsResponseValidationError) ErrorName() string {
	return "WatchPlayerPunishmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPlayerPunishmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPlayerPunishmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPlayerPunishmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPlayerPunishmentsResponseValidationError{}

// Validate checks the field values on WatchPlayerAcquittalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPlayerAcquittalsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccountId

	// no validation rules for CharacterId

	return nil
}

// WatchPlayerAcquittalsRequestValidationError is the validation error returned
// by WatchPlayerAcquittalsRequest.Validate if the designated constraints
// aren't met.
type WatchPlayerAcquittalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPlayerAcquittalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPlayerAcquittalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPlayerAcquittalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPlayerAcquittalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPlayerAcquittalsRequestValidationError) ErrorName() string {
	return "WatchPlayerAcquittalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPlayerAcquittalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPlayerAcquittalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPlayerAcquittalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPlayerAcquittalsRequestValidationError{}

// Validate checks the field values on WatchPlayerAcquittalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPlayerAcquittalsResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Acquittal.(type) {

	case *WatchPlayerAcquittalsResponse_Unban:

		if v, ok := interface{}(m.GetUnban()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerAcquittalsResponseValidationError{
					field:  "Unban",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerAcquittalsResponse_Unblock:

		if v, ok := interface{}(m.GetUnblock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerAcquittalsResponseValidationError{
					field:  "Unblock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerAcquittalsResponse_Unwarn:

		if v, ok := interface{}(m.GetUnwarn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerAcquittalsResponseValidationError{
					field:  "Unwarn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPlayerAcquittalsResponse_Unaj:

		if v, ok := interface{}(m.GetUnaj()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPlayerAcquittalsResponseValidationError{
					field:  "Unaj",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WatchPlayerAcquittalsResponseValidationError is the validation error
// returned by WatchPlayerAcquittalsResponse.Validate if the designated
// constraints aren't met.
type WatchPlayerAcquittalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPlayerAcquittalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPlayerAcquittalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPlayerAcquittalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPlayerAcquittalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPlayerAcquittalsResponseValidationError) ErrorName() string {
	return "WatchPlayerAcquittalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPlayerAcquittalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPlayerAcquittalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPlayerAcquittalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPlayerAcquittalsResponseValidationError{}

// Validate checks the field values on WatchPunishmentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPunishmentsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchPunishmentsRequestValidationError is the validation error returned by
// WatchPunishmentsRequest.Validate if the designated constraints aren't met.
type WatchPunishmentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPunishmentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPunishmentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPunishmentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPunishmentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPunishmentsRequestValidationError) ErrorName() string {
	return "WatchPunishmentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPunishmentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPunishmentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPunishmentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPunishmentsRequestValidationError{}

// Validate checks the field values on WatchPunishmentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPunishmentsResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Punishment.(type) {

	case *WatchPunishmentsResponse_Ban:

		if v, ok := interface{}(m.GetBan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPunishmentsResponseValidationError{
					field:  "Ban",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPunishmentsResponse_Block:

		if v, ok := interface{}(m.GetBlock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPunishmentsResponseValidationError{
					field:  "Block",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPunishmentsResponse_Warn:

		if v, ok := interface{}(m.GetWarn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPunishmentsResponseValidationError{
					field:  "Warn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchPunishmentsResponse_Aj:

		if v, ok := interface{}(m.GetAj()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchPunishmentsResponseValidationError{
					field:  "Aj",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WatchPunishmentsResponseValidationError is the validation error returned by
// WatchPunishmentsResponse.Validate if the designated constraints aren't met.
type WatchPunishmentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPunishmentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPunishmentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPunishmentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPunishmentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPunishmentsResponseValidationError) ErrorName() string {
	return "WatchPunishmentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPunishmentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPunishmentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPunishmentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPunishmentsResponseValidationError{}

// Validate checks the field values on WatchAcquittalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchAcquittalsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchAcquittalsRequestValidationError is the validation error returned by
// WatchAcquittalsRequest.Validate if the designated constraints aren't met.
type WatchAcquittalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchAcquittalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchAcquittalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchAcquittalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchAcquittalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchAcquittalsRequestValidationError) ErrorName() string {
	return "WatchAcquittalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchAcquittalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchAcquittalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchAcquittalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchAcquittalsRequestValidationError{}

// Validate checks the field values on WatchAcquittalsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchAcquittalsResponse) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Acquittal.(type) {

	case *WatchAcquittalsResponse_Unban:

		if v, ok := interface{}(m.GetUnban()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchAcquittalsResponseValidationError{
					field:  "Unban",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchAcquittalsResponse_Unblock:

		if v, ok := interface{}(m.GetUnblock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchAcquittalsResponseValidationError{
					field:  "Unblock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchAcquittalsResponse_Unwarn:

		if v, ok := interface{}(m.GetUnwarn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchAcquittalsResponseValidationError{
					field:  "Unwarn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *WatchAcquittalsResponse_Unaj:

		if v, ok := interface{}(m.GetUnaj()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WatchAcquittalsResponseValidationError{
					field:  "Unaj",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// WatchAcquittalsResponseValidationError is the validation error returned by
// WatchAcquittalsResponse.Validate if the designated constraints aren't met.
type WatchAcquittalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchAcquittalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchAcquittalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchAcquittalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchAcquittalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchAcquittalsResponseValidationError) ErrorName() string {
	return "WatchAcquittalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchAcquittalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchAcquittalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchAcquittalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchAcquittalsResponseValidationError{}
