// Code generated by protoc-gen-go. DO NOT EDIT.
// source: punishments/punishments.proto

package punishments

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PunishmentType int32

const (
	PunishmentType_UNKNOWN_PUNISHMENT PunishmentType = 0
	PunishmentType_BAN                PunishmentType = 1
	PunishmentType_BLOCK              PunishmentType = 2
	PunishmentType_WARN               PunishmentType = 3
	PunishmentType_ADMIN_JAIL         PunishmentType = 4
)

var PunishmentType_name = map[int32]string{
	0: "UNKNOWN_PUNISHMENT",
	1: "BAN",
	2: "BLOCK",
	3: "WARN",
	4: "ADMIN_JAIL",
}

var PunishmentType_value = map[string]int32{
	"UNKNOWN_PUNISHMENT": 0,
	"BAN":                1,
	"BLOCK":              2,
	"WARN":               3,
	"ADMIN_JAIL":         4,
}

func (x PunishmentType) String() string {
	return proto.EnumName(PunishmentType_name, int32(x))
}

func (PunishmentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{0}
}

type AcquittalsType int32

const (
	AcquittalsType_UNKNOWN_ACQUITAL AcquittalsType = 0
	AcquittalsType_UNBAN            AcquittalsType = 1
	AcquittalsType_UNBLOCK          AcquittalsType = 2
	AcquittalsType_UNWARN           AcquittalsType = 3
	AcquittalsType_UN_ADMIN_JAIL    AcquittalsType = 4
)

var AcquittalsType_name = map[int32]string{
	0: "UNKNOWN_ACQUITAL",
	1: "UNBAN",
	2: "UNBLOCK",
	3: "UNWARN",
	4: "UN_ADMIN_JAIL",
}

var AcquittalsType_value = map[string]int32{
	"UNKNOWN_ACQUITAL": 0,
	"UNBAN":            1,
	"UNBLOCK":          2,
	"UNWARN":           3,
	"UN_ADMIN_JAIL":    4,
}

func (x AcquittalsType) String() string {
	return proto.EnumName(AcquittalsType_name, int32(x))
}

func (AcquittalsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{1}
}

type BanMessage struct {
	Player    uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Expiration date in Unix time.
	ExpirationDate int64 `protobuf:"varint,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// A ban reason.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that banned a player. 0 = system ban.
	Admin uint32 `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a ban was issued in Unix time.
	BanDate int64 `protobuf:"varint,7,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`
	// Ban status. True = active, false = deactivated.
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unban in Unix time.
	// This field is set only when ban was deactivated.
	UnbanDate int64 `protobuf:"varint,9,opt,name=unban_date,json=unbanDate,proto3" json:"unban_date,omitempty"`
	// Admin that deactivated this ban.
	// This field is set only when ban was deactivated.
	UnbanAdmin           uint32   `protobuf:"varint,10,opt,name=unban_admin,json=unbanAdmin,proto3" json:"unban_admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanMessage) Reset()         { *m = BanMessage{} }
func (m *BanMessage) String() string { return proto.CompactTextString(m) }
func (*BanMessage) ProtoMessage()    {}
func (*BanMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{0}
}

func (m *BanMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanMessage.Unmarshal(m, b)
}
func (m *BanMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanMessage.Marshal(b, m, deterministic)
}
func (m *BanMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanMessage.Merge(m, src)
}
func (m *BanMessage) XXX_Size() int {
	return xxx_messageInfo_BanMessage.Size(m)
}
func (m *BanMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BanMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BanMessage proto.InternalMessageInfo

func (m *BanMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *BanMessage) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *BanMessage) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BanMessage) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *BanMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BanMessage) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

func (m *BanMessage) GetBanDate() int64 {
	if m != nil {
		return m.BanDate
	}
	return 0
}

func (m *BanMessage) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *BanMessage) GetUnbanDate() int64 {
	if m != nil {
		return m.UnbanDate
	}
	return 0
}

func (m *BanMessage) GetUnbanAdmin() uint32 {
	if m != nil {
		return m.UnbanAdmin
	}
	return 0
}

type WarnMessage struct {
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// A character, that was given a warning.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// Expiration date in Unix time.
	ExpirationDate int64 `protobuf:"varint,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// A warn reason.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that warned a player. 0 = system warn.
	Admin uint32 `protobuf:"varint,5,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a warn was issued in Unix time.
	WarnDate int64 `protobuf:"varint,6,opt,name=warn_date,json=warnDate,proto3" json:"warn_date,omitempty"`
	// Warn status. True = active, false = deactivated.
	Active bool `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unwarn in Unix time.
	// This field is set only when warn was deactivated.
	UnwarnDate int64 `protobuf:"varint,8,opt,name=unwarn_date,json=unwarnDate,proto3" json:"unwarn_date,omitempty"`
	// Admin that deactivated a warn.
	// This field is set only when warn was deactivated.
	UnwarnAdmin          uint32   `protobuf:"varint,9,opt,name=unwarn_admin,json=unwarnAdmin,proto3" json:"unwarn_admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WarnMessage) Reset()         { *m = WarnMessage{} }
func (m *WarnMessage) String() string { return proto.CompactTextString(m) }
func (*WarnMessage) ProtoMessage()    {}
func (*WarnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{1}
}

func (m *WarnMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WarnMessage.Unmarshal(m, b)
}
func (m *WarnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WarnMessage.Marshal(b, m, deterministic)
}
func (m *WarnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarnMessage.Merge(m, src)
}
func (m *WarnMessage) XXX_Size() int {
	return xxx_messageInfo_WarnMessage.Size(m)
}
func (m *WarnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_WarnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_WarnMessage proto.InternalMessageInfo

func (m *WarnMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *WarnMessage) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *WarnMessage) GetExpirationDate() int64 {
	if m != nil {
		return m.ExpirationDate
	}
	return 0
}

func (m *WarnMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *WarnMessage) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

func (m *WarnMessage) GetWarnDate() int64 {
	if m != nil {
		return m.WarnDate
	}
	return 0
}

func (m *WarnMessage) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *WarnMessage) GetUnwarnDate() int64 {
	if m != nil {
		return m.UnwarnDate
	}
	return 0
}

func (m *WarnMessage) GetUnwarnAdmin() uint32 {
	if m != nil {
		return m.UnwarnAdmin
	}
	return 0
}

type BlockMessage struct {
	// A player, that owns a blocked character.
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Blocked character.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// A block reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that blocked a player. 0 = system block.
	Admin uint32 `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a block was issued in Unix time.
	BlockDate int64 `protobuf:"varint,5,opt,name=block_date,json=blockDate,proto3" json:"block_date,omitempty"`
	Active    bool  `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unblock in Unix time.
	// This field is set only when a block was deactivated.
	UnblockDate int64 `protobuf:"varint,7,opt,name=unblock_date,json=unblockDate,proto3" json:"unblock_date,omitempty"`
	// An admin that unblocked a player.
	// This field is set only when a block was deactivated.
	UnblockAdmin         uint32   `protobuf:"varint,8,opt,name=unblock_admin,json=unblockAdmin,proto3" json:"unblock_admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockMessage) Reset()         { *m = BlockMessage{} }
func (m *BlockMessage) String() string { return proto.CompactTextString(m) }
func (*BlockMessage) ProtoMessage()    {}
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{2}
}

func (m *BlockMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockMessage.Unmarshal(m, b)
}
func (m *BlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockMessage.Marshal(b, m, deterministic)
}
func (m *BlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockMessage.Merge(m, src)
}
func (m *BlockMessage) XXX_Size() int {
	return xxx_messageInfo_BlockMessage.Size(m)
}
func (m *BlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BlockMessage proto.InternalMessageInfo

func (m *BlockMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *BlockMessage) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *BlockMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BlockMessage) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

func (m *BlockMessage) GetBlockDate() int64 {
	if m != nil {
		return m.BlockDate
	}
	return 0
}

func (m *BlockMessage) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *BlockMessage) GetUnblockDate() int64 {
	if m != nil {
		return m.UnblockDate
	}
	return 0
}

func (m *BlockMessage) GetUnblockAdmin() uint32 {
	if m != nil {
		return m.UnblockAdmin
	}
	return 0
}

type AdminJailMessage struct {
	// A player, that owns a jailed character.
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Character that has been jailed.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// An admin jail reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that jail a player. 0 = system jail.
	Admin uint32 `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which an admin jail was issued in Unix time.
	AjDate int64 `protobuf:"varint,5,opt,name=aj_date,json=ajDate,proto3" json:"aj_date,omitempty"`
	// Time of admin jail in seconds.
	JailTime             uint32   `protobuf:"varint,6,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminJailMessage) Reset()         { *m = AdminJailMessage{} }
func (m *AdminJailMessage) String() string { return proto.CompactTextString(m) }
func (*AdminJailMessage) ProtoMessage()    {}
func (*AdminJailMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{3}
}

func (m *AdminJailMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminJailMessage.Unmarshal(m, b)
}
func (m *AdminJailMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminJailMessage.Marshal(b, m, deterministic)
}
func (m *AdminJailMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminJailMessage.Merge(m, src)
}
func (m *AdminJailMessage) XXX_Size() int {
	return xxx_messageInfo_AdminJailMessage.Size(m)
}
func (m *AdminJailMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminJailMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AdminJailMessage proto.InternalMessageInfo

func (m *AdminJailMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *AdminJailMessage) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *AdminJailMessage) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AdminJailMessage) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

func (m *AdminJailMessage) GetAjDate() int64 {
	if m != nil {
		return m.AjDate
	}
	return 0
}

func (m *AdminJailMessage) GetJailTime() uint32 {
	if m != nil {
		return m.JailTime
	}
	return 0
}

type UnBanMessage struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	BanId                uint32   `protobuf:"varint,2,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBanMessage) Reset()         { *m = UnBanMessage{} }
func (m *UnBanMessage) String() string { return proto.CompactTextString(m) }
func (*UnBanMessage) ProtoMessage()    {}
func (*UnBanMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{4}
}

func (m *UnBanMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBanMessage.Unmarshal(m, b)
}
func (m *UnBanMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBanMessage.Marshal(b, m, deterministic)
}
func (m *UnBanMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBanMessage.Merge(m, src)
}
func (m *UnBanMessage) XXX_Size() int {
	return xxx_messageInfo_UnBanMessage.Size(m)
}
func (m *UnBanMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBanMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnBanMessage proto.InternalMessageInfo

func (m *UnBanMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *UnBanMessage) GetBanId() uint32 {
	if m != nil {
		return m.BanId
	}
	return 0
}

type UnBlockMessage struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	BlockId              uint32   `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBlockMessage) Reset()         { *m = UnBlockMessage{} }
func (m *UnBlockMessage) String() string { return proto.CompactTextString(m) }
func (*UnBlockMessage) ProtoMessage()    {}
func (*UnBlockMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{5}
}

func (m *UnBlockMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBlockMessage.Unmarshal(m, b)
}
func (m *UnBlockMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBlockMessage.Marshal(b, m, deterministic)
}
func (m *UnBlockMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBlockMessage.Merge(m, src)
}
func (m *UnBlockMessage) XXX_Size() int {
	return xxx_messageInfo_UnBlockMessage.Size(m)
}
func (m *UnBlockMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBlockMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnBlockMessage proto.InternalMessageInfo

func (m *UnBlockMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *UnBlockMessage) GetBlockId() uint32 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

type UnWarnMessage struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	WarnId               uint32   `protobuf:"varint,2,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnWarnMessage) Reset()         { *m = UnWarnMessage{} }
func (m *UnWarnMessage) String() string { return proto.CompactTextString(m) }
func (*UnWarnMessage) ProtoMessage()    {}
func (*UnWarnMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{6}
}

func (m *UnWarnMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnWarnMessage.Unmarshal(m, b)
}
func (m *UnWarnMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnWarnMessage.Marshal(b, m, deterministic)
}
func (m *UnWarnMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnWarnMessage.Merge(m, src)
}
func (m *UnWarnMessage) XXX_Size() int {
	return xxx_messageInfo_UnWarnMessage.Size(m)
}
func (m *UnWarnMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnWarnMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnWarnMessage proto.InternalMessageInfo

func (m *UnWarnMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *UnWarnMessage) GetWarnId() uint32 {
	if m != nil {
		return m.WarnId
	}
	return 0
}

type UnAdminJailMessage struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Character            uint32   `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnAdminJailMessage) Reset()         { *m = UnAdminJailMessage{} }
func (m *UnAdminJailMessage) String() string { return proto.CompactTextString(m) }
func (*UnAdminJailMessage) ProtoMessage()    {}
func (*UnAdminJailMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{7}
}

func (m *UnAdminJailMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnAdminJailMessage.Unmarshal(m, b)
}
func (m *UnAdminJailMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnAdminJailMessage.Marshal(b, m, deterministic)
}
func (m *UnAdminJailMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnAdminJailMessage.Merge(m, src)
}
func (m *UnAdminJailMessage) XXX_Size() int {
	return xxx_messageInfo_UnAdminJailMessage.Size(m)
}
func (m *UnAdminJailMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_UnAdminJailMessage.DiscardUnknown(m)
}

var xxx_messageInfo_UnAdminJailMessage proto.InternalMessageInfo

func (m *UnAdminJailMessage) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *UnAdminJailMessage) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

// Request message for rpc `Ban`.
type BanRequest struct {
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Player character that was accused.
	// Optional.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Ban expiration time in days. 0 = permanent ban.
	Time uint32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// Ban reason.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that banned a player. 0 = system ban.
	Admin                uint32   `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanRequest) Reset()         { *m = BanRequest{} }
func (m *BanRequest) String() string { return proto.CompactTextString(m) }
func (*BanRequest) ProtoMessage()    {}
func (*BanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{8}
}

func (m *BanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanRequest.Unmarshal(m, b)
}
func (m *BanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanRequest.Marshal(b, m, deterministic)
}
func (m *BanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanRequest.Merge(m, src)
}
func (m *BanRequest) XXX_Size() int {
	return xxx_messageInfo_BanRequest.Size(m)
}
func (m *BanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BanRequest proto.InternalMessageInfo

func (m *BanRequest) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *BanRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *BanRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *BanRequest) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BanRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BanRequest) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

// Response message for rpc `Ban`.
type BanResponse struct {
	BanId                uint32   `protobuf:"varint,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanResponse) Reset()         { *m = BanResponse{} }
func (m *BanResponse) String() string { return proto.CompactTextString(m) }
func (*BanResponse) ProtoMessage()    {}
func (*BanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{9}
}

func (m *BanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanResponse.Unmarshal(m, b)
}
func (m *BanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanResponse.Marshal(b, m, deterministic)
}
func (m *BanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanResponse.Merge(m, src)
}
func (m *BanResponse) XXX_Size() int {
	return xxx_messageInfo_BanResponse.Size(m)
}
func (m *BanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BanResponse proto.InternalMessageInfo

func (m *BanResponse) GetBanId() uint32 {
	if m != nil {
		return m.BanId
	}
	return 0
}

// Request message for rpc `Block`.
type BlockRequest struct {
	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	// Block reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that blocked a player. 0 = system ban.
	Admin                uint32   `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{10}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *BlockRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BlockRequest) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

// Response message for rpc `Block`.
type BlockResponse struct {
	BlockId              uint32   `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponse) Reset()         { *m = BlockResponse{} }
func (m *BlockResponse) String() string { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()    {}
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{11}
}

func (m *BlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponse.Unmarshal(m, b)
}
func (m *BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponse.Marshal(b, m, deterministic)
}
func (m *BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponse.Merge(m, src)
}
func (m *BlockResponse) XXX_Size() int {
	return xxx_messageInfo_BlockResponse.Size(m)
}
func (m *BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponse proto.InternalMessageInfo

func (m *BlockResponse) GetBlockId() uint32 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

// Request message for rpc `Warn`.
type WarnRequest struct {
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Player character that was accused.
	// Optional.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// Warn expiration time in days. 0 = permanent warn.
	Time uint32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// Warn reason.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that warned player. 0 = system warn.
	Admin                uint32   `protobuf:"varint,5,opt,name=admin,proto3" json:"admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WarnRequest) Reset()         { *m = WarnRequest{} }
func (m *WarnRequest) String() string { return proto.CompactTextString(m) }
func (*WarnRequest) ProtoMessage()    {}
func (*WarnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{12}
}

func (m *WarnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WarnRequest.Unmarshal(m, b)
}
func (m *WarnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WarnRequest.Marshal(b, m, deterministic)
}
func (m *WarnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarnRequest.Merge(m, src)
}
func (m *WarnRequest) XXX_Size() int {
	return xxx_messageInfo_WarnRequest.Size(m)
}
func (m *WarnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WarnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WarnRequest proto.InternalMessageInfo

func (m *WarnRequest) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *WarnRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *WarnRequest) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *WarnRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *WarnRequest) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

// Response message for rpc `Warn`.
type WarnResponse struct {
	WarnId               uint32   `protobuf:"varint,1,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WarnResponse) Reset()         { *m = WarnResponse{} }
func (m *WarnResponse) String() string { return proto.CompactTextString(m) }
func (*WarnResponse) ProtoMessage()    {}
func (*WarnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{13}
}

func (m *WarnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WarnResponse.Unmarshal(m, b)
}
func (m *WarnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WarnResponse.Marshal(b, m, deterministic)
}
func (m *WarnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WarnResponse.Merge(m, src)
}
func (m *WarnResponse) XXX_Size() int {
	return xxx_messageInfo_WarnResponse.Size(m)
}
func (m *WarnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WarnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WarnResponse proto.InternalMessageInfo

func (m *WarnResponse) GetWarnId() uint32 {
	if m != nil {
		return m.WarnId
	}
	return 0
}

// Request message for rpc `AdminJail`.
type AdminJailRequest struct {
	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	// Admin jail time.
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Admin jail reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that gave an admin jail to a player.
	Admin                uint32   `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminJailRequest) Reset()         { *m = AdminJailRequest{} }
func (m *AdminJailRequest) String() string { return proto.CompactTextString(m) }
func (*AdminJailRequest) ProtoMessage()    {}
func (*AdminJailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{14}
}

func (m *AdminJailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminJailRequest.Unmarshal(m, b)
}
func (m *AdminJailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminJailRequest.Marshal(b, m, deterministic)
}
func (m *AdminJailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminJailRequest.Merge(m, src)
}
func (m *AdminJailRequest) XXX_Size() int {
	return xxx_messageInfo_AdminJailRequest.Size(m)
}
func (m *AdminJailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminJailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminJailRequest proto.InternalMessageInfo

func (m *AdminJailRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func (m *AdminJailRequest) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *AdminJailRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AdminJailRequest) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

// Response message for rpc `AdminJail`.
type AdminJailResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdminJailResponse) Reset()         { *m = AdminJailResponse{} }
func (m *AdminJailResponse) String() string { return proto.CompactTextString(m) }
func (*AdminJailResponse) ProtoMessage()    {}
func (*AdminJailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{15}
}

func (m *AdminJailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdminJailResponse.Unmarshal(m, b)
}
func (m *AdminJailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdminJailResponse.Marshal(b, m, deterministic)
}
func (m *AdminJailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminJailResponse.Merge(m, src)
}
func (m *AdminJailResponse) XXX_Size() int {
	return xxx_messageInfo_AdminJailResponse.Size(m)
}
func (m *AdminJailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminJailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AdminJailResponse proto.InternalMessageInfo

// Request message for rpc `MuteGlobalChats`.
type MuteGlobalChatsRequest struct {
	Account              uint32   `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MuteGlobalChatsRequest) Reset()         { *m = MuteGlobalChatsRequest{} }
func (m *MuteGlobalChatsRequest) String() string { return proto.CompactTextString(m) }
func (*MuteGlobalChatsRequest) ProtoMessage()    {}
func (*MuteGlobalChatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{16}
}

func (m *MuteGlobalChatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MuteGlobalChatsRequest.Unmarshal(m, b)
}
func (m *MuteGlobalChatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MuteGlobalChatsRequest.Marshal(b, m, deterministic)
}
func (m *MuteGlobalChatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MuteGlobalChatsRequest.Merge(m, src)
}
func (m *MuteGlobalChatsRequest) XXX_Size() int {
	return xxx_messageInfo_MuteGlobalChatsRequest.Size(m)
}
func (m *MuteGlobalChatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MuteGlobalChatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MuteGlobalChatsRequest proto.InternalMessageInfo

func (m *MuteGlobalChatsRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

// Response message for rpc `MuteGlobalChats`.
type MuteGlobalChatsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MuteGlobalChatsResponse) Reset()         { *m = MuteGlobalChatsResponse{} }
func (m *MuteGlobalChatsResponse) String() string { return proto.CompactTextString(m) }
func (*MuteGlobalChatsResponse) ProtoMessage()    {}
func (*MuteGlobalChatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{17}
}

func (m *MuteGlobalChatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MuteGlobalChatsResponse.Unmarshal(m, b)
}
func (m *MuteGlobalChatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MuteGlobalChatsResponse.Marshal(b, m, deterministic)
}
func (m *MuteGlobalChatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MuteGlobalChatsResponse.Merge(m, src)
}
func (m *MuteGlobalChatsResponse) XXX_Size() int {
	return xxx_messageInfo_MuteGlobalChatsResponse.Size(m)
}
func (m *MuteGlobalChatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MuteGlobalChatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MuteGlobalChatsResponse proto.InternalMessageInfo

// Request message for rpc `UnBan`.
type UnBanRequest struct {
	BanId                uint32   `protobuf:"varint,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBanRequest) Reset()         { *m = UnBanRequest{} }
func (m *UnBanRequest) String() string { return proto.CompactTextString(m) }
func (*UnBanRequest) ProtoMessage()    {}
func (*UnBanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{18}
}

func (m *UnBanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBanRequest.Unmarshal(m, b)
}
func (m *UnBanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBanRequest.Marshal(b, m, deterministic)
}
func (m *UnBanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBanRequest.Merge(m, src)
}
func (m *UnBanRequest) XXX_Size() int {
	return xxx_messageInfo_UnBanRequest.Size(m)
}
func (m *UnBanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnBanRequest proto.InternalMessageInfo

func (m *UnBanRequest) GetBanId() uint32 {
	if m != nil {
		return m.BanId
	}
	return 0
}

func (m *UnBanRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Response message for rpc `UnBan`.
type UnBanResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBanResponse) Reset()         { *m = UnBanResponse{} }
func (m *UnBanResponse) String() string { return proto.CompactTextString(m) }
func (*UnBanResponse) ProtoMessage()    {}
func (*UnBanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{19}
}

func (m *UnBanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBanResponse.Unmarshal(m, b)
}
func (m *UnBanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBanResponse.Marshal(b, m, deterministic)
}
func (m *UnBanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBanResponse.Merge(m, src)
}
func (m *UnBanResponse) XXX_Size() int {
	return xxx_messageInfo_UnBanResponse.Size(m)
}
func (m *UnBanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnBanResponse proto.InternalMessageInfo

// Request message for rpc `UnBlock`.
type UnBlockRequest struct {
	BlockId              uint32   `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBlockRequest) Reset()         { *m = UnBlockRequest{} }
func (m *UnBlockRequest) String() string { return proto.CompactTextString(m) }
func (*UnBlockRequest) ProtoMessage()    {}
func (*UnBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{20}
}

func (m *UnBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBlockRequest.Unmarshal(m, b)
}
func (m *UnBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBlockRequest.Marshal(b, m, deterministic)
}
func (m *UnBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBlockRequest.Merge(m, src)
}
func (m *UnBlockRequest) XXX_Size() int {
	return xxx_messageInfo_UnBlockRequest.Size(m)
}
func (m *UnBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnBlockRequest proto.InternalMessageInfo

func (m *UnBlockRequest) GetBlockId() uint32 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

func (m *UnBlockRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Response message for rpc `UnBlock`.
type UnBlockResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnBlockResponse) Reset()         { *m = UnBlockResponse{} }
func (m *UnBlockResponse) String() string { return proto.CompactTextString(m) }
func (*UnBlockResponse) ProtoMessage()    {}
func (*UnBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{21}
}

func (m *UnBlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnBlockResponse.Unmarshal(m, b)
}
func (m *UnBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnBlockResponse.Marshal(b, m, deterministic)
}
func (m *UnBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnBlockResponse.Merge(m, src)
}
func (m *UnBlockResponse) XXX_Size() int {
	return xxx_messageInfo_UnBlockResponse.Size(m)
}
func (m *UnBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnBlockResponse proto.InternalMessageInfo

// Request message for rpc `UnWarn`.
type UnWarnRequest struct {
	WarnId               uint32   `protobuf:"varint,1,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnWarnRequest) Reset()         { *m = UnWarnRequest{} }
func (m *UnWarnRequest) String() string { return proto.CompactTextString(m) }
func (*UnWarnRequest) ProtoMessage()    {}
func (*UnWarnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{22}
}

func (m *UnWarnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnWarnRequest.Unmarshal(m, b)
}
func (m *UnWarnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnWarnRequest.Marshal(b, m, deterministic)
}
func (m *UnWarnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnWarnRequest.Merge(m, src)
}
func (m *UnWarnRequest) XXX_Size() int {
	return xxx_messageInfo_UnWarnRequest.Size(m)
}
func (m *UnWarnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnWarnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnWarnRequest proto.InternalMessageInfo

func (m *UnWarnRequest) GetWarnId() uint32 {
	if m != nil {
		return m.WarnId
	}
	return 0
}

func (m *UnWarnRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// Response message for rpc `UnWarn`.
type UnWarnResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnWarnResponse) Reset()         { *m = UnWarnResponse{} }
func (m *UnWarnResponse) String() string { return proto.CompactTextString(m) }
func (*UnWarnResponse) ProtoMessage()    {}
func (*UnWarnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{23}
}

func (m *UnWarnResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnWarnResponse.Unmarshal(m, b)
}
func (m *UnWarnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnWarnResponse.Marshal(b, m, deterministic)
}
func (m *UnWarnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnWarnResponse.Merge(m, src)
}
func (m *UnWarnResponse) XXX_Size() int {
	return xxx_messageInfo_UnWarnResponse.Size(m)
}
func (m *UnWarnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnWarnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnWarnResponse proto.InternalMessageInfo

// Request message for rpc `UnAdminJail`.
type UnAdminJailRequest struct {
	Character            uint32   `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnAdminJailRequest) Reset()         { *m = UnAdminJailRequest{} }
func (m *UnAdminJailRequest) String() string { return proto.CompactTextString(m) }
func (*UnAdminJailRequest) ProtoMessage()    {}
func (*UnAdminJailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{24}
}

func (m *UnAdminJailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnAdminJailRequest.Unmarshal(m, b)
}
func (m *UnAdminJailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnAdminJailRequest.Marshal(b, m, deterministic)
}
func (m *UnAdminJailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnAdminJailRequest.Merge(m, src)
}
func (m *UnAdminJailRequest) XXX_Size() int {
	return xxx_messageInfo_UnAdminJailRequest.Size(m)
}
func (m *UnAdminJailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnAdminJailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnAdminJailRequest proto.InternalMessageInfo

func (m *UnAdminJailRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

// Response message for rpc `UnAdminJail`.
type UnAdminJailResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnAdminJailResponse) Reset()         { *m = UnAdminJailResponse{} }
func (m *UnAdminJailResponse) String() string { return proto.CompactTextString(m) }
func (*UnAdminJailResponse) ProtoMessage()    {}
func (*UnAdminJailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{25}
}

func (m *UnAdminJailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnAdminJailResponse.Unmarshal(m, b)
}
func (m *UnAdminJailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnAdminJailResponse.Marshal(b, m, deterministic)
}
func (m *UnAdminJailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnAdminJailResponse.Merge(m, src)
}
func (m *UnAdminJailResponse) XXX_Size() int {
	return xxx_messageInfo_UnAdminJailResponse.Size(m)
}
func (m *UnAdminJailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnAdminJailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnAdminJailResponse proto.InternalMessageInfo

// Request message for rpc `UnMuteGlobalChats`.
type UnMuteGlobalChatsRequest struct {
	Account              uint32   `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnMuteGlobalChatsRequest) Reset()         { *m = UnMuteGlobalChatsRequest{} }
func (m *UnMuteGlobalChatsRequest) String() string { return proto.CompactTextString(m) }
func (*UnMuteGlobalChatsRequest) ProtoMessage()    {}
func (*UnMuteGlobalChatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{26}
}

func (m *UnMuteGlobalChatsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnMuteGlobalChatsRequest.Unmarshal(m, b)
}
func (m *UnMuteGlobalChatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnMuteGlobalChatsRequest.Marshal(b, m, deterministic)
}
func (m *UnMuteGlobalChatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnMuteGlobalChatsRequest.Merge(m, src)
}
func (m *UnMuteGlobalChatsRequest) XXX_Size() int {
	return xxx_messageInfo_UnMuteGlobalChatsRequest.Size(m)
}
func (m *UnMuteGlobalChatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnMuteGlobalChatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnMuteGlobalChatsRequest proto.InternalMessageInfo

func (m *UnMuteGlobalChatsRequest) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

// Response message for rpc `UnMuteGlobalChats`.
type UnMuteGlobalChatsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnMuteGlobalChatsResponse) Reset()         { *m = UnMuteGlobalChatsResponse{} }
func (m *UnMuteGlobalChatsResponse) String() string { return proto.CompactTextString(m) }
func (*UnMuteGlobalChatsResponse) ProtoMessage()    {}
func (*UnMuteGlobalChatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{27}
}

func (m *UnMuteGlobalChatsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnMuteGlobalChatsResponse.Unmarshal(m, b)
}
func (m *UnMuteGlobalChatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnMuteGlobalChatsResponse.Marshal(b, m, deterministic)
}
func (m *UnMuteGlobalChatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnMuteGlobalChatsResponse.Merge(m, src)
}
func (m *UnMuteGlobalChatsResponse) XXX_Size() int {
	return xxx_messageInfo_UnMuteGlobalChatsResponse.Size(m)
}
func (m *UnMuteGlobalChatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnMuteGlobalChatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnMuteGlobalChatsResponse proto.InternalMessageInfo

// Request message for rpc `GetPlayerBans`.
type GetPlayerBansRequest struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerBansRequest) Reset()         { *m = GetPlayerBansRequest{} }
func (m *GetPlayerBansRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerBansRequest) ProtoMessage()    {}
func (*GetPlayerBansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{28}
}

func (m *GetPlayerBansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerBansRequest.Unmarshal(m, b)
}
func (m *GetPlayerBansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerBansRequest.Marshal(b, m, deterministic)
}
func (m *GetPlayerBansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerBansRequest.Merge(m, src)
}
func (m *GetPlayerBansRequest) XXX_Size() int {
	return xxx_messageInfo_GetPlayerBansRequest.Size(m)
}
func (m *GetPlayerBansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerBansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerBansRequest proto.InternalMessageInfo

func (m *GetPlayerBansRequest) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *GetPlayerBansRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// Response message for rpc `GetPlayerBans`.
type GetPlayerBansResponse struct {
	Bans                 []*BanMessage `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetPlayerBansResponse) Reset()         { *m = GetPlayerBansResponse{} }
func (m *GetPlayerBansResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerBansResponse) ProtoMessage()    {}
func (*GetPlayerBansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{29}
}

func (m *GetPlayerBansResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerBansResponse.Unmarshal(m, b)
}
func (m *GetPlayerBansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerBansResponse.Marshal(b, m, deterministic)
}
func (m *GetPlayerBansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerBansResponse.Merge(m, src)
}
func (m *GetPlayerBansResponse) XXX_Size() int {
	return xxx_messageInfo_GetPlayerBansResponse.Size(m)
}
func (m *GetPlayerBansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerBansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerBansResponse proto.InternalMessageInfo

func (m *GetPlayerBansResponse) GetBans() []*BanMessage {
	if m != nil {
		return m.Bans
	}
	return nil
}

// Request message for rpc `GetPlayerWarns`.
type GetPlayerWarnsRequest struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerWarnsRequest) Reset()         { *m = GetPlayerWarnsRequest{} }
func (m *GetPlayerWarnsRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerWarnsRequest) ProtoMessage()    {}
func (*GetPlayerWarnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{30}
}

func (m *GetPlayerWarnsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerWarnsRequest.Unmarshal(m, b)
}
func (m *GetPlayerWarnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerWarnsRequest.Marshal(b, m, deterministic)
}
func (m *GetPlayerWarnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerWarnsRequest.Merge(m, src)
}
func (m *GetPlayerWarnsRequest) XXX_Size() int {
	return xxx_messageInfo_GetPlayerWarnsRequest.Size(m)
}
func (m *GetPlayerWarnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerWarnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerWarnsRequest proto.InternalMessageInfo

func (m *GetPlayerWarnsRequest) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

// Response message for rpc `GetPlayerWarns`.
type GetPlayerWarnsResponse struct {
	Warns                []*WarnMessage `protobuf:"bytes,1,rep,name=warns,proto3" json:"warns,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetPlayerWarnsResponse) Reset()         { *m = GetPlayerWarnsResponse{} }
func (m *GetPlayerWarnsResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerWarnsResponse) ProtoMessage()    {}
func (*GetPlayerWarnsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{31}
}

func (m *GetPlayerWarnsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerWarnsResponse.Unmarshal(m, b)
}
func (m *GetPlayerWarnsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerWarnsResponse.Marshal(b, m, deterministic)
}
func (m *GetPlayerWarnsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerWarnsResponse.Merge(m, src)
}
func (m *GetPlayerWarnsResponse) XXX_Size() int {
	return xxx_messageInfo_GetPlayerWarnsResponse.Size(m)
}
func (m *GetPlayerWarnsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerWarnsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerWarnsResponse proto.InternalMessageInfo

func (m *GetPlayerWarnsResponse) GetWarns() []*WarnMessage {
	if m != nil {
		return m.Warns
	}
	return nil
}

// Request message for rpc `GetPlayerAdminJail`.
type GetPlayerAdminJailRequest struct {
	Character            uint32   `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerAdminJailRequest) Reset()         { *m = GetPlayerAdminJailRequest{} }
func (m *GetPlayerAdminJailRequest) String() string { return proto.CompactTextString(m) }
func (*GetPlayerAdminJailRequest) ProtoMessage()    {}
func (*GetPlayerAdminJailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{32}
}

func (m *GetPlayerAdminJailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerAdminJailRequest.Unmarshal(m, b)
}
func (m *GetPlayerAdminJailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerAdminJailRequest.Marshal(b, m, deterministic)
}
func (m *GetPlayerAdminJailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerAdminJailRequest.Merge(m, src)
}
func (m *GetPlayerAdminJailRequest) XXX_Size() int {
	return xxx_messageInfo_GetPlayerAdminJailRequest.Size(m)
}
func (m *GetPlayerAdminJailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerAdminJailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerAdminJailRequest proto.InternalMessageInfo

func (m *GetPlayerAdminJailRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

// Response message for rpc `GetPlayerAdminJail`.
type GetPlayerAdminJailResponse struct {
	// Time of admin jail in seconds.
	JailTime uint32 `protobuf:"varint,1,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
	// Admin jail reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// An admin that put a player in the admin jail.
	Admin uint32 `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date when the player was thrown into admin jail in Unix time.
	Date                 int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPlayerAdminJailResponse) Reset()         { *m = GetPlayerAdminJailResponse{} }
func (m *GetPlayerAdminJailResponse) String() string { return proto.CompactTextString(m) }
func (*GetPlayerAdminJailResponse) ProtoMessage()    {}
func (*GetPlayerAdminJailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{33}
}

func (m *GetPlayerAdminJailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPlayerAdminJailResponse.Unmarshal(m, b)
}
func (m *GetPlayerAdminJailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPlayerAdminJailResponse.Marshal(b, m, deterministic)
}
func (m *GetPlayerAdminJailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPlayerAdminJailResponse.Merge(m, src)
}
func (m *GetPlayerAdminJailResponse) XXX_Size() int {
	return xxx_messageInfo_GetPlayerAdminJailResponse.Size(m)
}
func (m *GetPlayerAdminJailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPlayerAdminJailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPlayerAdminJailResponse proto.InternalMessageInfo

func (m *GetPlayerAdminJailResponse) GetJailTime() uint32 {
	if m != nil {
		return m.JailTime
	}
	return 0
}

func (m *GetPlayerAdminJailResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *GetPlayerAdminJailResponse) GetAdmin() uint32 {
	if m != nil {
		return m.Admin
	}
	return 0
}

func (m *GetPlayerAdminJailResponse) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Request message for rpc `GetBan`.
type GetBanRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBanRequest) Reset()         { *m = GetBanRequest{} }
func (m *GetBanRequest) String() string { return proto.CompactTextString(m) }
func (*GetBanRequest) ProtoMessage()    {}
func (*GetBanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{34}
}

func (m *GetBanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBanRequest.Unmarshal(m, b)
}
func (m *GetBanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBanRequest.Marshal(b, m, deterministic)
}
func (m *GetBanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBanRequest.Merge(m, src)
}
func (m *GetBanRequest) XXX_Size() int {
	return xxx_messageInfo_GetBanRequest.Size(m)
}
func (m *GetBanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBanRequest proto.InternalMessageInfo

func (m *GetBanRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request message for rpc `GetWarn`.
type GetWarnRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetWarnRequest) Reset()         { *m = GetWarnRequest{} }
func (m *GetWarnRequest) String() string { return proto.CompactTextString(m) }
func (*GetWarnRequest) ProtoMessage()    {}
func (*GetWarnRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{35}
}

func (m *GetWarnRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetWarnRequest.Unmarshal(m, b)
}
func (m *GetWarnRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetWarnRequest.Marshal(b, m, deterministic)
}
func (m *GetWarnRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetWarnRequest.Merge(m, src)
}
func (m *GetWarnRequest) XXX_Size() int {
	return xxx_messageInfo_GetWarnRequest.Size(m)
}
func (m *GetWarnRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetWarnRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetWarnRequest proto.InternalMessageInfo

func (m *GetWarnRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request message for rpc `GetBlock`.
type GetBlockRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockRequest) Reset()         { *m = GetBlockRequest{} }
func (m *GetBlockRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockRequest) ProtoMessage()    {}
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{36}
}

func (m *GetBlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBlockRequest.Unmarshal(m, b)
}
func (m *GetBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBlockRequest.Marshal(b, m, deterministic)
}
func (m *GetBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockRequest.Merge(m, src)
}
func (m *GetBlockRequest) XXX_Size() int {
	return xxx_messageInfo_GetBlockRequest.Size(m)
}
func (m *GetBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockRequest proto.InternalMessageInfo

func (m *GetBlockRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request message for rpc `IsPlayerBanned`.
type IsPlayerBannedRequest struct {
	Player               uint32   `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPlayerBannedRequest) Reset()         { *m = IsPlayerBannedRequest{} }
func (m *IsPlayerBannedRequest) String() string { return proto.CompactTextString(m) }
func (*IsPlayerBannedRequest) ProtoMessage()    {}
func (*IsPlayerBannedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{37}
}

func (m *IsPlayerBannedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsPlayerBannedRequest.Unmarshal(m, b)
}
func (m *IsPlayerBannedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsPlayerBannedRequest.Marshal(b, m, deterministic)
}
func (m *IsPlayerBannedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPlayerBannedRequest.Merge(m, src)
}
func (m *IsPlayerBannedRequest) XXX_Size() int {
	return xxx_messageInfo_IsPlayerBannedRequest.Size(m)
}
func (m *IsPlayerBannedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPlayerBannedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsPlayerBannedRequest proto.InternalMessageInfo

func (m *IsPlayerBannedRequest) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *IsPlayerBannedRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

// Response message for rpc `IsPlayerBanned`.
type IsPlayerBannedResponse struct {
	Banned               bool     `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
	BanId                uint32   `protobuf:"varint,2,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsPlayerBannedResponse) Reset()         { *m = IsPlayerBannedResponse{} }
func (m *IsPlayerBannedResponse) String() string { return proto.CompactTextString(m) }
func (*IsPlayerBannedResponse) ProtoMessage()    {}
func (*IsPlayerBannedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{38}
}

func (m *IsPlayerBannedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsPlayerBannedResponse.Unmarshal(m, b)
}
func (m *IsPlayerBannedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsPlayerBannedResponse.Marshal(b, m, deterministic)
}
func (m *IsPlayerBannedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsPlayerBannedResponse.Merge(m, src)
}
func (m *IsPlayerBannedResponse) XXX_Size() int {
	return xxx_messageInfo_IsPlayerBannedResponse.Size(m)
}
func (m *IsPlayerBannedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsPlayerBannedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsPlayerBannedResponse proto.InternalMessageInfo

func (m *IsPlayerBannedResponse) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func (m *IsPlayerBannedResponse) GetBanId() uint32 {
	if m != nil {
		return m.BanId
	}
	return 0
}

// Request message for rpc `IsCharacterBlocked`.
type IsCharacterBlockedRequest struct {
	Character            uint32   `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsCharacterBlockedRequest) Reset()         { *m = IsCharacterBlockedRequest{} }
func (m *IsCharacterBlockedRequest) String() string { return proto.CompactTextString(m) }
func (*IsCharacterBlockedRequest) ProtoMessage()    {}
func (*IsCharacterBlockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{39}
}

func (m *IsCharacterBlockedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsCharacterBlockedRequest.Unmarshal(m, b)
}
func (m *IsCharacterBlockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsCharacterBlockedRequest.Marshal(b, m, deterministic)
}
func (m *IsCharacterBlockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsCharacterBlockedRequest.Merge(m, src)
}
func (m *IsCharacterBlockedRequest) XXX_Size() int {
	return xxx_messageInfo_IsCharacterBlockedRequest.Size(m)
}
func (m *IsCharacterBlockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsCharacterBlockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsCharacterBlockedRequest proto.InternalMessageInfo

func (m *IsCharacterBlockedRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

// Response message for rpc `IsCharacterBlocked`.
type IsCharacterBlockedResponse struct {
	Blocked              bool     `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	BlockId              uint32   `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsCharacterBlockedResponse) Reset()         { *m = IsCharacterBlockedResponse{} }
func (m *IsCharacterBlockedResponse) String() string { return proto.CompactTextString(m) }
func (*IsCharacterBlockedResponse) ProtoMessage()    {}
func (*IsCharacterBlockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{40}
}

func (m *IsCharacterBlockedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsCharacterBlockedResponse.Unmarshal(m, b)
}
func (m *IsCharacterBlockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsCharacterBlockedResponse.Marshal(b, m, deterministic)
}
func (m *IsCharacterBlockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsCharacterBlockedResponse.Merge(m, src)
}
func (m *IsCharacterBlockedResponse) XXX_Size() int {
	return xxx_messageInfo_IsCharacterBlockedResponse.Size(m)
}
func (m *IsCharacterBlockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsCharacterBlockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsCharacterBlockedResponse proto.InternalMessageInfo

func (m *IsCharacterBlockedResponse) GetBlocked() bool {
	if m != nil {
		return m.Blocked
	}
	return false
}

func (m *IsCharacterBlockedResponse) GetBlockId() uint32 {
	if m != nil {
		return m.BlockId
	}
	return 0
}

// Request message for rpc `IsCharacterJailed`.
type IsCharacterJailedRequest struct {
	Character            uint32   `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsCharacterJailedRequest) Reset()         { *m = IsCharacterJailedRequest{} }
func (m *IsCharacterJailedRequest) String() string { return proto.CompactTextString(m) }
func (*IsCharacterJailedRequest) ProtoMessage()    {}
func (*IsCharacterJailedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{41}
}

func (m *IsCharacterJailedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsCharacterJailedRequest.Unmarshal(m, b)
}
func (m *IsCharacterJailedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsCharacterJailedRequest.Marshal(b, m, deterministic)
}
func (m *IsCharacterJailedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsCharacterJailedRequest.Merge(m, src)
}
func (m *IsCharacterJailedRequest) XXX_Size() int {
	return xxx_messageInfo_IsCharacterJailedRequest.Size(m)
}
func (m *IsCharacterJailedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsCharacterJailedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsCharacterJailedRequest proto.InternalMessageInfo

func (m *IsCharacterJailedRequest) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

// Response message for rpc `IsCharacterJailed`.
type IsCharacterJailedResponse struct {
	Jailed               bool     `protobuf:"varint,1,opt,name=jailed,proto3" json:"jailed,omitempty"`
	JailTime             uint32   `protobuf:"varint,2,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsCharacterJailedResponse) Reset()         { *m = IsCharacterJailedResponse{} }
func (m *IsCharacterJailedResponse) String() string { return proto.CompactTextString(m) }
func (*IsCharacterJailedResponse) ProtoMessage()    {}
func (*IsCharacterJailedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{42}
}

func (m *IsCharacterJailedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsCharacterJailedResponse.Unmarshal(m, b)
}
func (m *IsCharacterJailedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsCharacterJailedResponse.Marshal(b, m, deterministic)
}
func (m *IsCharacterJailedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsCharacterJailedResponse.Merge(m, src)
}
func (m *IsCharacterJailedResponse) XXX_Size() int {
	return xxx_messageInfo_IsCharacterJailedResponse.Size(m)
}
func (m *IsCharacterJailedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsCharacterJailedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsCharacterJailedResponse proto.InternalMessageInfo

func (m *IsCharacterJailedResponse) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *IsCharacterJailedResponse) GetJailTime() uint32 {
	if m != nil {
		return m.JailTime
	}
	return 0
}

// Request message for rpc `WatchBans`.
type WatchBansRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBansRequest) Reset()         { *m = WatchBansRequest{} }
func (m *WatchBansRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBansRequest) ProtoMessage()    {}
func (*WatchBansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{43}
}

func (m *WatchBansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBansRequest.Unmarshal(m, b)
}
func (m *WatchBansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBansRequest.Marshal(b, m, deterministic)
}
func (m *WatchBansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBansRequest.Merge(m, src)
}
func (m *WatchBansRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBansRequest.Size(m)
}
func (m *WatchBansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBansRequest proto.InternalMessageInfo

// Request message for rpc `WatchBlocks`.
type WatchBlocksRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchBlocksRequest) Reset()         { *m = WatchBlocksRequest{} }
func (m *WatchBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchBlocksRequest) ProtoMessage()    {}
func (*WatchBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{44}
}

func (m *WatchBlocksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchBlocksRequest.Unmarshal(m, b)
}
func (m *WatchBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchBlocksRequest.Marshal(b, m, deterministic)
}
func (m *WatchBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchBlocksRequest.Merge(m, src)
}
func (m *WatchBlocksRequest) XXX_Size() int {
	return xxx_messageInfo_WatchBlocksRequest.Size(m)
}
func (m *WatchBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchBlocksRequest proto.InternalMessageInfo

// Request message for rpc `WatchWarns`.
type WatchWarnsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchWarnsRequest) Reset()         { *m = WatchWarnsRequest{} }
func (m *WatchWarnsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchWarnsRequest) ProtoMessage()    {}
func (*WatchWarnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{45}
}

func (m *WatchWarnsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchWarnsRequest.Unmarshal(m, b)
}
func (m *WatchWarnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchWarnsRequest.Marshal(b, m, deterministic)
}
func (m *WatchWarnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchWarnsRequest.Merge(m, src)
}
func (m *WatchWarnsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchWarnsRequest.Size(m)
}
func (m *WatchWarnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchWarnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchWarnsRequest proto.InternalMessageInfo

// Request message for rpc `WatchAdminJails`.
type WatchAdminJailsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchAdminJailsRequest) Reset()         { *m = WatchAdminJailsRequest{} }
func (m *WatchAdminJailsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchAdminJailsRequest) ProtoMessage()    {}
func (*WatchAdminJailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{46}
}

func (m *WatchAdminJailsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchAdminJailsRequest.Unmarshal(m, b)
}
func (m *WatchAdminJailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchAdminJailsRequest.Marshal(b, m, deterministic)
}
func (m *WatchAdminJailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchAdminJailsRequest.Merge(m, src)
}
func (m *WatchAdminJailsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchAdminJailsRequest.Size(m)
}
func (m *WatchAdminJailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchAdminJailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchAdminJailsRequest proto.InternalMessageInfo

// Request message for rpc `WatchUnBans`.
type WatchUnBansRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchUnBansRequest) Reset()         { *m = WatchUnBansRequest{} }
func (m *WatchUnBansRequest) String() string { return proto.CompactTextString(m) }
func (*WatchUnBansRequest) ProtoMessage()    {}
func (*WatchUnBansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{47}
}

func (m *WatchUnBansRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchUnBansRequest.Unmarshal(m, b)
}
func (m *WatchUnBansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchUnBansRequest.Marshal(b, m, deterministic)
}
func (m *WatchUnBansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchUnBansRequest.Merge(m, src)
}
func (m *WatchUnBansRequest) XXX_Size() int {
	return xxx_messageInfo_WatchUnBansRequest.Size(m)
}
func (m *WatchUnBansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchUnBansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchUnBansRequest proto.InternalMessageInfo

// Request message for rpc `WatchUnBlocks`.
type WatchUnBlocksRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchUnBlocksRequest) Reset()         { *m = WatchUnBlocksRequest{} }
func (m *WatchUnBlocksRequest) String() string { return proto.CompactTextString(m) }
func (*WatchUnBlocksRequest) ProtoMessage()    {}
func (*WatchUnBlocksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{48}
}

func (m *WatchUnBlocksRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchUnBlocksRequest.Unmarshal(m, b)
}
func (m *WatchUnBlocksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchUnBlocksRequest.Marshal(b, m, deterministic)
}
func (m *WatchUnBlocksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchUnBlocksRequest.Merge(m, src)
}
func (m *WatchUnBlocksRequest) XXX_Size() int {
	return xxx_messageInfo_WatchUnBlocksRequest.Size(m)
}
func (m *WatchUnBlocksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchUnBlocksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchUnBlocksRequest proto.InternalMessageInfo

// Request message for rpc `WatchUnWarns`.
type WatchUnWarnsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchUnWarnsRequest) Reset()         { *m = WatchUnWarnsRequest{} }
func (m *WatchUnWarnsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchUnWarnsRequest) ProtoMessage()    {}
func (*WatchUnWarnsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{49}
}

func (m *WatchUnWarnsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchUnWarnsRequest.Unmarshal(m, b)
}
func (m *WatchUnWarnsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchUnWarnsRequest.Marshal(b, m, deterministic)
}
func (m *WatchUnWarnsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchUnWarnsRequest.Merge(m, src)
}
func (m *WatchUnWarnsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchUnWarnsRequest.Size(m)
}
func (m *WatchUnWarnsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchUnWarnsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchUnWarnsRequest proto.InternalMessageInfo

// Request message for rpc `WatchUnAdminJails`.
type WatchUnAdminJailsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchUnAdminJailsRequest) Reset()         { *m = WatchUnAdminJailsRequest{} }
func (m *WatchUnAdminJailsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchUnAdminJailsRequest) ProtoMessage()    {}
func (*WatchUnAdminJailsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{50}
}

func (m *WatchUnAdminJailsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchUnAdminJailsRequest.Unmarshal(m, b)
}
func (m *WatchUnAdminJailsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchUnAdminJailsRequest.Marshal(b, m, deterministic)
}
func (m *WatchUnAdminJailsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchUnAdminJailsRequest.Merge(m, src)
}
func (m *WatchUnAdminJailsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchUnAdminJailsRequest.Size(m)
}
func (m *WatchUnAdminJailsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchUnAdminJailsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchUnAdminJailsRequest proto.InternalMessageInfo

// Request message for rpc `WatchPlayerAcquittals`.
type WatchPlayerAcquittalsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchPlayerAcquittalsRequest) Reset()         { *m = WatchPlayerAcquittalsRequest{} }
func (m *WatchPlayerAcquittalsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchPlayerAcquittalsRequest) ProtoMessage()    {}
func (*WatchPlayerAcquittalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{51}
}

func (m *WatchPlayerAcquittalsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPlayerAcquittalsRequest.Unmarshal(m, b)
}
func (m *WatchPlayerAcquittalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPlayerAcquittalsRequest.Marshal(b, m, deterministic)
}
func (m *WatchPlayerAcquittalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPlayerAcquittalsRequest.Merge(m, src)
}
func (m *WatchPlayerAcquittalsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchPlayerAcquittalsRequest.Size(m)
}
func (m *WatchPlayerAcquittalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPlayerAcquittalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPlayerAcquittalsRequest proto.InternalMessageInfo

// Response message for rpc `WatchPlayerAcquittals`.
type WatchPlayerAcquittalsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchPlayerAcquittalsResponse) Reset()         { *m = WatchPlayerAcquittalsResponse{} }
func (m *WatchPlayerAcquittalsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchPlayerAcquittalsResponse) ProtoMessage()    {}
func (*WatchPlayerAcquittalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{52}
}

func (m *WatchPlayerAcquittalsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPlayerAcquittalsResponse.Unmarshal(m, b)
}
func (m *WatchPlayerAcquittalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPlayerAcquittalsResponse.Marshal(b, m, deterministic)
}
func (m *WatchPlayerAcquittalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPlayerAcquittalsResponse.Merge(m, src)
}
func (m *WatchPlayerAcquittalsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchPlayerAcquittalsResponse.Size(m)
}
func (m *WatchPlayerAcquittalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPlayerAcquittalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPlayerAcquittalsResponse proto.InternalMessageInfo

// Request message for rpc `WatchPlayerPunishments`.
type WatchPlayerPunishmentsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchPlayerPunishmentsRequest) Reset()         { *m = WatchPlayerPunishmentsRequest{} }
func (m *WatchPlayerPunishmentsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchPlayerPunishmentsRequest) ProtoMessage()    {}
func (*WatchPlayerPunishmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{53}
}

func (m *WatchPlayerPunishmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPlayerPunishmentsRequest.Unmarshal(m, b)
}
func (m *WatchPlayerPunishmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPlayerPunishmentsRequest.Marshal(b, m, deterministic)
}
func (m *WatchPlayerPunishmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPlayerPunishmentsRequest.Merge(m, src)
}
func (m *WatchPlayerPunishmentsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchPlayerPunishmentsRequest.Size(m)
}
func (m *WatchPlayerPunishmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPlayerPunishmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPlayerPunishmentsRequest proto.InternalMessageInfo

// Response message for rpc `WatchPlayerPunishments`.
type WatchPlayerPunishmentsResponse struct {
	Type                 PunishmentType `protobuf:"varint,1,opt,name=type,proto3,enum=mruv.punishments.PunishmentType" json:"type,omitempty"`
	PunishmentId         uint32         `protobuf:"varint,2,opt,name=punishment_id,json=punishmentId,proto3" json:"punishment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WatchPlayerPunishmentsResponse) Reset()         { *m = WatchPlayerPunishmentsResponse{} }
func (m *WatchPlayerPunishmentsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchPlayerPunishmentsResponse) ProtoMessage()    {}
func (*WatchPlayerPunishmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{54}
}

func (m *WatchPlayerPunishmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPlayerPunishmentsResponse.Unmarshal(m, b)
}
func (m *WatchPlayerPunishmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPlayerPunishmentsResponse.Marshal(b, m, deterministic)
}
func (m *WatchPlayerPunishmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPlayerPunishmentsResponse.Merge(m, src)
}
func (m *WatchPlayerPunishmentsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchPlayerPunishmentsResponse.Size(m)
}
func (m *WatchPlayerPunishmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPlayerPunishmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPlayerPunishmentsResponse proto.InternalMessageInfo

func (m *WatchPlayerPunishmentsResponse) GetType() PunishmentType {
	if m != nil {
		return m.Type
	}
	return PunishmentType_UNKNOWN_PUNISHMENT
}

func (m *WatchPlayerPunishmentsResponse) GetPunishmentId() uint32 {
	if m != nil {
		return m.PunishmentId
	}
	return 0
}

// Request message for rpc `WatchPunishments`.
type WatchPunishmentsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WatchPunishmentsRequest) Reset()         { *m = WatchPunishmentsRequest{} }
func (m *WatchPunishmentsRequest) String() string { return proto.CompactTextString(m) }
func (*WatchPunishmentsRequest) ProtoMessage()    {}
func (*WatchPunishmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{55}
}

func (m *WatchPunishmentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPunishmentsRequest.Unmarshal(m, b)
}
func (m *WatchPunishmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPunishmentsRequest.Marshal(b, m, deterministic)
}
func (m *WatchPunishmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPunishmentsRequest.Merge(m, src)
}
func (m *WatchPunishmentsRequest) XXX_Size() int {
	return xxx_messageInfo_WatchPunishmentsRequest.Size(m)
}
func (m *WatchPunishmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPunishmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPunishmentsRequest proto.InternalMessageInfo

// Response message for rpc `WatchPunishments`.
type WatchPunishmentsResponse struct {
	Type                 PunishmentType `protobuf:"varint,1,opt,name=type,proto3,enum=mruv.punishments.PunishmentType" json:"type,omitempty"`
	PunishmentId         uint32         `protobuf:"varint,2,opt,name=punishment_id,json=punishmentId,proto3" json:"punishment_id,omitempty"`
	Player               uint32         `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
	Character            uint32         `protobuf:"varint,4,opt,name=character,proto3" json:"character,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *WatchPunishmentsResponse) Reset()         { *m = WatchPunishmentsResponse{} }
func (m *WatchPunishmentsResponse) String() string { return proto.CompactTextString(m) }
func (*WatchPunishmentsResponse) ProtoMessage()    {}
func (*WatchPunishmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae0d2819db7b861, []int{56}
}

func (m *WatchPunishmentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WatchPunishmentsResponse.Unmarshal(m, b)
}
func (m *WatchPunishmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WatchPunishmentsResponse.Marshal(b, m, deterministic)
}
func (m *WatchPunishmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchPunishmentsResponse.Merge(m, src)
}
func (m *WatchPunishmentsResponse) XXX_Size() int {
	return xxx_messageInfo_WatchPunishmentsResponse.Size(m)
}
func (m *WatchPunishmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchPunishmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchPunishmentsResponse proto.InternalMessageInfo

func (m *WatchPunishmentsResponse) GetType() PunishmentType {
	if m != nil {
		return m.Type
	}
	return PunishmentType_UNKNOWN_PUNISHMENT
}

func (m *WatchPunishmentsResponse) GetPunishmentId() uint32 {
	if m != nil {
		return m.PunishmentId
	}
	return 0
}

func (m *WatchPunishmentsResponse) GetPlayer() uint32 {
	if m != nil {
		return m.Player
	}
	return 0
}

func (m *WatchPunishmentsResponse) GetCharacter() uint32 {
	if m != nil {
		return m.Character
	}
	return 0
}

func init() {
	proto.RegisterEnum("mruv.punishments.PunishmentType", PunishmentType_name, PunishmentType_value)
	proto.RegisterEnum("mruv.punishments.AcquittalsType", AcquittalsType_name, AcquittalsType_value)
	proto.RegisterType((*BanMessage)(nil), "mruv.punishments.BanMessage")
	proto.RegisterType((*WarnMessage)(nil), "mruv.punishments.WarnMessage")
	proto.RegisterType((*BlockMessage)(nil), "mruv.punishments.BlockMessage")
	proto.RegisterType((*AdminJailMessage)(nil), "mruv.punishments.AdminJailMessage")
	proto.RegisterType((*UnBanMessage)(nil), "mruv.punishments.UnBanMessage")
	proto.RegisterType((*UnBlockMessage)(nil), "mruv.punishments.UnBlockMessage")
	proto.RegisterType((*UnWarnMessage)(nil), "mruv.punishments.UnWarnMessage")
	proto.RegisterType((*UnAdminJailMessage)(nil), "mruv.punishments.UnAdminJailMessage")
	proto.RegisterType((*BanRequest)(nil), "mruv.punishments.BanRequest")
	proto.RegisterType((*BanResponse)(nil), "mruv.punishments.BanResponse")
	proto.RegisterType((*BlockRequest)(nil), "mruv.punishments.BlockRequest")
	proto.RegisterType((*BlockResponse)(nil), "mruv.punishments.BlockResponse")
	proto.RegisterType((*WarnRequest)(nil), "mruv.punishments.WarnRequest")
	proto.RegisterType((*WarnResponse)(nil), "mruv.punishments.WarnResponse")
	proto.RegisterType((*AdminJailRequest)(nil), "mruv.punishments.AdminJailRequest")
	proto.RegisterType((*AdminJailResponse)(nil), "mruv.punishments.AdminJailResponse")
	proto.RegisterType((*MuteGlobalChatsRequest)(nil), "mruv.punishments.MuteGlobalChatsRequest")
	proto.RegisterType((*MuteGlobalChatsResponse)(nil), "mruv.punishments.MuteGlobalChatsResponse")
	proto.RegisterType((*UnBanRequest)(nil), "mruv.punishments.UnBanRequest")
	proto.RegisterType((*UnBanResponse)(nil), "mruv.punishments.UnBanResponse")
	proto.RegisterType((*UnBlockRequest)(nil), "mruv.punishments.UnBlockRequest")
	proto.RegisterType((*UnBlockResponse)(nil), "mruv.punishments.UnBlockResponse")
	proto.RegisterType((*UnWarnRequest)(nil), "mruv.punishments.UnWarnRequest")
	proto.RegisterType((*UnWarnResponse)(nil), "mruv.punishments.UnWarnResponse")
	proto.RegisterType((*UnAdminJailRequest)(nil), "mruv.punishments.UnAdminJailRequest")
	proto.RegisterType((*UnAdminJailResponse)(nil), "mruv.punishments.UnAdminJailResponse")
	proto.RegisterType((*UnMuteGlobalChatsRequest)(nil), "mruv.punishments.UnMuteGlobalChatsRequest")
	proto.RegisterType((*UnMuteGlobalChatsResponse)(nil), "mruv.punishments.UnMuteGlobalChatsResponse")
	proto.RegisterType((*GetPlayerBansRequest)(nil), "mruv.punishments.GetPlayerBansRequest")
	proto.RegisterType((*GetPlayerBansResponse)(nil), "mruv.punishments.GetPlayerBansResponse")
	proto.RegisterType((*GetPlayerWarnsRequest)(nil), "mruv.punishments.GetPlayerWarnsRequest")
	proto.RegisterType((*GetPlayerWarnsResponse)(nil), "mruv.punishments.GetPlayerWarnsResponse")
	proto.RegisterType((*GetPlayerAdminJailRequest)(nil), "mruv.punishments.GetPlayerAdminJailRequest")
	proto.RegisterType((*GetPlayerAdminJailResponse)(nil), "mruv.punishments.GetPlayerAdminJailResponse")
	proto.RegisterType((*GetBanRequest)(nil), "mruv.punishments.GetBanRequest")
	proto.RegisterType((*GetWarnRequest)(nil), "mruv.punishments.GetWarnRequest")
	proto.RegisterType((*GetBlockRequest)(nil), "mruv.punishments.GetBlockRequest")
	proto.RegisterType((*IsPlayerBannedRequest)(nil), "mruv.punishments.IsPlayerBannedRequest")
	proto.RegisterType((*IsPlayerBannedResponse)(nil), "mruv.punishments.IsPlayerBannedResponse")
	proto.RegisterType((*IsCharacterBlockedRequest)(nil), "mruv.punishments.IsCharacterBlockedRequest")
	proto.RegisterType((*IsCharacterBlockedResponse)(nil), "mruv.punishments.IsCharacterBlockedResponse")
	proto.RegisterType((*IsCharacterJailedRequest)(nil), "mruv.punishments.IsCharacterJailedRequest")
	proto.RegisterType((*IsCharacterJailedResponse)(nil), "mruv.punishments.IsCharacterJailedResponse")
	proto.RegisterType((*WatchBansRequest)(nil), "mruv.punishments.WatchBansRequest")
	proto.RegisterType((*WatchBlocksRequest)(nil), "mruv.punishments.WatchBlocksRequest")
	proto.RegisterType((*WatchWarnsRequest)(nil), "mruv.punishments.WatchWarnsRequest")
	proto.RegisterType((*WatchAdminJailsRequest)(nil), "mruv.punishments.WatchAdminJailsRequest")
	proto.RegisterType((*WatchUnBansRequest)(nil), "mruv.punishments.WatchUnBansRequest")
	proto.RegisterType((*WatchUnBlocksRequest)(nil), "mruv.punishments.WatchUnBlocksRequest")
	proto.RegisterType((*WatchUnWarnsRequest)(nil), "mruv.punishments.WatchUnWarnsRequest")
	proto.RegisterType((*WatchUnAdminJailsRequest)(nil), "mruv.punishments.WatchUnAdminJailsRequest")
	proto.RegisterType((*WatchPlayerAcquittalsRequest)(nil), "mruv.punishments.WatchPlayerAcquittalsRequest")
	proto.RegisterType((*WatchPlayerAcquittalsResponse)(nil), "mruv.punishments.WatchPlayerAcquittalsResponse")
	proto.RegisterType((*WatchPlayerPunishmentsRequest)(nil), "mruv.punishments.WatchPlayerPunishmentsRequest")
	proto.RegisterType((*WatchPlayerPunishmentsResponse)(nil), "mruv.punishments.WatchPlayerPunishmentsResponse")
	proto.RegisterType((*WatchPunishmentsRequest)(nil), "mruv.punishments.WatchPunishmentsRequest")
	proto.RegisterType((*WatchPunishmentsResponse)(nil), "mruv.punishments.WatchPunishmentsResponse")
}

func init() { proto.RegisterFile("punishments/punishments.proto", fileDescriptor_5ae0d2819db7b861) }

var fileDescriptor_5ae0d2819db7b861 = []byte{
	// 1950 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xdd, 0x4e, 0x23, 0xc9,
	0x15, 0x9e, 0xf6, 0xbf, 0x8f, 0xc1, 0x98, 0x1a, 0xf0, 0x98, 0x06, 0x83, 0x29, 0x66, 0x76, 0xc0,
	0x64, 0x30, 0x61, 0xf7, 0x22, 0x7b, 0x91, 0x1f, 0x60, 0x23, 0xe2, 0xd9, 0xc1, 0xcb, 0x78, 0xf1,
	0x22, 0x8d, 0xb4, 0x42, 0x65, 0xbb, 0x05, 0x4d, 0xec, 0xb6, 0xc7, 0xdd, 0x26, 0x41, 0x2c, 0x8a,
	0xb4, 0x52, 0x94, 0x8b, 0x48, 0xc9, 0xc5, 0xae, 0x94, 0x9b, 0xbc, 0x41, 0xf2, 0x06, 0x79, 0x8c,
	0xbc, 0x42, 0x5e, 0x20, 0x6f, 0xb0, 0xea, 0xea, 0xea, 0xee, 0xea, 0xee, 0x2a, 0xdb, 0x68, 0x56,
	0x7b, 0xe7, 0xaa, 0x3e, 0xf5, 0x7d, 0xa7, 0xce, 0x5f, 0x9d, 0x03, 0x50, 0x1e, 0x8e, 0x0d, 0xdd,
	0xbc, 0xee, 0x6b, 0x86, 0x65, 0xd6, 0xb8, 0xdf, 0x7b, 0xc3, 0xd1, 0xc0, 0x1a, 0xa0, 0x42, 0x7f,
	0x34, 0xbe, 0xdd, 0xe3, 0xf6, 0xd5, 0xb5, 0xab, 0xc1, 0xe0, 0xaa, 0xa7, 0xd5, 0xc8, 0x50, 0xaf,
	0x11, 0xc3, 0x18, 0x58, 0xc4, 0xd2, 0x07, 0x06, 0x93, 0xc7, 0xff, 0x8c, 0x01, 0x1c, 0x11, 0xe3,
	0x54, 0x33, 0x4d, 0x72, 0xa5, 0xa1, 0x22, 0xa4, 0x86, 0x3d, 0x72, 0xa7, 0x8d, 0x4a, 0x4a, 0x45,
	0xd9, 0x9e, 0x6f, 0xb2, 0x15, 0x5a, 0x83, 0x6c, 0xe7, 0x9a, 0x8c, 0x48, 0xc7, 0xd2, 0x46, 0xa5,
	0x18, 0xfd, 0xe4, 0x6f, 0xa0, 0x3c, 0xc4, 0xf4, 0x61, 0x29, 0x5e, 0x51, 0xb6, 0xb3, 0xcd, 0x98,
	0x3e, 0x44, 0x2f, 0x61, 0x41, 0xfb, 0xe3, 0x50, 0x1f, 0x51, 0xa6, 0xcb, 0x2e, 0xb1, 0xb4, 0x52,
	0xa2, 0xa2, 0x6c, 0xc7, 0x9b, 0x79, 0x7f, 0xfb, 0x33, 0x62, 0x51, 0xba, 0x91, 0x46, 0xcc, 0x81,
	0x51, 0x4a, 0xd2, 0xc3, 0x6c, 0x85, 0x96, 0x20, 0x49, 0xba, 0x7d, 0xdd, 0x28, 0xa5, 0x28, 0x95,
	0xb3, 0x40, 0x2b, 0x90, 0x69, 0x13, 0x86, 0x97, 0xa6, 0x78, 0xe9, 0x36, 0xf1, 0x80, 0x48, 0xc7,
	0xd2, 0x6f, 0xb5, 0x52, 0xa6, 0xa2, 0x6c, 0x67, 0x9a, 0x6c, 0x85, 0xca, 0x00, 0x63, 0xc3, 0x3b,
	0x94, 0xa5, 0x87, 0xb2, 0x74, 0x87, 0x1e, 0xdb, 0x80, 0x9c, 0xf3, 0xd9, 0x61, 0x03, 0xca, 0xe6,
	0x9c, 0x38, 0xb4, 0x77, 0xf0, 0x77, 0x31, 0xc8, 0x5d, 0x90, 0xd1, 0x07, 0xda, 0x47, 0x60, 0x8f,
	0xf8, 0x14, 0x7b, 0x24, 0xc4, 0xf6, 0x48, 0xf2, 0xf6, 0x58, 0x85, 0xec, 0x1f, 0xc8, 0x88, 0x01,
	0xa6, 0x28, 0x60, 0xc6, 0xde, 0x08, 0x59, 0x24, 0x1d, 0xb0, 0x08, 0xbd, 0xb2, 0x7f, 0x2c, 0x43,
	0x8f, 0x81, 0xb3, 0x45, 0x0f, 0x6e, 0xc2, 0x1c, 0x13, 0x70, 0x28, 0xb3, 0x94, 0x92, 0x1d, 0x72,
	0xac, 0xf2, 0x7f, 0x05, 0xe6, 0x8e, 0x7a, 0x83, 0xce, 0xef, 0x3f, 0xcc, 0x2c, 0xfe, 0x6d, 0xe3,
	0xe2, 0xdb, 0x26, 0xf8, 0xdb, 0x96, 0x01, 0xda, 0x36, 0xa7, 0xa3, 0x77, 0xd2, 0x71, 0x25, 0xdd,
	0x09, 0xdd, 0x37, 0x15, 0xb8, 0x2f, 0xbd, 0x0e, 0x77, 0xd0, 0x09, 0x9c, 0x1c, 0xdb, 0xa3, 0x47,
	0xb7, 0x60, 0xde, 0x15, 0x71, 0x78, 0x33, 0x94, 0xd7, 0x3d, 0xe7, 0xdc, 0xf9, 0xdf, 0x0a, 0x14,
	0xe8, 0xaf, 0xd7, 0x44, 0xef, 0xfd, 0x94, 0xf7, 0x7e, 0x06, 0x69, 0x72, 0xc3, 0x5f, 0x3a, 0x45,
	0x6e, 0xa8, 0xda, 0xab, 0x90, 0xbd, 0x21, 0x7a, 0xef, 0xd2, 0xd2, 0xfb, 0x1a, 0x4b, 0x94, 0x8c,
	0xbd, 0x71, 0xae, 0xf7, 0x35, 0xfc, 0x4b, 0x98, 0x6b, 0x19, 0x33, 0x24, 0xf6, 0x32, 0xa4, 0xec,
	0xf8, 0xd7, 0xbb, 0x4c, 0xcd, 0x64, 0x9b, 0x18, 0xf5, 0x2e, 0x3e, 0x86, 0x7c, 0xcb, 0x98, 0xc9,
	0xc5, 0x76, 0x52, 0x52, 0xd3, 0x79, 0x10, 0x69, 0xba, 0xae, 0x77, 0xf1, 0x6f, 0x60, 0xbe, 0x65,
	0xcc, 0x92, 0x3d, 0xcf, 0x20, 0x4d, 0x03, 0xce, 0x83, 0x48, 0xd9, 0xcb, 0x7a, 0x17, 0xbf, 0x06,
	0xd4, 0x32, 0x7e, 0x1c, 0xab, 0xe3, 0xef, 0x15, 0x5a, 0xe9, 0x9a, 0xda, 0xfb, 0xb1, 0x66, 0x5a,
	0x3f, 0x52, 0xa5, 0x43, 0x90, 0xa0, 0xe6, 0x77, 0x3c, 0x46, 0x7f, 0x3f, 0xae, 0xa8, 0xe1, 0xe7,
	0x90, 0xa3, 0x5a, 0x99, 0xc3, 0x81, 0x61, 0x6a, 0x9c, 0x3f, 0x14, 0xde, 0x1f, 0xef, 0x58, 0xc2,
	0xb9, 0xda, 0x07, 0xb4, 0x54, 0xe4, 0x01, 0x16, 0x13, 0x6b, 0x10, 0xe7, 0x35, 0xa8, 0xc2, 0x3c,
	0xc3, 0x66, 0x3a, 0xf0, 0x2e, 0x55, 0x82, 0x2e, 0xfd, 0xb3, 0xe2, 0xd4, 0xc3, 0x0f, 0xb3, 0xa2,
	0x6b, 0xb5, 0xb8, 0xd0, 0x6a, 0x33, 0x94, 0x3e, 0xfc, 0x12, 0xe6, 0x1c, 0x35, 0x98, 0xca, 0x5c,
	0x04, 0x29, 0x81, 0x08, 0x1a, 0x71, 0x59, 0x3b, 0x9b, 0xf1, 0x5c, 0xe5, 0x62, 0x42, 0xe5, 0x66,
	0xc8, 0x58, 0xfc, 0x14, 0x16, 0x39, 0x4e, 0x47, 0x43, 0x7c, 0x00, 0xc5, 0xd3, 0xb1, 0xa5, 0x9d,
	0xf4, 0x06, 0x6d, 0xd2, 0x3b, 0xbe, 0x26, 0x96, 0xe9, 0xaa, 0x53, 0x82, 0x34, 0xe9, 0x74, 0x06,
	0x63, 0xc3, 0x72, 0xad, 0xcd, 0x96, 0x78, 0x05, 0x9e, 0x45, 0xce, 0x30, 0x38, 0x37, 0xbf, 0x5d,
	0x10, 0x71, 0xdc, 0xc8, 0x22, 0x01, 0x2f, 0xd8, 0xa9, 0xc9, 0xc5, 0x1d, 0x97, 0xf0, 0x2e, 0xa2,
	0x3c, 0x0a, 0xa4, 0xa8, 0x8b, 0xb0, 0xe0, 0x81, 0x30, 0x5c, 0xaf, 0x06, 0xb8, 0xb0, 0x32, 0x4f,
	0x49, 0x41, 0x0b, 0xb6, 0x66, 0xbc, 0xb3, 0xf1, 0x41, 0xa0, 0x2a, 0xcc, 0xe4, 0x55, 0xbc, 0x0c,
	0x4f, 0x03, 0x67, 0x18, 0xd4, 0x27, 0x50, 0x6a, 0x19, 0x8f, 0xf6, 0xcb, 0x2a, 0xac, 0x08, 0x4e,
	0x31, 0xc8, 0x5f, 0xc1, 0xd2, 0x89, 0x66, 0x9d, 0xd1, 0x3c, 0x38, 0x22, 0x86, 0x39, 0x2d, 0x55,
	0x9c, 0x92, 0x12, 0x73, 0x4b, 0x0a, 0xae, 0xc3, 0x72, 0xe8, 0x3c, 0x8b, 0xf1, 0x7d, 0x48, 0xb4,
	0x89, 0x61, 0x96, 0x94, 0x4a, 0x7c, 0x3b, 0x77, 0xb0, 0xb6, 0x17, 0xee, 0xf4, 0xf6, 0xfc, 0x72,
	0xdf, 0xa4, 0x92, 0xb8, 0xc6, 0x41, 0xd9, 0x16, 0x9c, 0xa6, 0x0b, 0x3e, 0x85, 0x62, 0xf8, 0x00,
	0x23, 0xff, 0x18, 0x92, 0xb6, 0x9f, 0x5c, 0xf6, 0x72, 0x94, 0x9d, 0x2b, 0xf4, 0x4d, 0x47, 0x16,
	0x7f, 0x0a, 0x2b, 0x1e, 0xdc, 0x23, 0xfd, 0x75, 0x0f, 0xaa, 0xe8, 0x28, 0xd3, 0x26, 0xf0, 0xf4,
	0x29, 0xc1, 0xa7, 0xef, 0x71, 0xd5, 0xcf, 0x4e, 0x77, 0xae, 0x41, 0xa5, 0xbf, 0xf1, 0x06, 0xcc,
	0x9f, 0x68, 0x16, 0x97, 0x5d, 0xb6, 0x8f, 0xdc, 0x78, 0x8d, 0xe9, 0x5d, 0x5c, 0x81, 0xfc, 0x89,
	0x66, 0xf1, 0x61, 0x1d, 0x96, 0xd8, 0x84, 0x05, 0x1b, 0x82, 0x4f, 0xa8, 0xb0, 0xc8, 0xaf, 0x61,
	0xb9, 0x6e, 0x7a, 0x7e, 0x36, 0xb4, 0xee, 0x63, 0x23, 0xe5, 0x04, 0x8a, 0x61, 0x00, 0x66, 0x9f,
	0x22, 0xad, 0x06, 0x86, 0xe6, 0xd0, 0x65, 0x9a, 0x6c, 0x25, 0x7b, 0xed, 0x3f, 0x85, 0x95, 0xba,
	0x79, 0xec, 0xda, 0x9e, 0x2a, 0xed, 0x6b, 0x33, 0xd9, 0x4f, 0x6f, 0x41, 0x15, 0x1d, 0x65, 0x7a,
	0x94, 0xc0, 0xa9, 0x19, 0x9e, 0x22, 0xee, 0x72, 0x52, 0xdb, 0xf0, 0x0b, 0x28, 0x71, 0x90, 0xb6,
	0xdf, 0x67, 0x55, 0xe6, 0x2c, 0x70, 0x0f, 0xf7, 0xa4, 0x6f, 0x93, 0x1b, 0xba, 0xe3, 0xda, 0xc4,
	0x59, 0x05, 0x63, 0x29, 0x16, 0x6a, 0xa3, 0x10, 0x14, 0x2e, 0x88, 0xd5, 0xb9, 0xe6, 0x12, 0x19,
	0x2f, 0x01, 0x72, 0xf6, 0x6c, 0x7d, 0xbd, 0xdd, 0xa7, 0xb0, 0x48, 0x77, 0xf9, 0x3c, 0xc3, 0x25,
	0x28, 0xd2, 0x4d, 0x2f, 0x82, 0x23, 0x20, 0xb4, 0x0a, 0x7b, 0xbb, 0x45, 0x58, 0x72, 0x77, 0x03,
	0xe0, 0xcb, 0xf0, 0x94, 0xed, 0x07, 0xe0, 0x55, 0x28, 0xb1, 0xed, 0x28, 0xc1, 0x3a, 0xac, 0xd1,
	0x6f, 0x2c, 0x85, 0x3a, 0xef, 0xc7, 0xba, 0x65, 0x11, 0xff, 0xfb, 0x06, 0x94, 0x25, 0xdf, 0x59,
	0x1d, 0x0b, 0x0a, 0x9c, 0xf9, 0x99, 0xee, 0x22, 0xdc, 0xc3, 0xba, 0x4c, 0x80, 0x99, 0xfc, 0x13,
	0x48, 0x58, 0x77, 0x43, 0x27, 0x43, 0xf3, 0x07, 0x95, 0x68, 0xcd, 0xf0, 0x0f, 0x9d, 0xdf, 0x0d,
	0xb5, 0x26, 0x95, 0xb6, 0xdb, 0x71, 0x5f, 0xc6, 0x8f, 0x8f, 0x39, 0x7f, 0xb3, 0xde, 0xb5, 0x9f,
	0x46, 0x87, 0x3c, 0xaa, 0xd7, 0xbf, 0x14, 0x66, 0x96, 0x9f, 0x56, 0x25, 0x2e, 0x6d, 0xe3, 0xf2,
	0x5e, 0x28, 0x11, 0x8a, 0xd9, 0xea, 0x57, 0x90, 0x0f, 0x52, 0xa2, 0x22, 0xa0, 0x56, 0xe3, 0xf3,
	0xc6, 0x17, 0x17, 0x8d, 0xcb, 0xb3, 0x56, 0xa3, 0xfe, 0xe5, 0xef, 0x4e, 0x7f, 0xdb, 0x38, 0x2f,
	0x3c, 0x41, 0x69, 0x88, 0x1f, 0x1d, 0x36, 0x0a, 0x0a, 0xca, 0x42, 0xf2, 0xe8, 0xcd, 0x17, 0xc7,
	0x9f, 0x17, 0x62, 0x28, 0x03, 0x89, 0x8b, 0xc3, 0x66, 0xa3, 0x10, 0x47, 0x79, 0x80, 0xc3, 0xcf,
	0x4e, 0xeb, 0x8d, 0xcb, 0xd7, 0x87, 0xf5, 0x37, 0x85, 0x44, 0xf5, 0x6b, 0xc8, 0xfb, 0x4e, 0xa5,
	0xb8, 0x4b, 0x50, 0x70, 0x71, 0x0f, 0x8f, 0xdf, 0xb6, 0xea, 0xe7, 0x87, 0x6f, 0x0a, 0x4f, 0x6c,
	0xb0, 0x56, 0xc3, 0xc1, 0xcd, 0x41, 0xba, 0xd5, 0x70, 0x91, 0x01, 0x52, 0xad, 0x06, 0xc3, 0x5e,
	0x84, 0xf9, 0x56, 0xe3, 0x92, 0x87, 0x3f, 0xf8, 0xcf, 0x2a, 0x14, 0x4f, 0x47, 0xe3, 0xaf, 0x38,
	0x1b, 0x7f, 0xa9, 0x8d, 0x6e, 0xf5, 0x8e, 0x86, 0xae, 0x21, 0x7e, 0x44, 0x0c, 0x24, 0x7e, 0xa0,
	0x98, 0x93, 0xd4, 0xb2, 0xe4, 0x2b, 0x0b, 0xbe, 0xe7, 0xdf, 0xfe, 0xf7, 0x7f, 0xdf, 0xc5, 0xd6,
	0xf1, 0x5a, 0xed, 0xf6, 0xe7, 0xfc, 0x5f, 0x39, 0x6a, 0x6d, 0x62, 0xd4, 0xee, 0x1d, 0xc3, 0x3e,
	0x20, 0x13, 0x92, 0x34, 0x4f, 0xd0, 0xba, 0x00, 0x8d, 0x2b, 0xbd, 0xea, 0x86, 0xf4, 0x3b, 0xe3,
	0xdb, 0xa1, 0x7c, 0x5b, 0x78, 0x33, 0xc2, 0x67, 0x8b, 0xd5, 0xee, 0x3d, 0x7f, 0x3d, 0xa0, 0x1e,
	0x24, 0xec, 0x24, 0x44, 0x92, 0x27, 0xd0, 0xa5, 0x5c, 0x97, 0x7d, 0x66, 0x8c, 0x2f, 0x28, 0xe3,
	0x06, 0x2e, 0x87, 0x19, 0xed, 0xa7, 0xd3, 0xbf, 0xe2, 0x37, 0x90, 0xf5, 0x72, 0x1b, 0xe1, 0x28,
	0x66, 0xf8, 0x59, 0x55, 0xb7, 0x26, 0xca, 0x30, 0xf2, 0x8f, 0x28, 0x79, 0x05, 0xaf, 0x87, 0xc9,
	0xc9, 0x4d, 0xe0, 0xae, 0x7f, 0x53, 0x60, 0x21, 0xd4, 0xe7, 0xa0, 0xed, 0x28, 0x81, 0xb8, 0x81,
	0x52, 0x77, 0x66, 0x90, 0x9c, 0xa6, 0x50, 0x7f, 0x6c, 0x69, 0xb5, 0x7b, 0xd6, 0x78, 0x3d, 0x20,
	0x03, 0x92, 0xb4, 0x62, 0x8a, 0x3c, 0xce, 0xf7, 0xc3, 0x22, 0x8f, 0x07, 0x1b, 0x5e, 0x16, 0x61,
	0x55, 0x71, 0x84, 0x39, 0xaf, 0xe4, 0x03, 0xba, 0x83, 0x34, 0xab, 0xc5, 0xa8, 0x22, 0x44, 0xe4,
	0xa3, 0x6c, 0x73, 0x82, 0x44, 0x30, 0xce, 0xaa, 0xe2, 0x38, 0x33, 0x6b, 0xf7, 0xee, 0xa3, 0x68,
	0x07, 0x77, 0xca, 0x29, 0xf7, 0x48, 0x78, 0x17, 0x3e, 0xd6, 0x2a, 0x72, 0x81, 0xa0, 0x7d, 0xab,
	0xeb, 0xe2, 0x68, 0x63, 0x1d, 0xf9, 0x03, 0xfa, 0x56, 0x81, 0x1c, 0xf7, 0x9a, 0xa0, 0xe7, 0x22,
	0xe4, 0x48, 0xcc, 0xbd, 0x98, 0x22, 0x35, 0x4d, 0x89, 0x50, 0xd4, 0x7d, 0xaf, 0xc0, 0x62, 0xa4,
	0xbf, 0x46, 0x55, 0x11, 0x89, 0x24, 0xf2, 0x76, 0x67, 0x92, 0x9d, 0xa6, 0x56, 0x28, 0xf6, 0xfe,
	0xa2, 0xd0, 0xb6, 0xd0, 0xef, 0xcc, 0xd1, 0x47, 0x51, 0x1a, 0x51, 0xeb, 0xaf, 0xbe, 0x9c, 0x2a,
	0x17, 0x2c, 0x0a, 0xa8, 0x2c, 0x08, 0x4a, 0xd3, 0x2f, 0x0a, 0x7f, 0x55, 0x68, 0xff, 0xc9, 0xf5,
	0xe9, 0x68, 0x12, 0x05, 0xdf, 0x33, 0xa8, 0xdb, 0xd3, 0x05, 0x83, 0x76, 0x41, 0xc2, 0x98, 0xe1,
	0xb4, 0xf9, 0x87, 0x02, 0x28, 0xda, 0xab, 0xa3, 0xdd, 0x09, 0x44, 0x91, 0x08, 0xfa, 0xd9, 0x6c,
	0xc2, 0xd3, 0x34, 0x0b, 0x05, 0xd2, 0x0d, 0xa4, 0x9c, 0x3e, 0x5e, 0x94, 0x42, 0x81, 0x0e, 0x5f,
	0x9d, 0x38, 0x4e, 0xe1, 0x4d, 0x4a, 0xb8, 0x8a, 0x56, 0xc4, 0x7e, 0xb1, 0x33, 0xc7, 0x80, 0x34,
	0x1b, 0x09, 0x44, 0x95, 0x22, 0x38, 0x2d, 0xa8, 0x93, 0xc7, 0x27, 0x8c, 0x29, 0xdd, 0x1a, 0x52,
	0x25, 0x96, 0xb7, 0xf9, 0x46, 0x90, 0x71, 0x07, 0x0c, 0xb4, 0x29, 0xbe, 0x1d, 0x5f, 0x9b, 0x64,
	0x2f, 0xa4, 0x4b, 0xb9, 0x45, 0x29, 0xcb, 0x68, 0x55, 0x56, 0x98, 0x6c, 0xce, 0xbf, 0x2b, 0x90,
	0x0f, 0x4e, 0x1c, 0xa2, 0xb8, 0x13, 0x0e, 0x35, 0xa2, 0xb8, 0x13, 0x0f, 0x2f, 0xb8, 0x4a, 0x55,
	0x79, 0x8e, 0xf0, 0xc4, 0x24, 0xa8, 0xdd, 0xeb, 0xc3, 0x07, 0xf4, 0x1e, 0x50, 0x74, 0xfc, 0x10,
	0x85, 0x9e, 0x74, 0xbe, 0x11, 0x85, 0x9e, 0x7c, 0xa2, 0xc1, 0x4f, 0x90, 0x01, 0x8b, 0x91, 0x21,
	0x43, 0x54, 0x9c, 0x64, 0x33, 0x8c, 0xba, 0x3b, 0x93, 0xac, 0xc7, 0xf7, 0x16, 0xb2, 0xde, 0x08,
	0x22, 0xea, 0x00, 0xc2, 0xf3, 0xc9, 0x94, 0x50, 0x7e, 0xb2, 0xaf, 0xa0, 0x0b, 0xc8, 0x71, 0x13,
	0x8c, 0xa8, 0xc8, 0x47, 0x07, 0x9c, 0xa9, 0x11, 0x64, 0x03, 0x9f, 0x03, 0xf8, 0x43, 0x10, 0xda,
	0x92, 0xe0, 0x06, 0xea, 0xd1, 0x94, 0x54, 0xb0, 0x51, 0x3b, 0xb0, 0x10, 0x9a, 0xa2, 0x44, 0x4d,
	0x88, 0x78, 0xd0, 0x52, 0x27, 0xf5, 0x4c, 0x22, 0x9b, 0x38, 0x03, 0x99, 0xd4, 0x26, 0x81, 0x79,
	0x4d, 0x95, 0x75, 0x21, 0x3c, 0xf0, 0xd7, 0x30, 0x1f, 0x98, 0xe9, 0x44, 0xaf, 0x86, 0x68, 0xe8,
	0x53, 0xe5, 0x0d, 0x07, 0x0f, 0xff, 0x0e, 0xe6, 0xf8, 0xd1, 0x10, 0xbd, 0x90, 0xa2, 0x07, 0xcc,
	0x2e, 0xed, 0x29, 0x78, 0x6c, 0x9d, 0xcd, 0xb4, 0xfc, 0x7c, 0x29, 0x0a, 0x75, 0xd9, 0x10, 0xaa,
	0x4e, 0x6e, 0x1f, 0x78, 0xaa, 0x3f, 0xb1, 0x49, 0x39, 0x32, 0x4c, 0xa2, 0x9a, 0x84, 0x4f, 0x36,
	0x97, 0xaa, 0xfb, 0xb3, 0x1f, 0x70, 0x93, 0x6c, 0x5f, 0x41, 0xdf, 0xc0, 0xb2, 0x70, 0x1e, 0x46,
	0x7b, 0x13, 0xe1, 0x22, 0x83, 0xb5, 0x5a, 0x9b, 0x59, 0x9e, 0x63, 0xef, 0xb3, 0xbf, 0x33, 0xf0,
	0x17, 0xdf, 0x91, 0x01, 0x45, 0xaf, 0x5c, 0x9d, 0x45, 0xd4, 0xa7, 0x3b, 0xda, 0x7d, 0xb7, 0x73,
	0xa5, 0x5b, 0xd7, 0xe3, 0xf6, 0x5e, 0x67, 0xd0, 0xaf, 0xd9, 0x73, 0xdc, 0xab, 0xe6, 0x59, 0xcd,
	0xc6, 0x78, 0x35, 0x6c, 0xbf, 0xba, 0x1a, 0xf0, 0x65, 0xb7, 0x9d, 0xa2, 0xff, 0x29, 0xfe, 0xf8,
	0x87, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xde, 0x4c, 0xab, 0x7a, 0x1e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MruVPunishmentsServiceClient is the client API for MruVPunishmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVPunishmentsServiceClient interface {
	// Ban player on account and/or ip.
	// If ban_time is 0, ban will never expire.
	Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error)
	// Block player character.
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Warn player.
	// If warn_time is 0, warn will never expire.
	Warn(ctx context.Context, in *WarnRequest, opts ...grpc.CallOption) (*WarnResponse, error)
	// Put player in an admin jail.
	AdminJail(ctx context.Context, in *AdminJailRequest, opts ...grpc.CallOption) (*AdminJailResponse, error)
	// Mute player global chats.
	MuteGlobalChats(ctx context.Context, in *MuteGlobalChatsRequest, opts ...grpc.CallOption) (*MuteGlobalChatsResponse, error)
	// Deactivate a specific player ban.
	UnBan(ctx context.Context, in *UnBanRequest, opts ...grpc.CallOption) (*UnBanResponse, error)
	// Deactivate a character block.
	UnBlock(ctx context.Context, in *UnBlockRequest, opts ...grpc.CallOption) (*UnBlockResponse, error)
	// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
	UnWarn(ctx context.Context, in *UnWarnRequest, opts ...grpc.CallOption) (*UnWarnResponse, error)
	// Remove player from admin jail.
	UnAdminJail(ctx context.Context, in *UnAdminJailRequest, opts ...grpc.CallOption) (*UnAdminJailResponse, error)
	//
	UnMuteGlobalChats(ctx context.Context, in *UnMuteGlobalChatsRequest, opts ...grpc.CallOption) (*UnMuteGlobalChatsResponse, error)
	// Get all player bans.
	GetPlayerBans(ctx context.Context, in *GetPlayerBansRequest, opts ...grpc.CallOption) (*GetPlayerBansResponse, error)
	// Get all player warns.
	GetPlayerWarns(ctx context.Context, in *GetPlayerWarnsRequest, opts ...grpc.CallOption) (*GetPlayerWarnsResponse, error)
	// Get player admin jail time.
	GetPlayerAdminJail(ctx context.Context, in *GetPlayerAdminJailRequest, opts ...grpc.CallOption) (*GetPlayerAdminJailResponse, error)
	// Get ban info.
	GetBan(ctx context.Context, in *GetBanRequest, opts ...grpc.CallOption) (*BanMessage, error)
	// Get warn info.
	GetWarn(ctx context.Context, in *GetWarnRequest, opts ...grpc.CallOption) (*WarnMessage, error)
	// Get block info.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockMessage, error)
	// Check is player or ip banned.
	IsPlayerBanned(ctx context.Context, in *IsPlayerBannedRequest, opts ...grpc.CallOption) (*IsPlayerBannedResponse, error)
	// Check is character is blocked.
	IsCharacterBlocked(ctx context.Context, in *IsCharacterBlockedRequest, opts ...grpc.CallOption) (*IsCharacterBlockedResponse, error)
	//
	IsCharacterJailed(ctx context.Context, in *IsCharacterJailedRequest, opts ...grpc.CallOption) (*IsCharacterJailedResponse, error)
	// Subscribe to ban events.
	WatchBans(ctx context.Context, in *WatchBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBansClient, error)
	// Subscribe to block events.
	WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBlocksClient, error)
	// Subscribe to warn events.
	WatchWarns(ctx context.Context, in *WatchWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchWarnsClient, error)
	// Subscribe to admin jail events.
	WatchAdminJails(ctx context.Context, in *WatchAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchAdminJailsClient, error)
	// Subscribe to unban events.
	WatchUnBans(ctx context.Context, in *WatchUnBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBansClient, error)
	// Subscribe to unblock events.
	WatchUnBlocks(ctx context.Context, in *WatchUnBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBlocksClient, error)
	// Subscribe to unwarn events.
	WatchUnWarns(ctx context.Context, in *WatchUnWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnWarnsClient, error)
	// Subscribe to admin jail release events.
	WatchUnAdminJails(ctx context.Context, in *WatchUnAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnAdminJailsClient, error)
	// Subscribe to player punishments.
	WatchPlayerPunishments(ctx context.Context, in *WatchPlayerPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerPunishmentsClient, error)
	// Subscribe to player acquittals.
	WatchPlayerAcquittals(ctx context.Context, in *WatchPlayerAcquittalsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerAcquittalsClient, error)
	// Subscribe to all punishments and acquittals events.
	WatchPunishments(ctx context.Context, in *WatchPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPunishmentsClient, error)
}

type mruVPunishmentsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMruVPunishmentsServiceClient(cc *grpc.ClientConn) MruVPunishmentsServiceClient {
	return &mruVPunishmentsServiceClient{cc}
}

func (c *mruVPunishmentsServiceClient) Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error) {
	out := new(BanResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) Warn(ctx context.Context, in *WarnRequest, opts ...grpc.CallOption) (*WarnResponse, error) {
	out := new(WarnResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Warn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) AdminJail(ctx context.Context, in *AdminJailRequest, opts ...grpc.CallOption) (*AdminJailResponse, error) {
	out := new(AdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/AdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) MuteGlobalChats(ctx context.Context, in *MuteGlobalChatsRequest, opts ...grpc.CallOption) (*MuteGlobalChatsResponse, error) {
	out := new(MuteGlobalChatsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/MuteGlobalChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnBan(ctx context.Context, in *UnBanRequest, opts ...grpc.CallOption) (*UnBanResponse, error) {
	out := new(UnBanResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnBlock(ctx context.Context, in *UnBlockRequest, opts ...grpc.CallOption) (*UnBlockResponse, error) {
	out := new(UnBlockResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnWarn(ctx context.Context, in *UnWarnRequest, opts ...grpc.CallOption) (*UnWarnResponse, error) {
	out := new(UnWarnResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnAdminJail(ctx context.Context, in *UnAdminJailRequest, opts ...grpc.CallOption) (*UnAdminJailResponse, error) {
	out := new(UnAdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnAdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnMuteGlobalChats(ctx context.Context, in *UnMuteGlobalChatsRequest, opts ...grpc.CallOption) (*UnMuteGlobalChatsResponse, error) {
	out := new(UnMuteGlobalChatsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnMuteGlobalChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerBans(ctx context.Context, in *GetPlayerBansRequest, opts ...grpc.CallOption) (*GetPlayerBansResponse, error) {
	out := new(GetPlayerBansResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerWarns(ctx context.Context, in *GetPlayerWarnsRequest, opts ...grpc.CallOption) (*GetPlayerWarnsResponse, error) {
	out := new(GetPlayerWarnsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerWarns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerAdminJail(ctx context.Context, in *GetPlayerAdminJailRequest, opts ...grpc.CallOption) (*GetPlayerAdminJailResponse, error) {
	out := new(GetPlayerAdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerAdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetBan(ctx context.Context, in *GetBanRequest, opts ...grpc.CallOption) (*BanMessage, error) {
	out := new(BanMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetWarn(ctx context.Context, in *GetWarnRequest, opts ...grpc.CallOption) (*WarnMessage, error) {
	out := new(WarnMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockMessage, error) {
	out := new(BlockMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsPlayerBanned(ctx context.Context, in *IsPlayerBannedRequest, opts ...grpc.CallOption) (*IsPlayerBannedResponse, error) {
	out := new(IsPlayerBannedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsPlayerBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsCharacterBlocked(ctx context.Context, in *IsCharacterBlockedRequest, opts ...grpc.CallOption) (*IsCharacterBlockedResponse, error) {
	out := new(IsCharacterBlockedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsCharacterBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsCharacterJailed(ctx context.Context, in *IsCharacterJailedRequest, opts ...grpc.CallOption) (*IsCharacterJailedResponse, error) {
	out := new(IsCharacterJailedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsCharacterJailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) WatchBans(ctx context.Context, in *WatchBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBansClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[0], "/mruv.punishments.MruVPunishmentsService/WatchBans", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchBansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchBansClient interface {
	Recv() (*BanMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchBansClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchBansClient) Recv() (*BanMessage, error) {
	m := new(BanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[1], "/mruv.punishments.MruVPunishmentsService/WatchBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchBlocksClient interface {
	Recv() (*BlockMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchBlocksClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchBlocksClient) Recv() (*BlockMessage, error) {
	m := new(BlockMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchWarns(ctx context.Context, in *WatchWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchWarnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[2], "/mruv.punishments.MruVPunishmentsService/WatchWarns", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchWarnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchWarnsClient interface {
	Recv() (*WarnMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchWarnsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchWarnsClient) Recv() (*WarnMessage, error) {
	m := new(WarnMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchAdminJails(ctx context.Context, in *WatchAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchAdminJailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[3], "/mruv.punishments.MruVPunishmentsService/WatchAdminJails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchAdminJailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchAdminJailsClient interface {
	Recv() (*AdminJailMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchAdminJailsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchAdminJailsClient) Recv() (*AdminJailMessage, error) {
	m := new(AdminJailMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnBans(ctx context.Context, in *WatchUnBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBansClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[4], "/mruv.punishments.MruVPunishmentsService/WatchUnBans", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnBansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnBansClient interface {
	Recv() (*UnBanMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnBansClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnBansClient) Recv() (*UnBanMessage, error) {
	m := new(UnBanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnBlocks(ctx context.Context, in *WatchUnBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[5], "/mruv.punishments.MruVPunishmentsService/WatchUnBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnBlocksClient interface {
	Recv() (*UnBlockMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnBlocksClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnBlocksClient) Recv() (*UnBlockMessage, error) {
	m := new(UnBlockMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnWarns(ctx context.Context, in *WatchUnWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnWarnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[6], "/mruv.punishments.MruVPunishmentsService/WatchUnWarns", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnWarnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnWarnsClient interface {
	Recv() (*UnWarnMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnWarnsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnWarnsClient) Recv() (*UnWarnMessage, error) {
	m := new(UnWarnMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnAdminJails(ctx context.Context, in *WatchUnAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnAdminJailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[7], "/mruv.punishments.MruVPunishmentsService/WatchUnAdminJails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnAdminJailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnAdminJailsClient interface {
	Recv() (*UnAdminJailMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnAdminJailsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnAdminJailsClient) Recv() (*UnAdminJailMessage, error) {
	m := new(UnAdminJailMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPlayerPunishments(ctx context.Context, in *WatchPlayerPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerPunishmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[8], "/mruv.punishments.MruVPunishmentsService/WatchPlayerPunishments", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPlayerPunishmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPlayerPunishmentsClient interface {
	Recv() (*WatchPlayerPunishmentsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPlayerPunishmentsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPlayerPunishmentsClient) Recv() (*WatchPlayerPunishmentsResponse, error) {
	m := new(WatchPlayerPunishmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPlayerAcquittals(ctx context.Context, in *WatchPlayerAcquittalsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerAcquittalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[9], "/mruv.punishments.MruVPunishmentsService/WatchPlayerAcquittals", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPlayerAcquittalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPlayerAcquittalsClient interface {
	Recv() (*WatchPlayerAcquittalsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPlayerAcquittalsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPlayerAcquittalsClient) Recv() (*WatchPlayerAcquittalsResponse, error) {
	m := new(WatchPlayerAcquittalsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPunishments(ctx context.Context, in *WatchPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPunishmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[10], "/mruv.punishments.MruVPunishmentsService/WatchPunishments", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPunishmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPunishmentsClient interface {
	Recv() (*WatchPunishmentsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPunishmentsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPunishmentsClient) Recv() (*WatchPunishmentsResponse, error) {
	m := new(WatchPunishmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MruVPunishmentsServiceServer is the server API for MruVPunishmentsService service.
type MruVPunishmentsServiceServer interface {
	// Ban player on account and/or ip.
	// If ban_time is 0, ban will never expire.
	Ban(context.Context, *BanRequest) (*BanResponse, error)
	// Block player character.
	Block(context.Context, *BlockRequest) (*BlockResponse, error)
	// Warn player.
	// If warn_time is 0, warn will never expire.
	Warn(context.Context, *WarnRequest) (*WarnResponse, error)
	// Put player in an admin jail.
	AdminJail(context.Context, *AdminJailRequest) (*AdminJailResponse, error)
	// Mute player global chats.
	MuteGlobalChats(context.Context, *MuteGlobalChatsRequest) (*MuteGlobalChatsResponse, error)
	// Deactivate a specific player ban.
	UnBan(context.Context, *UnBanRequest) (*UnBanResponse, error)
	// Deactivate a character block.
	UnBlock(context.Context, *UnBlockRequest) (*UnBlockResponse, error)
	// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
	UnWarn(context.Context, *UnWarnRequest) (*UnWarnResponse, error)
	// Remove player from admin jail.
	UnAdminJail(context.Context, *UnAdminJailRequest) (*UnAdminJailResponse, error)
	//
	UnMuteGlobalChats(context.Context, *UnMuteGlobalChatsRequest) (*UnMuteGlobalChatsResponse, error)
	// Get all player bans.
	GetPlayerBans(context.Context, *GetPlayerBansRequest) (*GetPlayerBansResponse, error)
	// Get all player warns.
	GetPlayerWarns(context.Context, *GetPlayerWarnsRequest) (*GetPlayerWarnsResponse, error)
	// Get player admin jail time.
	GetPlayerAdminJail(context.Context, *GetPlayerAdminJailRequest) (*GetPlayerAdminJailResponse, error)
	// Get ban info.
	GetBan(context.Context, *GetBanRequest) (*BanMessage, error)
	// Get warn info.
	GetWarn(context.Context, *GetWarnRequest) (*WarnMessage, error)
	// Get block info.
	GetBlock(context.Context, *GetBlockRequest) (*BlockMessage, error)
	// Check is player or ip banned.
	IsPlayerBanned(context.Context, *IsPlayerBannedRequest) (*IsPlayerBannedResponse, error)
	// Check is character is blocked.
	IsCharacterBlocked(context.Context, *IsCharacterBlockedRequest) (*IsCharacterBlockedResponse, error)
	//
	IsCharacterJailed(context.Context, *IsCharacterJailedRequest) (*IsCharacterJailedResponse, error)
	// Subscribe to ban events.
	WatchBans(*WatchBansRequest, MruVPunishmentsService_WatchBansServer) error
	// Subscribe to block events.
	WatchBlocks(*WatchBlocksRequest, MruVPunishmentsService_WatchBlocksServer) error
	// Subscribe to warn events.
	WatchWarns(*WatchWarnsRequest, MruVPunishmentsService_WatchWarnsServer) error
	// Subscribe to admin jail events.
	WatchAdminJails(*WatchAdminJailsRequest, MruVPunishmentsService_WatchAdminJailsServer) error
	// Subscribe to unban events.
	WatchUnBans(*WatchUnBansRequest, MruVPunishmentsService_WatchUnBansServer) error
	// Subscribe to unblock events.
	WatchUnBlocks(*WatchUnBlocksRequest, MruVPunishmentsService_WatchUnBlocksServer) error
	// Subscribe to unwarn events.
	WatchUnWarns(*WatchUnWarnsRequest, MruVPunishmentsService_WatchUnWarnsServer) error
	// Subscribe to admin jail release events.
	WatchUnAdminJails(*WatchUnAdminJailsRequest, MruVPunishmentsService_WatchUnAdminJailsServer) error
	// Subscribe to player punishments.
	WatchPlayerPunishments(*WatchPlayerPunishmentsRequest, MruVPunishmentsService_WatchPlayerPunishmentsServer) error
	// Subscribe to player acquittals.
	WatchPlayerAcquittals(*WatchPlayerAcquittalsRequest, MruVPunishmentsService_WatchPlayerAcquittalsServer) error
	// Subscribe to all punishments and acquittals events.
	WatchPunishments(*WatchPunishmentsRequest, MruVPunishmentsService_WatchPunishmentsServer) error
}

// UnimplementedMruVPunishmentsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVPunishmentsServiceServer struct {
}

func (*UnimplementedMruVPunishmentsServiceServer) Ban(ctx context.Context, req *BanRequest) (*BanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) Block(ctx context.Context, req *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) Warn(ctx context.Context, req *WarnRequest) (*WarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) AdminJail(ctx context.Context, req *AdminJailRequest) (*AdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) MuteGlobalChats(ctx context.Context, req *MuteGlobalChatsRequest) (*MuteGlobalChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGlobalChats not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnBan(ctx context.Context, req *UnBanRequest) (*UnBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBan not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnBlock(ctx context.Context, req *UnBlockRequest) (*UnBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlock not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnWarn(ctx context.Context, req *UnWarnRequest) (*UnWarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWarn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnAdminJail(ctx context.Context, req *UnAdminJailRequest) (*UnAdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnMuteGlobalChats(ctx context.Context, req *UnMuteGlobalChatsRequest) (*UnMuteGlobalChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMuteGlobalChats not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerBans(ctx context.Context, req *GetPlayerBansRequest) (*GetPlayerBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerWarns(ctx context.Context, req *GetPlayerWarnsRequest) (*GetPlayerWarnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerAdminJail(ctx context.Context, req *GetPlayerAdminJailRequest) (*GetPlayerAdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetBan(ctx context.Context, req *GetBanRequest) (*BanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBan not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetWarn(ctx context.Context, req *GetWarnRequest) (*WarnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetBlock(ctx context.Context, req *GetBlockRequest) (*BlockMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsPlayerBanned(ctx context.Context, req *IsPlayerBannedRequest) (*IsPlayerBannedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerBanned not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsCharacterBlocked(ctx context.Context, req *IsCharacterBlockedRequest) (*IsCharacterBlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCharacterBlocked not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsCharacterJailed(ctx context.Context, req *IsCharacterJailedRequest) (*IsCharacterJailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCharacterJailed not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchBans(req *WatchBansRequest, srv MruVPunishmentsService_WatchBansServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchBlocks(req *WatchBlocksRequest, srv MruVPunishmentsService_WatchBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocks not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchWarns(req *WatchWarnsRequest, srv MruVPunishmentsService_WatchWarnsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchAdminJails(req *WatchAdminJailsRequest, srv MruVPunishmentsService_WatchAdminJailsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAdminJails not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnBans(req *WatchUnBansRequest, srv MruVPunishmentsService_WatchUnBansServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnBlocks(req *WatchUnBlocksRequest, srv MruVPunishmentsService_WatchUnBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnBlocks not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnWarns(req *WatchUnWarnsRequest, srv MruVPunishmentsService_WatchUnWarnsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnAdminJails(req *WatchUnAdminJailsRequest, srv MruVPunishmentsService_WatchUnAdminJailsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnAdminJails not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPlayerPunishments(req *WatchPlayerPunishmentsRequest, srv MruVPunishmentsService_WatchPlayerPunishmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPlayerPunishments not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPlayerAcquittals(req *WatchPlayerAcquittalsRequest, srv MruVPunishmentsService_WatchPlayerAcquittalsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPlayerAcquittals not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPunishments(req *WatchPunishmentsRequest, srv MruVPunishmentsService_WatchPunishmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPunishments not implemented")
}

func RegisterMruVPunishmentsServiceServer(s *grpc.Server, srv MruVPunishmentsServiceServer) {
	s.RegisterService(&_MruVPunishmentsService_serviceDesc, srv)
}

func _MruVPunishmentsService_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Ban(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Warn(ctx, req.(*WarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_AdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).AdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/AdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).AdminJail(ctx, req.(*AdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_MuteGlobalChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGlobalChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).MuteGlobalChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/MuteGlobalChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).MuteGlobalChats(ctx, req.(*MuteGlobalChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnBan(ctx, req.(*UnBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnBlock(ctx, req.(*UnBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnWarn(ctx, req.(*UnWarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnAdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnAdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnAdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnAdminJail(ctx, req.(*UnAdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnMuteGlobalChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnMuteGlobalChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnMuteGlobalChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnMuteGlobalChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnMuteGlobalChats(ctx, req.(*UnMuteGlobalChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerBans(ctx, req.(*GetPlayerBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerWarns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWarnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerWarns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerWarns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerWarns(ctx, req.(*GetPlayerWarnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerAdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerAdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerAdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerAdminJail(ctx, req.(*GetPlayerAdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetBan(ctx, req.(*GetBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetWarn(ctx, req.(*GetWarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsPlayerBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsPlayerBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsPlayerBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsPlayerBanned(ctx, req.(*IsPlayerBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsCharacterBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCharacterBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsCharacterBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsCharacterBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsCharacterBlocked(ctx, req.(*IsCharacterBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsCharacterJailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCharacterJailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsCharacterJailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsCharacterJailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsCharacterJailed(ctx, req.(*IsCharacterJailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_WatchBans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBansRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchBans(m, &mruVPunishmentsServiceWatchBansServer{stream})
}

type MruVPunishmentsService_WatchBansServer interface {
	Send(*BanMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchBansServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchBansServer) Send(m *BanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchBlocks(m, &mruVPunishmentsServiceWatchBlocksServer{stream})
}

type MruVPunishmentsService_WatchBlocksServer interface {
	Send(*BlockMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchBlocksServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchBlocksServer) Send(m *BlockMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchWarns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchWarnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchWarns(m, &mruVPunishmentsServiceWatchWarnsServer{stream})
}

type MruVPunishmentsService_WatchWarnsServer interface {
	Send(*WarnMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchWarnsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchWarnsServer) Send(m *WarnMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchAdminJails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAdminJailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchAdminJails(m, &mruVPunishmentsServiceWatchAdminJailsServer{stream})
}

type MruVPunishmentsService_WatchAdminJailsServer interface {
	Send(*AdminJailMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchAdminJailsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchAdminJailsServer) Send(m *AdminJailMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnBans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnBansRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnBans(m, &mruVPunishmentsServiceWatchUnBansServer{stream})
}

type MruVPunishmentsService_WatchUnBansServer interface {
	Send(*UnBanMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnBansServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnBansServer) Send(m *UnBanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnBlocks(m, &mruVPunishmentsServiceWatchUnBlocksServer{stream})
}

type MruVPunishmentsService_WatchUnBlocksServer interface {
	Send(*UnBlockMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnBlocksServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnBlocksServer) Send(m *UnBlockMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnWarns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnWarnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnWarns(m, &mruVPunishmentsServiceWatchUnWarnsServer{stream})
}

type MruVPunishmentsService_WatchUnWarnsServer interface {
	Send(*UnWarnMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnWarnsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnWarnsServer) Send(m *UnWarnMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnAdminJails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnAdminJailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnAdminJails(m, &mruVPunishmentsServiceWatchUnAdminJailsServer{stream})
}

type MruVPunishmentsService_WatchUnAdminJailsServer interface {
	Send(*UnAdminJailMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnAdminJailsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnAdminJailsServer) Send(m *UnAdminJailMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPlayerPunishments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPlayerPunishmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPlayerPunishments(m, &mruVPunishmentsServiceWatchPlayerPunishmentsServer{stream})
}

type MruVPunishmentsService_WatchPlayerPunishmentsServer interface {
	Send(*WatchPlayerPunishmentsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPlayerPunishmentsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPlayerPunishmentsServer) Send(m *WatchPlayerPunishmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPlayerAcquittals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPlayerAcquittalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPlayerAcquittals(m, &mruVPunishmentsServiceWatchPlayerAcquittalsServer{stream})
}

type MruVPunishmentsService_WatchPlayerAcquittalsServer interface {
	Send(*WatchPlayerAcquittalsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPlayerAcquittalsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPlayerAcquittalsServer) Send(m *WatchPlayerAcquittalsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPunishments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPunishmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPunishments(m, &mruVPunishmentsServiceWatchPunishmentsServer{stream})
}

type MruVPunishmentsService_WatchPunishmentsServer interface {
	Send(*WatchPunishmentsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPunishmentsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPunishmentsServer) Send(m *WatchPunishmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MruVPunishmentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.punishments.MruVPunishmentsService",
	HandlerType: (*MruVPunishmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ban",
			Handler:    _MruVPunishmentsService_Ban_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _MruVPunishmentsService_Block_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _MruVPunishmentsService_Warn_Handler,
		},
		{
			MethodName: "AdminJail",
			Handler:    _MruVPunishmentsService_AdminJail_Handler,
		},
		{
			MethodName: "MuteGlobalChats",
			Handler:    _MruVPunishmentsService_MuteGlobalChats_Handler,
		},
		{
			MethodName: "UnBan",
			Handler:    _MruVPunishmentsService_UnBan_Handler,
		},
		{
			MethodName: "UnBlock",
			Handler:    _MruVPunishmentsService_UnBlock_Handler,
		},
		{
			MethodName: "UnWarn",
			Handler:    _MruVPunishmentsService_UnWarn_Handler,
		},
		{
			MethodName: "UnAdminJail",
			Handler:    _MruVPunishmentsService_UnAdminJail_Handler,
		},
		{
			MethodName: "UnMuteGlobalChats",
			Handler:    _MruVPunishmentsService_UnMuteGlobalChats_Handler,
		},
		{
			MethodName: "GetPlayerBans",
			Handler:    _MruVPunishmentsService_GetPlayerBans_Handler,
		},
		{
			MethodName: "GetPlayerWarns",
			Handler:    _MruVPunishmentsService_GetPlayerWarns_Handler,
		},
		{
			MethodName: "GetPlayerAdminJail",
			Handler:    _MruVPunishmentsService_GetPlayerAdminJail_Handler,
		},
		{
			MethodName: "GetBan",
			Handler:    _MruVPunishmentsService_GetBan_Handler,
		},
		{
			MethodName: "GetWarn",
			Handler:    _MruVPunishmentsService_GetWarn_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _MruVPunishmentsService_GetBlock_Handler,
		},
		{
			MethodName: "IsPlayerBanned",
			Handler:    _MruVPunishmentsService_IsPlayerBanned_Handler,
		},
		{
			MethodName: "IsCharacterBlocked",
			Handler:    _MruVPunishmentsService_IsCharacterBlocked_Handler,
		},
		{
			MethodName: "IsCharacterJailed",
			Handler:    _MruVPunishmentsService_IsCharacterJailed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBans",
			Handler:       _MruVPunishmentsService_WatchBans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocks",
			Handler:       _MruVPunishmentsService_WatchBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchWarns",
			Handler:       _MruVPunishmentsService_WatchWarns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAdminJails",
			Handler:       _MruVPunishmentsService_WatchAdminJails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnBans",
			Handler:       _MruVPunishmentsService_WatchUnBans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnBlocks",
			Handler:       _MruVPunishmentsService_WatchUnBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnWarns",
			Handler:       _MruVPunishmentsService_WatchUnWarns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnAdminJails",
			Handler:       _MruVPunishmentsService_WatchUnAdminJails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPlayerPunishments",
			Handler:       _MruVPunishmentsService_WatchPlayerPunishments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPlayerAcquittals",
			Handler:       _MruVPunishmentsService_WatchPlayerAcquittals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPunishments",
			Handler:       _MruVPunishmentsService_WatchPunishments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "punishments/punishments.proto",
}
