// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: punishments/punishments.proto

package punishments

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PunishmentType int32

const (
	PunishmentType_UNKNOWN_PUNISHMENT PunishmentType = 0
	PunishmentType_BAN                PunishmentType = 1
	PunishmentType_BLOCK              PunishmentType = 2
	PunishmentType_WARN               PunishmentType = 3
	PunishmentType_ADMIN_JAIL         PunishmentType = 4
)

// Enum value maps for PunishmentType.
var (
	PunishmentType_name = map[int32]string{
		0: "UNKNOWN_PUNISHMENT",
		1: "BAN",
		2: "BLOCK",
		3: "WARN",
		4: "ADMIN_JAIL",
	}
	PunishmentType_value = map[string]int32{
		"UNKNOWN_PUNISHMENT": 0,
		"BAN":                1,
		"BLOCK":              2,
		"WARN":               3,
		"ADMIN_JAIL":         4,
	}
)

func (x PunishmentType) Enum() *PunishmentType {
	p := new(PunishmentType)
	*p = x
	return p
}

func (x PunishmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PunishmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_punishments_punishments_proto_enumTypes[0].Descriptor()
}

func (PunishmentType) Type() protoreflect.EnumType {
	return &file_punishments_punishments_proto_enumTypes[0]
}

func (x PunishmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PunishmentType.Descriptor instead.
func (PunishmentType) EnumDescriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{0}
}

type AcquittalsType int32

const (
	AcquittalsType_UNKNOWN_ACQUITAL AcquittalsType = 0
	AcquittalsType_UNBAN            AcquittalsType = 1
	AcquittalsType_UNBLOCK          AcquittalsType = 2
	AcquittalsType_UNWARN           AcquittalsType = 3
	AcquittalsType_UN_ADMIN_JAIL    AcquittalsType = 4
)

// Enum value maps for AcquittalsType.
var (
	AcquittalsType_name = map[int32]string{
		0: "UNKNOWN_ACQUITAL",
		1: "UNBAN",
		2: "UNBLOCK",
		3: "UNWARN",
		4: "UN_ADMIN_JAIL",
	}
	AcquittalsType_value = map[string]int32{
		"UNKNOWN_ACQUITAL": 0,
		"UNBAN":            1,
		"UNBLOCK":          2,
		"UNWARN":           3,
		"UN_ADMIN_JAIL":    4,
	}
)

func (x AcquittalsType) Enum() *AcquittalsType {
	p := new(AcquittalsType)
	*p = x
	return p
}

func (x AcquittalsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquittalsType) Descriptor() protoreflect.EnumDescriptor {
	return file_punishments_punishments_proto_enumTypes[1].Descriptor()
}

func (AcquittalsType) Type() protoreflect.EnumType {
	return &file_punishments_punishments_proto_enumTypes[1]
}

func (x AcquittalsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquittalsType.Descriptor instead.
func (AcquittalsType) EnumDescriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{1}
}

type BanMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player    uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Expiration date in Unix time.
	ExpirationDate int64 `protobuf:"varint,4,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// A ban reason.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that banned a player. 0 = system ban.
	Admin uint32 `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a ban was issued in Unix time.
	BanDate int64 `protobuf:"varint,7,opt,name=ban_date,json=banDate,proto3" json:"ban_date,omitempty"`
	// Ban status. True = active, false = deactivated.
	Active bool `protobuf:"varint,8,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unban in Unix time.
	// This field is set only when ban was deactivated.
	UnbanDate int64 `protobuf:"varint,9,opt,name=unban_date,json=unbanDate,proto3" json:"unban_date,omitempty"`
	// Admin that deactivated this ban.
	// This field is set only when ban was deactivated.
	UnbanAdmin uint32 `protobuf:"varint,10,opt,name=unban_admin,json=unbanAdmin,proto3" json:"unban_admin,omitempty"`
}

func (x *BanMessage) Reset() {
	*x = BanMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanMessage) ProtoMessage() {}

func (x *BanMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanMessage.ProtoReflect.Descriptor instead.
func (*BanMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{0}
}

func (x *BanMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *BanMessage) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BanMessage) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BanMessage) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

func (x *BanMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanMessage) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

func (x *BanMessage) GetBanDate() int64 {
	if x != nil {
		return x.BanDate
	}
	return 0
}

func (x *BanMessage) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BanMessage) GetUnbanDate() int64 {
	if x != nil {
		return x.UnbanDate
	}
	return 0
}

func (x *BanMessage) GetUnbanAdmin() uint32 {
	if x != nil {
		return x.UnbanAdmin
	}
	return 0
}

type WarnMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// A character, that was given a warning.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// Expiration date in Unix time.
	ExpirationDate int64 `protobuf:"varint,3,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// A warn reason.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that warned a player. 0 = system warn.
	Admin uint32 `protobuf:"varint,5,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a warn was issued in Unix time.
	WarnDate int64 `protobuf:"varint,6,opt,name=warn_date,json=warnDate,proto3" json:"warn_date,omitempty"`
	// Warn status. True = active, false = deactivated.
	Active bool `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unwarn in Unix time.
	// This field is set only when warn was deactivated.
	UnwarnDate int64 `protobuf:"varint,8,opt,name=unwarn_date,json=unwarnDate,proto3" json:"unwarn_date,omitempty"`
	// Admin that deactivated a warn.
	// This field is set only when warn was deactivated.
	UnwarnAdmin uint32 `protobuf:"varint,9,opt,name=unwarn_admin,json=unwarnAdmin,proto3" json:"unwarn_admin,omitempty"`
}

func (x *WarnMessage) Reset() {
	*x = WarnMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarnMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarnMessage) ProtoMessage() {}

func (x *WarnMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarnMessage.ProtoReflect.Descriptor instead.
func (*WarnMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{1}
}

func (x *WarnMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *WarnMessage) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *WarnMessage) GetExpirationDate() int64 {
	if x != nil {
		return x.ExpirationDate
	}
	return 0
}

func (x *WarnMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WarnMessage) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

func (x *WarnMessage) GetWarnDate() int64 {
	if x != nil {
		return x.WarnDate
	}
	return 0
}

func (x *WarnMessage) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *WarnMessage) GetUnwarnDate() int64 {
	if x != nil {
		return x.UnwarnDate
	}
	return 0
}

func (x *WarnMessage) GetUnwarnAdmin() uint32 {
	if x != nil {
		return x.UnwarnAdmin
	}
	return 0
}

type BlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A player, that owns a blocked character.
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Blocked character.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// A block reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that blocked a player. 0 = system block.
	Admin uint32 `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which a block was issued in Unix time.
	BlockDate int64 `protobuf:"varint,5,opt,name=block_date,json=blockDate,proto3" json:"block_date,omitempty"`
	Active    bool  `protobuf:"varint,6,opt,name=active,proto3" json:"active,omitempty"`
	// Date of unblock in Unix time.
	// This field is set only when a block was deactivated.
	UnblockDate int64 `protobuf:"varint,7,opt,name=unblock_date,json=unblockDate,proto3" json:"unblock_date,omitempty"`
	// An admin that unblocked a player.
	// This field is set only when a block was deactivated.
	UnblockAdmin uint32 `protobuf:"varint,8,opt,name=unblock_admin,json=unblockAdmin,proto3" json:"unblock_admin,omitempty"`
}

func (x *BlockMessage) Reset() {
	*x = BlockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockMessage) ProtoMessage() {}

func (x *BlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockMessage.ProtoReflect.Descriptor instead.
func (*BlockMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{2}
}

func (x *BlockMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *BlockMessage) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BlockMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockMessage) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

func (x *BlockMessage) GetBlockDate() int64 {
	if x != nil {
		return x.BlockDate
	}
	return 0
}

func (x *BlockMessage) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *BlockMessage) GetUnblockDate() int64 {
	if x != nil {
		return x.UnblockDate
	}
	return 0
}

func (x *BlockMessage) GetUnblockAdmin() uint32 {
	if x != nil {
		return x.UnblockAdmin
	}
	return 0
}

type AdminJailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A player, that owns a jailed character.
	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Character that has been jailed.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// An admin jail reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that jail a player. 0 = system jail.
	Admin uint32 `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date on which an admin jail was issued in Unix time.
	AjDate int64 `protobuf:"varint,5,opt,name=aj_date,json=ajDate,proto3" json:"aj_date,omitempty"`
	// Time of admin jail in seconds.
	JailTime uint32 `protobuf:"varint,6,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
}

func (x *AdminJailMessage) Reset() {
	*x = AdminJailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminJailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminJailMessage) ProtoMessage() {}

func (x *AdminJailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminJailMessage.ProtoReflect.Descriptor instead.
func (*AdminJailMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{3}
}

func (x *AdminJailMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *AdminJailMessage) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *AdminJailMessage) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AdminJailMessage) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

func (x *AdminJailMessage) GetAjDate() int64 {
	if x != nil {
		return x.AjDate
	}
	return 0
}

func (x *AdminJailMessage) GetJailTime() uint32 {
	if x != nil {
		return x.JailTime
	}
	return 0
}

type UnBanMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	BanId  uint32 `protobuf:"varint,2,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
}

func (x *UnBanMessage) Reset() {
	*x = UnBanMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBanMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBanMessage) ProtoMessage() {}

func (x *UnBanMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBanMessage.ProtoReflect.Descriptor instead.
func (*UnBanMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{4}
}

func (x *UnBanMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UnBanMessage) GetBanId() uint32 {
	if x != nil {
		return x.BanId
	}
	return 0
}

type UnBlockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player  uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	BlockId uint32 `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *UnBlockMessage) Reset() {
	*x = UnBlockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBlockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBlockMessage) ProtoMessage() {}

func (x *UnBlockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBlockMessage.ProtoReflect.Descriptor instead.
func (*UnBlockMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{5}
}

func (x *UnBlockMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UnBlockMessage) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

type UnWarnMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	WarnId uint32 `protobuf:"varint,2,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
}

func (x *UnWarnMessage) Reset() {
	*x = UnWarnMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnWarnMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnWarnMessage) ProtoMessage() {}

func (x *UnWarnMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnWarnMessage.ProtoReflect.Descriptor instead.
func (*UnWarnMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{6}
}

func (x *UnWarnMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UnWarnMessage) GetWarnId() uint32 {
	if x != nil {
		return x.WarnId
	}
	return 0
}

type UnAdminJailMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player    uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *UnAdminJailMessage) Reset() {
	*x = UnAdminJailMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnAdminJailMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnAdminJailMessage) ProtoMessage() {}

func (x *UnAdminJailMessage) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnAdminJailMessage.ProtoReflect.Descriptor instead.
func (*UnAdminJailMessage) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{7}
}

func (x *UnAdminJailMessage) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *UnAdminJailMessage) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Request message for rpc `Ban`.
type BanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Player character that was accused.
	// Optional.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// Ban expiration time in days. 0 = permanent ban.
	Time uint32 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// Ban reason.
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that banned a player. 0 = system ban.
	Admin uint32 `protobuf:"varint,6,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *BanRequest) Reset() {
	*x = BanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanRequest) ProtoMessage() {}

func (x *BanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanRequest.ProtoReflect.Descriptor instead.
func (*BanRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{8}
}

func (x *BanRequest) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *BanRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BanRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BanRequest) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *BanRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanRequest) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

// Response message for rpc `Ban`.
type BanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId uint32 `protobuf:"varint,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
}

func (x *BanResponse) Reset() {
	*x = BanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanResponse) ProtoMessage() {}

func (x *BanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanResponse.ProtoReflect.Descriptor instead.
func (*BanResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{9}
}

func (x *BanResponse) GetBanId() uint32 {
	if x != nil {
		return x.BanId
	}
	return 0
}

// Request message for rpc `Block`.
type BlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	// Block reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that blocked a player. 0 = system ban.
	Admin uint32 `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *BlockRequest) Reset() {
	*x = BlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockRequest) ProtoMessage() {}

func (x *BlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockRequest.ProtoReflect.Descriptor instead.
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{10}
}

func (x *BlockRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *BlockRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BlockRequest) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

// Response message for rpc `Block`.
type BlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *BlockResponse) Reset() {
	*x = BlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResponse) ProtoMessage() {}

func (x *BlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResponse.ProtoReflect.Descriptor instead.
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{11}
}

func (x *BlockResponse) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

// Request message for rpc `Warn`.
type WarnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	// Player character that was accused.
	// Optional.
	Character uint32 `protobuf:"varint,2,opt,name=character,proto3" json:"character,omitempty"`
	// Warn expiration time in days. 0 = permanent warn.
	Time uint32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	// Warn reason.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that warned player. 0 = system warn.
	Admin uint32 `protobuf:"varint,5,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *WarnRequest) Reset() {
	*x = WarnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarnRequest) ProtoMessage() {}

func (x *WarnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarnRequest.ProtoReflect.Descriptor instead.
func (*WarnRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{12}
}

func (x *WarnRequest) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *WarnRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *WarnRequest) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *WarnRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *WarnRequest) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

// Response message for rpc `Warn`.
type WarnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarnId uint32 `protobuf:"varint,1,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
}

func (x *WarnResponse) Reset() {
	*x = WarnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WarnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WarnResponse) ProtoMessage() {}

func (x *WarnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WarnResponse.ProtoReflect.Descriptor instead.
func (*WarnResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{13}
}

func (x *WarnResponse) GetWarnId() uint32 {
	if x != nil {
		return x.WarnId
	}
	return 0
}

// Request message for rpc `AdminJail`.
type AdminJailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
	// Admin jail time.
	Time uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	// Admin jail reason.
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	// Admin that gave an admin jail to a player.
	Admin uint32 `protobuf:"varint,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *AdminJailRequest) Reset() {
	*x = AdminJailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminJailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminJailRequest) ProtoMessage() {}

func (x *AdminJailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminJailRequest.ProtoReflect.Descriptor instead.
func (*AdminJailRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{14}
}

func (x *AdminJailRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

func (x *AdminJailRequest) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AdminJailRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AdminJailRequest) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

// Response message for rpc `AdminJail`.
type AdminJailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminJailResponse) Reset() {
	*x = AdminJailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminJailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminJailResponse) ProtoMessage() {}

func (x *AdminJailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminJailResponse.ProtoReflect.Descriptor instead.
func (*AdminJailResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{15}
}

// Request message for rpc `MuteGlobalChats`.
type MuteGlobalChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account uint32 `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *MuteGlobalChatsRequest) Reset() {
	*x = MuteGlobalChatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGlobalChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGlobalChatsRequest) ProtoMessage() {}

func (x *MuteGlobalChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGlobalChatsRequest.ProtoReflect.Descriptor instead.
func (*MuteGlobalChatsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{16}
}

func (x *MuteGlobalChatsRequest) GetAccount() uint32 {
	if x != nil {
		return x.Account
	}
	return 0
}

// Response message for rpc `MuteGlobalChats`.
type MuteGlobalChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MuteGlobalChatsResponse) Reset() {
	*x = MuteGlobalChatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MuteGlobalChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MuteGlobalChatsResponse) ProtoMessage() {}

func (x *MuteGlobalChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MuteGlobalChatsResponse.ProtoReflect.Descriptor instead.
func (*MuteGlobalChatsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{17}
}

// Request message for rpc `UnBan`.
type UnBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BanId  uint32 `protobuf:"varint,1,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UnBanRequest) Reset() {
	*x = UnBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBanRequest) ProtoMessage() {}

func (x *UnBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBanRequest.ProtoReflect.Descriptor instead.
func (*UnBanRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{18}
}

func (x *UnBanRequest) GetBanId() uint32 {
	if x != nil {
		return x.BanId
	}
	return 0
}

func (x *UnBanRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Response message for rpc `UnBan`.
type UnBanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnBanResponse) Reset() {
	*x = UnBanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBanResponse) ProtoMessage() {}

func (x *UnBanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBanResponse.ProtoReflect.Descriptor instead.
func (*UnBanResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{19}
}

// Request message for rpc `UnBlock`.
type UnBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockId uint32 `protobuf:"varint,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UnBlockRequest) Reset() {
	*x = UnBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBlockRequest) ProtoMessage() {}

func (x *UnBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBlockRequest.ProtoReflect.Descriptor instead.
func (*UnBlockRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{20}
}

func (x *UnBlockRequest) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

func (x *UnBlockRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Response message for rpc `UnBlock`.
type UnBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnBlockResponse) Reset() {
	*x = UnBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnBlockResponse) ProtoMessage() {}

func (x *UnBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnBlockResponse.ProtoReflect.Descriptor instead.
func (*UnBlockResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{21}
}

// Request message for rpc `UnWarn`.
type UnWarnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarnId uint32 `protobuf:"varint,1,opt,name=warn_id,json=warnId,proto3" json:"warn_id,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *UnWarnRequest) Reset() {
	*x = UnWarnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnWarnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnWarnRequest) ProtoMessage() {}

func (x *UnWarnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnWarnRequest.ProtoReflect.Descriptor instead.
func (*UnWarnRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{22}
}

func (x *UnWarnRequest) GetWarnId() uint32 {
	if x != nil {
		return x.WarnId
	}
	return 0
}

func (x *UnWarnRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Response message for rpc `UnWarn`.
type UnWarnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnWarnResponse) Reset() {
	*x = UnWarnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnWarnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnWarnResponse) ProtoMessage() {}

func (x *UnWarnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnWarnResponse.ProtoReflect.Descriptor instead.
func (*UnWarnResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{23}
}

// Request message for rpc `UnAdminJail`.
type UnAdminJailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *UnAdminJailRequest) Reset() {
	*x = UnAdminJailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnAdminJailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnAdminJailRequest) ProtoMessage() {}

func (x *UnAdminJailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnAdminJailRequest.ProtoReflect.Descriptor instead.
func (*UnAdminJailRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{24}
}

func (x *UnAdminJailRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Response message for rpc `UnAdminJail`.
type UnAdminJailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnAdminJailResponse) Reset() {
	*x = UnAdminJailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnAdminJailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnAdminJailResponse) ProtoMessage() {}

func (x *UnAdminJailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnAdminJailResponse.ProtoReflect.Descriptor instead.
func (*UnAdminJailResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{25}
}

// Request message for rpc `UnMuteGlobalChats`.
type UnMuteGlobalChatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account uint32 `protobuf:"varint,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *UnMuteGlobalChatsRequest) Reset() {
	*x = UnMuteGlobalChatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnMuteGlobalChatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnMuteGlobalChatsRequest) ProtoMessage() {}

func (x *UnMuteGlobalChatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnMuteGlobalChatsRequest.ProtoReflect.Descriptor instead.
func (*UnMuteGlobalChatsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{26}
}

func (x *UnMuteGlobalChatsRequest) GetAccount() uint32 {
	if x != nil {
		return x.Account
	}
	return 0
}

// Response message for rpc `UnMuteGlobalChats`.
type UnMuteGlobalChatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnMuteGlobalChatsResponse) Reset() {
	*x = UnMuteGlobalChatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnMuteGlobalChatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnMuteGlobalChatsResponse) ProtoMessage() {}

func (x *UnMuteGlobalChatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnMuteGlobalChatsResponse.ProtoReflect.Descriptor instead.
func (*UnMuteGlobalChatsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{27}
}

// Request message for rpc `GetPlayerBans`.
type GetPlayerBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetPlayerBansRequest) Reset() {
	*x = GetPlayerBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerBansRequest) ProtoMessage() {}

func (x *GetPlayerBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerBansRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerBansRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{28}
}

func (x *GetPlayerBansRequest) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *GetPlayerBansRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Response message for rpc `GetPlayerBans`.
type GetPlayerBansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bans []*BanMessage `protobuf:"bytes,1,rep,name=bans,proto3" json:"bans,omitempty"`
}

func (x *GetPlayerBansResponse) Reset() {
	*x = GetPlayerBansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerBansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerBansResponse) ProtoMessage() {}

func (x *GetPlayerBansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerBansResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerBansResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{29}
}

func (x *GetPlayerBansResponse) GetBans() []*BanMessage {
	if x != nil {
		return x.Bans
	}
	return nil
}

// Request message for rpc `GetPlayerWarns`.
type GetPlayerWarnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
}

func (x *GetPlayerWarnsRequest) Reset() {
	*x = GetPlayerWarnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerWarnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerWarnsRequest) ProtoMessage() {}

func (x *GetPlayerWarnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerWarnsRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerWarnsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{30}
}

func (x *GetPlayerWarnsRequest) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

// Response message for rpc `GetPlayerWarns`.
type GetPlayerWarnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warns []*WarnMessage `protobuf:"bytes,1,rep,name=warns,proto3" json:"warns,omitempty"`
}

func (x *GetPlayerWarnsResponse) Reset() {
	*x = GetPlayerWarnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerWarnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerWarnsResponse) ProtoMessage() {}

func (x *GetPlayerWarnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerWarnsResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerWarnsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{31}
}

func (x *GetPlayerWarnsResponse) GetWarns() []*WarnMessage {
	if x != nil {
		return x.Warns
	}
	return nil
}

// Request message for rpc `GetPlayerAdminJail`.
type GetPlayerAdminJailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *GetPlayerAdminJailRequest) Reset() {
	*x = GetPlayerAdminJailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerAdminJailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerAdminJailRequest) ProtoMessage() {}

func (x *GetPlayerAdminJailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerAdminJailRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerAdminJailRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{32}
}

func (x *GetPlayerAdminJailRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Response message for rpc `GetPlayerAdminJail`.
type GetPlayerAdminJailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time of admin jail in seconds.
	JailTime uint32 `protobuf:"varint,1,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
	// Admin jail reason.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// An admin that put a player in the admin jail.
	Admin uint32 `protobuf:"varint,3,opt,name=admin,proto3" json:"admin,omitempty"`
	// Date when the player was thrown into admin jail in Unix time.
	Date int64 `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
}

func (x *GetPlayerAdminJailResponse) Reset() {
	*x = GetPlayerAdminJailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlayerAdminJailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerAdminJailResponse) ProtoMessage() {}

func (x *GetPlayerAdminJailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerAdminJailResponse.ProtoReflect.Descriptor instead.
func (*GetPlayerAdminJailResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{33}
}

func (x *GetPlayerAdminJailResponse) GetJailTime() uint32 {
	if x != nil {
		return x.JailTime
	}
	return 0
}

func (x *GetPlayerAdminJailResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *GetPlayerAdminJailResponse) GetAdmin() uint32 {
	if x != nil {
		return x.Admin
	}
	return 0
}

func (x *GetPlayerAdminJailResponse) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

// Request message for rpc `GetBan`.
type GetBanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBanRequest) Reset() {
	*x = GetBanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanRequest) ProtoMessage() {}

func (x *GetBanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanRequest.ProtoReflect.Descriptor instead.
func (*GetBanRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{34}
}

func (x *GetBanRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `GetWarn`.
type GetWarnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWarnRequest) Reset() {
	*x = GetWarnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWarnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWarnRequest) ProtoMessage() {}

func (x *GetWarnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWarnRequest.ProtoReflect.Descriptor instead.
func (*GetWarnRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{35}
}

func (x *GetWarnRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `GetBlock`.
type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{36}
}

func (x *GetBlockRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `IsPlayerBanned`.
type IsPlayerBannedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player uint32 `protobuf:"varint,1,opt,name=player,proto3" json:"player,omitempty"`
	Ip     string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *IsPlayerBannedRequest) Reset() {
	*x = IsPlayerBannedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPlayerBannedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPlayerBannedRequest) ProtoMessage() {}

func (x *IsPlayerBannedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPlayerBannedRequest.ProtoReflect.Descriptor instead.
func (*IsPlayerBannedRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{37}
}

func (x *IsPlayerBannedRequest) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *IsPlayerBannedRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

// Response message for rpc `IsPlayerBanned`.
type IsPlayerBannedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Banned bool   `protobuf:"varint,1,opt,name=banned,proto3" json:"banned,omitempty"`
	BanId  uint32 `protobuf:"varint,2,opt,name=ban_id,json=banId,proto3" json:"ban_id,omitempty"`
}

func (x *IsPlayerBannedResponse) Reset() {
	*x = IsPlayerBannedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsPlayerBannedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsPlayerBannedResponse) ProtoMessage() {}

func (x *IsPlayerBannedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsPlayerBannedResponse.ProtoReflect.Descriptor instead.
func (*IsPlayerBannedResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{38}
}

func (x *IsPlayerBannedResponse) GetBanned() bool {
	if x != nil {
		return x.Banned
	}
	return false
}

func (x *IsPlayerBannedResponse) GetBanId() uint32 {
	if x != nil {
		return x.BanId
	}
	return 0
}

// Request message for rpc `IsCharacterBlocked`.
type IsCharacterBlockedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *IsCharacterBlockedRequest) Reset() {
	*x = IsCharacterBlockedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCharacterBlockedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCharacterBlockedRequest) ProtoMessage() {}

func (x *IsCharacterBlockedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCharacterBlockedRequest.ProtoReflect.Descriptor instead.
func (*IsCharacterBlockedRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{39}
}

func (x *IsCharacterBlockedRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Response message for rpc `IsCharacterBlocked`.
type IsCharacterBlockedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocked bool   `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	BlockId uint32 `protobuf:"varint,2,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
}

func (x *IsCharacterBlockedResponse) Reset() {
	*x = IsCharacterBlockedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCharacterBlockedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCharacterBlockedResponse) ProtoMessage() {}

func (x *IsCharacterBlockedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCharacterBlockedResponse.ProtoReflect.Descriptor instead.
func (*IsCharacterBlockedResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{40}
}

func (x *IsCharacterBlockedResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *IsCharacterBlockedResponse) GetBlockId() uint32 {
	if x != nil {
		return x.BlockId
	}
	return 0
}

// Request message for rpc `IsCharacterJailed`.
type IsCharacterJailedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Character uint32 `protobuf:"varint,1,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *IsCharacterJailedRequest) Reset() {
	*x = IsCharacterJailedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCharacterJailedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCharacterJailedRequest) ProtoMessage() {}

func (x *IsCharacterJailedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCharacterJailedRequest.ProtoReflect.Descriptor instead.
func (*IsCharacterJailedRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{41}
}

func (x *IsCharacterJailedRequest) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

// Response message for rpc `IsCharacterJailed`.
type IsCharacterJailedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jailed   bool   `protobuf:"varint,1,opt,name=jailed,proto3" json:"jailed,omitempty"`
	JailTime uint32 `protobuf:"varint,2,opt,name=jail_time,json=jailTime,proto3" json:"jail_time,omitempty"`
}

func (x *IsCharacterJailedResponse) Reset() {
	*x = IsCharacterJailedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsCharacterJailedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsCharacterJailedResponse) ProtoMessage() {}

func (x *IsCharacterJailedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsCharacterJailedResponse.ProtoReflect.Descriptor instead.
func (*IsCharacterJailedResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{42}
}

func (x *IsCharacterJailedResponse) GetJailed() bool {
	if x != nil {
		return x.Jailed
	}
	return false
}

func (x *IsCharacterJailedResponse) GetJailTime() uint32 {
	if x != nil {
		return x.JailTime
	}
	return 0
}

// Request message for rpc `WatchBans`.
type WatchBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchBansRequest) Reset() {
	*x = WatchBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBansRequest) ProtoMessage() {}

func (x *WatchBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBansRequest.ProtoReflect.Descriptor instead.
func (*WatchBansRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{43}
}

// Request message for rpc `WatchBlocks`.
type WatchBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchBlocksRequest) Reset() {
	*x = WatchBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchBlocksRequest) ProtoMessage() {}

func (x *WatchBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchBlocksRequest.ProtoReflect.Descriptor instead.
func (*WatchBlocksRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{44}
}

// Request message for rpc `WatchWarns`.
type WatchWarnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchWarnsRequest) Reset() {
	*x = WatchWarnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchWarnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchWarnsRequest) ProtoMessage() {}

func (x *WatchWarnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchWarnsRequest.ProtoReflect.Descriptor instead.
func (*WatchWarnsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{45}
}

// Request message for rpc `WatchAdminJails`.
type WatchAdminJailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchAdminJailsRequest) Reset() {
	*x = WatchAdminJailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAdminJailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAdminJailsRequest) ProtoMessage() {}

func (x *WatchAdminJailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAdminJailsRequest.ProtoReflect.Descriptor instead.
func (*WatchAdminJailsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{46}
}

// Request message for rpc `WatchUnBans`.
type WatchUnBansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchUnBansRequest) Reset() {
	*x = WatchUnBansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUnBansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUnBansRequest) ProtoMessage() {}

func (x *WatchUnBansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUnBansRequest.ProtoReflect.Descriptor instead.
func (*WatchUnBansRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{47}
}

// Request message for rpc `WatchUnBlocks`.
type WatchUnBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchUnBlocksRequest) Reset() {
	*x = WatchUnBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUnBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUnBlocksRequest) ProtoMessage() {}

func (x *WatchUnBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUnBlocksRequest.ProtoReflect.Descriptor instead.
func (*WatchUnBlocksRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{48}
}

// Request message for rpc `WatchUnWarns`.
type WatchUnWarnsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchUnWarnsRequest) Reset() {
	*x = WatchUnWarnsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUnWarnsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUnWarnsRequest) ProtoMessage() {}

func (x *WatchUnWarnsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUnWarnsRequest.ProtoReflect.Descriptor instead.
func (*WatchUnWarnsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{49}
}

// Request message for rpc `WatchUnAdminJails`.
type WatchUnAdminJailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchUnAdminJailsRequest) Reset() {
	*x = WatchUnAdminJailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUnAdminJailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUnAdminJailsRequest) ProtoMessage() {}

func (x *WatchUnAdminJailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUnAdminJailsRequest.ProtoReflect.Descriptor instead.
func (*WatchUnAdminJailsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{50}
}

// Request message for rpc `WatchPlayerAcquittals`.
type WatchPlayerAcquittalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchPlayerAcquittalsRequest) Reset() {
	*x = WatchPlayerAcquittalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPlayerAcquittalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPlayerAcquittalsRequest) ProtoMessage() {}

func (x *WatchPlayerAcquittalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPlayerAcquittalsRequest.ProtoReflect.Descriptor instead.
func (*WatchPlayerAcquittalsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{51}
}

// Response message for rpc `WatchPlayerAcquittals`.
type WatchPlayerAcquittalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchPlayerAcquittalsResponse) Reset() {
	*x = WatchPlayerAcquittalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPlayerAcquittalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPlayerAcquittalsResponse) ProtoMessage() {}

func (x *WatchPlayerAcquittalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPlayerAcquittalsResponse.ProtoReflect.Descriptor instead.
func (*WatchPlayerAcquittalsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{52}
}

// Request message for rpc `WatchPlayerPunishments`.
type WatchPlayerPunishmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchPlayerPunishmentsRequest) Reset() {
	*x = WatchPlayerPunishmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPlayerPunishmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPlayerPunishmentsRequest) ProtoMessage() {}

func (x *WatchPlayerPunishmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPlayerPunishmentsRequest.ProtoReflect.Descriptor instead.
func (*WatchPlayerPunishmentsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{53}
}

// Response message for rpc `WatchPlayerPunishments`.
type WatchPlayerPunishmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         PunishmentType `protobuf:"varint,1,opt,name=type,proto3,enum=mruv.punishments.PunishmentType" json:"type,omitempty"`
	PunishmentId uint32         `protobuf:"varint,2,opt,name=punishment_id,json=punishmentId,proto3" json:"punishment_id,omitempty"`
}

func (x *WatchPlayerPunishmentsResponse) Reset() {
	*x = WatchPlayerPunishmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPlayerPunishmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPlayerPunishmentsResponse) ProtoMessage() {}

func (x *WatchPlayerPunishmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPlayerPunishmentsResponse.ProtoReflect.Descriptor instead.
func (*WatchPlayerPunishmentsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{54}
}

func (x *WatchPlayerPunishmentsResponse) GetType() PunishmentType {
	if x != nil {
		return x.Type
	}
	return PunishmentType_UNKNOWN_PUNISHMENT
}

func (x *WatchPlayerPunishmentsResponse) GetPunishmentId() uint32 {
	if x != nil {
		return x.PunishmentId
	}
	return 0
}

// Request message for rpc `WatchPunishments`.
type WatchPunishmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchPunishmentsRequest) Reset() {
	*x = WatchPunishmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPunishmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPunishmentsRequest) ProtoMessage() {}

func (x *WatchPunishmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPunishmentsRequest.ProtoReflect.Descriptor instead.
func (*WatchPunishmentsRequest) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{55}
}

// Response message for rpc `WatchPunishments`.
type WatchPunishmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         PunishmentType `protobuf:"varint,1,opt,name=type,proto3,enum=mruv.punishments.PunishmentType" json:"type,omitempty"`
	PunishmentId uint32         `protobuf:"varint,2,opt,name=punishment_id,json=punishmentId,proto3" json:"punishment_id,omitempty"`
	Player       uint32         `protobuf:"varint,3,opt,name=player,proto3" json:"player,omitempty"`
	Character    uint32         `protobuf:"varint,4,opt,name=character,proto3" json:"character,omitempty"`
}

func (x *WatchPunishmentsResponse) Reset() {
	*x = WatchPunishmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_punishments_punishments_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchPunishmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchPunishmentsResponse) ProtoMessage() {}

func (x *WatchPunishmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_punishments_punishments_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchPunishmentsResponse.ProtoReflect.Descriptor instead.
func (*WatchPunishmentsResponse) Descriptor() ([]byte, []int) {
	return file_punishments_punishments_proto_rawDescGZIP(), []int{56}
}

func (x *WatchPunishmentsResponse) GetType() PunishmentType {
	if x != nil {
		return x.Type
	}
	return PunishmentType_UNKNOWN_PUNISHMENT
}

func (x *WatchPunishmentsResponse) GetPunishmentId() uint32 {
	if x != nil {
		return x.PunishmentId
	}
	return 0
}

func (x *WatchPunishmentsResponse) GetPlayer() uint32 {
	if x != nil {
		return x.Player
	}
	return 0
}

func (x *WatchPunishmentsResponse) GetCharacter() uint32 {
	if x != nil {
		return x.Character
	}
	return 0
}

var File_punishments_punishments_proto protoreflect.FileDescriptor

var file_punishments_punishments_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x9c, 0x02, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x62, 0x61, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x93,
	0x02, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x6e, 0x77, 0x61, 0x72, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x77, 0x61, 0x72, 0x6e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x6a, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6a, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x61,
	0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a,
	0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x55, 0x6e, 0x42, 0x61, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0e, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0d, 0x55,
	0x6e, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x61, 0x72, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a,
	0x12, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x42, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x22, 0x24, 0x0a, 0x0b, 0x42, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x22, 0x2a, 0x0a, 0x0d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x22, 0x85,
	0x01, 0x0a, 0x0b, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x27, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x61, 0x72, 0x6e, 0x49, 0x64, 0x22,
	0x72, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x4d, 0x75, 0x74, 0x65,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x19, 0x0a, 0x17,
	0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x55, 0x6e, 0x42, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x0f, 0x0a, 0x0d, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x0a, 0x0e, 0x55, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x11, 0x0a, 0x0f,
	0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0x0a, 0x0d, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x61, 0x72, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x10, 0x0a, 0x0e, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x32, 0x0a, 0x12, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x15, 0x0a, 0x13, 0x55, 0x6e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x0a, 0x18, 0x55, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x62, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0x4d, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x77, 0x61, 0x72, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x77, 0x61, 0x72, 0x6e, 0x73, 0x22, 0x39, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61,
	0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x61, 0x69, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x15, 0x49, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x22, 0x47, 0x0a, 0x16, 0x49,
	0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62,
	0x61, 0x6e, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x19, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22,
	0x51, 0x0a, 0x1a, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x18, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x19,
	0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x4a, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6a, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6a, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6a, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x12,
	0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a,
	0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x6e, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a,
	0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e,
	0x57, 0x61, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x74, 0x74, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x74, 0x74, 0x61, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x7b, 0x0a, 0x1e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x50, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x18, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x2a, 0x56, 0x0a, 0x0e, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x55,
	0x4e, 0x49, 0x53, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x4d, 0x49,
	0x4e, 0x5f, 0x4a, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x2a, 0x5d, 0x0a, 0x0e, 0x41, 0x63, 0x71, 0x75,
	0x69, 0x74, 0x74, 0x61, 0x6c, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x42, 0x41, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e,
	0x5f, 0x4a, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x32, 0xbb, 0x1b, 0x0a, 0x16, 0x4d, 0x72, 0x75, 0x56,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x68, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x1c, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x1c,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x62, 0x61, 0x6e, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x7d, 0x12, 0x73, 0x0a, 0x05,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x7d, 0x12, 0x6c, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x6e, 0x12, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x72,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x72, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x7d, 0x12,
	0x7c, 0x0a, 0x09, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61,
	0x6a, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x7d, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4d,
	0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x6d, 0x75, 0x74, 0x65, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x12, 0x6e,
	0x0a, 0x05, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x12, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x42, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x42, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e,
	0x2a, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x62, 0x61, 0x6e, 0x2f, 0x7b, 0x62, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x79,
	0x0a, 0x07, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55,
	0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x2a, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x73, 0x0a, 0x06, 0x55, 0x6e, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x77, 0x61, 0x72, 0x6e, 0x2f, 0x7b, 0x77, 0x61, 0x72, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x82,
	0x01, 0x0a, 0x0b, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x12, 0x24,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x6a, 0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x4d,
	0x75, 0x74, 0x65, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x4d, 0x75, 0x74, 0x65, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x6d, 0x75, 0x74, 0x65,
	0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x7d, 0x12, 0x87, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x26, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x7d, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x57, 0x61, 0x72,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2f, 0x77, 0x61, 0x72, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x61, 0x6a,
	0x2f, 0x7b, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x7d, 0x12, 0x6a, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x12, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62,
	0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x57,
	0x61, 0x72, 0x6e, 0x12, 0x20, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x77, 0x61,
	0x72, 0x6e, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x72, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a,
	0x0e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x27, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2e, 0x49, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x61, 0x6e, 0x73,
	0x2f, 0x7b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x7d, 0x2f, 0x7b, 0x69, 0x70, 0x7d, 0x12, 0x71,
	0x0a, 0x12, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x2b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x11, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x73, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x4a, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x09, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x22,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a,
	0x0a, 0x57, 0x61, 0x74, 0x63, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x57, 0x61, 0x72, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x57, 0x0a, 0x0b, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x55, 0x6e, 0x42, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x6e, 0x42, 0x61, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x5d, 0x0a, 0x0d, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x5a, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x73,
	0x12, 0x25, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x57, 0x61, 0x72, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x55, 0x6e, 0x57, 0x61, 0x72,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x11,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x2a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2e, 0x55, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4a, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7f, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x7c, 0x0a, 0x15, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x71, 0x75, 0x69, 0x74, 0x74, 0x61, 0x6c,
	0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x74, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x74, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x10, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x50, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x75, 0x6e,
	0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75,
	0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x72, 0x75, 0x56, 0x2d, 0x52, 0x50, 0x2f, 0x6d, 0x72, 0x75, 0x76,
	0x2d, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x75, 0x6e, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_punishments_punishments_proto_rawDescOnce sync.Once
	file_punishments_punishments_proto_rawDescData = file_punishments_punishments_proto_rawDesc
)

func file_punishments_punishments_proto_rawDescGZIP() []byte {
	file_punishments_punishments_proto_rawDescOnce.Do(func() {
		file_punishments_punishments_proto_rawDescData = protoimpl.X.CompressGZIP(file_punishments_punishments_proto_rawDescData)
	})
	return file_punishments_punishments_proto_rawDescData
}

var file_punishments_punishments_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_punishments_punishments_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_punishments_punishments_proto_goTypes = []interface{}{
	(PunishmentType)(0),                    // 0: mruv.punishments.PunishmentType
	(AcquittalsType)(0),                    // 1: mruv.punishments.AcquittalsType
	(*BanMessage)(nil),                     // 2: mruv.punishments.BanMessage
	(*WarnMessage)(nil),                    // 3: mruv.punishments.WarnMessage
	(*BlockMessage)(nil),                   // 4: mruv.punishments.BlockMessage
	(*AdminJailMessage)(nil),               // 5: mruv.punishments.AdminJailMessage
	(*UnBanMessage)(nil),                   // 6: mruv.punishments.UnBanMessage
	(*UnBlockMessage)(nil),                 // 7: mruv.punishments.UnBlockMessage
	(*UnWarnMessage)(nil),                  // 8: mruv.punishments.UnWarnMessage
	(*UnAdminJailMessage)(nil),             // 9: mruv.punishments.UnAdminJailMessage
	(*BanRequest)(nil),                     // 10: mruv.punishments.BanRequest
	(*BanResponse)(nil),                    // 11: mruv.punishments.BanResponse
	(*BlockRequest)(nil),                   // 12: mruv.punishments.BlockRequest
	(*BlockResponse)(nil),                  // 13: mruv.punishments.BlockResponse
	(*WarnRequest)(nil),                    // 14: mruv.punishments.WarnRequest
	(*WarnResponse)(nil),                   // 15: mruv.punishments.WarnResponse
	(*AdminJailRequest)(nil),               // 16: mruv.punishments.AdminJailRequest
	(*AdminJailResponse)(nil),              // 17: mruv.punishments.AdminJailResponse
	(*MuteGlobalChatsRequest)(nil),         // 18: mruv.punishments.MuteGlobalChatsRequest
	(*MuteGlobalChatsResponse)(nil),        // 19: mruv.punishments.MuteGlobalChatsResponse
	(*UnBanRequest)(nil),                   // 20: mruv.punishments.UnBanRequest
	(*UnBanResponse)(nil),                  // 21: mruv.punishments.UnBanResponse
	(*UnBlockRequest)(nil),                 // 22: mruv.punishments.UnBlockRequest
	(*UnBlockResponse)(nil),                // 23: mruv.punishments.UnBlockResponse
	(*UnWarnRequest)(nil),                  // 24: mruv.punishments.UnWarnRequest
	(*UnWarnResponse)(nil),                 // 25: mruv.punishments.UnWarnResponse
	(*UnAdminJailRequest)(nil),             // 26: mruv.punishments.UnAdminJailRequest
	(*UnAdminJailResponse)(nil),            // 27: mruv.punishments.UnAdminJailResponse
	(*UnMuteGlobalChatsRequest)(nil),       // 28: mruv.punishments.UnMuteGlobalChatsRequest
	(*UnMuteGlobalChatsResponse)(nil),      // 29: mruv.punishments.UnMuteGlobalChatsResponse
	(*GetPlayerBansRequest)(nil),           // 30: mruv.punishments.GetPlayerBansRequest
	(*GetPlayerBansResponse)(nil),          // 31: mruv.punishments.GetPlayerBansResponse
	(*GetPlayerWarnsRequest)(nil),          // 32: mruv.punishments.GetPlayerWarnsRequest
	(*GetPlayerWarnsResponse)(nil),         // 33: mruv.punishments.GetPlayerWarnsResponse
	(*GetPlayerAdminJailRequest)(nil),      // 34: mruv.punishments.GetPlayerAdminJailRequest
	(*GetPlayerAdminJailResponse)(nil),     // 35: mruv.punishments.GetPlayerAdminJailResponse
	(*GetBanRequest)(nil),                  // 36: mruv.punishments.GetBanRequest
	(*GetWarnRequest)(nil),                 // 37: mruv.punishments.GetWarnRequest
	(*GetBlockRequest)(nil),                // 38: mruv.punishments.GetBlockRequest
	(*IsPlayerBannedRequest)(nil),          // 39: mruv.punishments.IsPlayerBannedRequest
	(*IsPlayerBannedResponse)(nil),         // 40: mruv.punishments.IsPlayerBannedResponse
	(*IsCharacterBlockedRequest)(nil),      // 41: mruv.punishments.IsCharacterBlockedRequest
	(*IsCharacterBlockedResponse)(nil),     // 42: mruv.punishments.IsCharacterBlockedResponse
	(*IsCharacterJailedRequest)(nil),       // 43: mruv.punishments.IsCharacterJailedRequest
	(*IsCharacterJailedResponse)(nil),      // 44: mruv.punishments.IsCharacterJailedResponse
	(*WatchBansRequest)(nil),               // 45: mruv.punishments.WatchBansRequest
	(*WatchBlocksRequest)(nil),             // 46: mruv.punishments.WatchBlocksRequest
	(*WatchWarnsRequest)(nil),              // 47: mruv.punishments.WatchWarnsRequest
	(*WatchAdminJailsRequest)(nil),         // 48: mruv.punishments.WatchAdminJailsRequest
	(*WatchUnBansRequest)(nil),             // 49: mruv.punishments.WatchUnBansRequest
	(*WatchUnBlocksRequest)(nil),           // 50: mruv.punishments.WatchUnBlocksRequest
	(*WatchUnWarnsRequest)(nil),            // 51: mruv.punishments.WatchUnWarnsRequest
	(*WatchUnAdminJailsRequest)(nil),       // 52: mruv.punishments.WatchUnAdminJailsRequest
	(*WatchPlayerAcquittalsRequest)(nil),   // 53: mruv.punishments.WatchPlayerAcquittalsRequest
	(*WatchPlayerAcquittalsResponse)(nil),  // 54: mruv.punishments.WatchPlayerAcquittalsResponse
	(*WatchPlayerPunishmentsRequest)(nil),  // 55: mruv.punishments.WatchPlayerPunishmentsRequest
	(*WatchPlayerPunishmentsResponse)(nil), // 56: mruv.punishments.WatchPlayerPunishmentsResponse
	(*WatchPunishmentsRequest)(nil),        // 57: mruv.punishments.WatchPunishmentsRequest
	(*WatchPunishmentsResponse)(nil),       // 58: mruv.punishments.WatchPunishmentsResponse
}
var file_punishments_punishments_proto_depIdxs = []int32{
	2,  // 0: mruv.punishments.GetPlayerBansResponse.bans:type_name -> mruv.punishments.BanMessage
	3,  // 1: mruv.punishments.GetPlayerWarnsResponse.warns:type_name -> mruv.punishments.WarnMessage
	0,  // 2: mruv.punishments.WatchPlayerPunishmentsResponse.type:type_name -> mruv.punishments.PunishmentType
	0,  // 3: mruv.punishments.WatchPunishmentsResponse.type:type_name -> mruv.punishments.PunishmentType
	10, // 4: mruv.punishments.MruVPunishmentsService.Ban:input_type -> mruv.punishments.BanRequest
	12, // 5: mruv.punishments.MruVPunishmentsService.Block:input_type -> mruv.punishments.BlockRequest
	14, // 6: mruv.punishments.MruVPunishmentsService.Warn:input_type -> mruv.punishments.WarnRequest
	16, // 7: mruv.punishments.MruVPunishmentsService.AdminJail:input_type -> mruv.punishments.AdminJailRequest
	18, // 8: mruv.punishments.MruVPunishmentsService.MuteGlobalChats:input_type -> mruv.punishments.MuteGlobalChatsRequest
	20, // 9: mruv.punishments.MruVPunishmentsService.UnBan:input_type -> mruv.punishments.UnBanRequest
	22, // 10: mruv.punishments.MruVPunishmentsService.UnBlock:input_type -> mruv.punishments.UnBlockRequest
	24, // 11: mruv.punishments.MruVPunishmentsService.UnWarn:input_type -> mruv.punishments.UnWarnRequest
	26, // 12: mruv.punishments.MruVPunishmentsService.UnAdminJail:input_type -> mruv.punishments.UnAdminJailRequest
	28, // 13: mruv.punishments.MruVPunishmentsService.UnMuteGlobalChats:input_type -> mruv.punishments.UnMuteGlobalChatsRequest
	30, // 14: mruv.punishments.MruVPunishmentsService.GetPlayerBans:input_type -> mruv.punishments.GetPlayerBansRequest
	32, // 15: mruv.punishments.MruVPunishmentsService.GetPlayerWarns:input_type -> mruv.punishments.GetPlayerWarnsRequest
	34, // 16: mruv.punishments.MruVPunishmentsService.GetPlayerAdminJail:input_type -> mruv.punishments.GetPlayerAdminJailRequest
	36, // 17: mruv.punishments.MruVPunishmentsService.GetBan:input_type -> mruv.punishments.GetBanRequest
	37, // 18: mruv.punishments.MruVPunishmentsService.GetWarn:input_type -> mruv.punishments.GetWarnRequest
	38, // 19: mruv.punishments.MruVPunishmentsService.GetBlock:input_type -> mruv.punishments.GetBlockRequest
	39, // 20: mruv.punishments.MruVPunishmentsService.IsPlayerBanned:input_type -> mruv.punishments.IsPlayerBannedRequest
	41, // 21: mruv.punishments.MruVPunishmentsService.IsCharacterBlocked:input_type -> mruv.punishments.IsCharacterBlockedRequest
	43, // 22: mruv.punishments.MruVPunishmentsService.IsCharacterJailed:input_type -> mruv.punishments.IsCharacterJailedRequest
	45, // 23: mruv.punishments.MruVPunishmentsService.WatchBans:input_type -> mruv.punishments.WatchBansRequest
	46, // 24: mruv.punishments.MruVPunishmentsService.WatchBlocks:input_type -> mruv.punishments.WatchBlocksRequest
	47, // 25: mruv.punishments.MruVPunishmentsService.WatchWarns:input_type -> mruv.punishments.WatchWarnsRequest
	48, // 26: mruv.punishments.MruVPunishmentsService.WatchAdminJails:input_type -> mruv.punishments.WatchAdminJailsRequest
	49, // 27: mruv.punishments.MruVPunishmentsService.WatchUnBans:input_type -> mruv.punishments.WatchUnBansRequest
	50, // 28: mruv.punishments.MruVPunishmentsService.WatchUnBlocks:input_type -> mruv.punishments.WatchUnBlocksRequest
	51, // 29: mruv.punishments.MruVPunishmentsService.WatchUnWarns:input_type -> mruv.punishments.WatchUnWarnsRequest
	52, // 30: mruv.punishments.MruVPunishmentsService.WatchUnAdminJails:input_type -> mruv.punishments.WatchUnAdminJailsRequest
	55, // 31: mruv.punishments.MruVPunishmentsService.WatchPlayerPunishments:input_type -> mruv.punishments.WatchPlayerPunishmentsRequest
	53, // 32: mruv.punishments.MruVPunishmentsService.WatchPlayerAcquittals:input_type -> mruv.punishments.WatchPlayerAcquittalsRequest
	57, // 33: mruv.punishments.MruVPunishmentsService.WatchPunishments:input_type -> mruv.punishments.WatchPunishmentsRequest
	11, // 34: mruv.punishments.MruVPunishmentsService.Ban:output_type -> mruv.punishments.BanResponse
	13, // 35: mruv.punishments.MruVPunishmentsService.Block:output_type -> mruv.punishments.BlockResponse
	15, // 36: mruv.punishments.MruVPunishmentsService.Warn:output_type -> mruv.punishments.WarnResponse
	17, // 37: mruv.punishments.MruVPunishmentsService.AdminJail:output_type -> mruv.punishments.AdminJailResponse
	19, // 38: mruv.punishments.MruVPunishmentsService.MuteGlobalChats:output_type -> mruv.punishments.MuteGlobalChatsResponse
	21, // 39: mruv.punishments.MruVPunishmentsService.UnBan:output_type -> mruv.punishments.UnBanResponse
	23, // 40: mruv.punishments.MruVPunishmentsService.UnBlock:output_type -> mruv.punishments.UnBlockResponse
	25, // 41: mruv.punishments.MruVPunishmentsService.UnWarn:output_type -> mruv.punishments.UnWarnResponse
	27, // 42: mruv.punishments.MruVPunishmentsService.UnAdminJail:output_type -> mruv.punishments.UnAdminJailResponse
	29, // 43: mruv.punishments.MruVPunishmentsService.UnMuteGlobalChats:output_type -> mruv.punishments.UnMuteGlobalChatsResponse
	31, // 44: mruv.punishments.MruVPunishmentsService.GetPlayerBans:output_type -> mruv.punishments.GetPlayerBansResponse
	33, // 45: mruv.punishments.MruVPunishmentsService.GetPlayerWarns:output_type -> mruv.punishments.GetPlayerWarnsResponse
	35, // 46: mruv.punishments.MruVPunishmentsService.GetPlayerAdminJail:output_type -> mruv.punishments.GetPlayerAdminJailResponse
	2,  // 47: mruv.punishments.MruVPunishmentsService.GetBan:output_type -> mruv.punishments.BanMessage
	3,  // 48: mruv.punishments.MruVPunishmentsService.GetWarn:output_type -> mruv.punishments.WarnMessage
	4,  // 49: mruv.punishments.MruVPunishmentsService.GetBlock:output_type -> mruv.punishments.BlockMessage
	40, // 50: mruv.punishments.MruVPunishmentsService.IsPlayerBanned:output_type -> mruv.punishments.IsPlayerBannedResponse
	42, // 51: mruv.punishments.MruVPunishmentsService.IsCharacterBlocked:output_type -> mruv.punishments.IsCharacterBlockedResponse
	44, // 52: mruv.punishments.MruVPunishmentsService.IsCharacterJailed:output_type -> mruv.punishments.IsCharacterJailedResponse
	2,  // 53: mruv.punishments.MruVPunishmentsService.WatchBans:output_type -> mruv.punishments.BanMessage
	4,  // 54: mruv.punishments.MruVPunishmentsService.WatchBlocks:output_type -> mruv.punishments.BlockMessage
	3,  // 55: mruv.punishments.MruVPunishmentsService.WatchWarns:output_type -> mruv.punishments.WarnMessage
	5,  // 56: mruv.punishments.MruVPunishmentsService.WatchAdminJails:output_type -> mruv.punishments.AdminJailMessage
	6,  // 57: mruv.punishments.MruVPunishmentsService.WatchUnBans:output_type -> mruv.punishments.UnBanMessage
	7,  // 58: mruv.punishments.MruVPunishmentsService.WatchUnBlocks:output_type -> mruv.punishments.UnBlockMessage
	8,  // 59: mruv.punishments.MruVPunishmentsService.WatchUnWarns:output_type -> mruv.punishments.UnWarnMessage
	9,  // 60: mruv.punishments.MruVPunishmentsService.WatchUnAdminJails:output_type -> mruv.punishments.UnAdminJailMessage
	56, // 61: mruv.punishments.MruVPunishmentsService.WatchPlayerPunishments:output_type -> mruv.punishments.WatchPlayerPunishmentsResponse
	54, // 62: mruv.punishments.MruVPunishmentsService.WatchPlayerAcquittals:output_type -> mruv.punishments.WatchPlayerAcquittalsResponse
	58, // 63: mruv.punishments.MruVPunishmentsService.WatchPunishments:output_type -> mruv.punishments.WatchPunishmentsResponse
	34, // [34:64] is the sub-list for method output_type
	4,  // [4:34] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_punishments_punishments_proto_init() }
func file_punishments_punishments_proto_init() {
	if File_punishments_punishments_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_punishments_punishments_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarnMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminJailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBanMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBlockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnWarnMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnAdminJailMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WarnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminJailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminJailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGlobalChatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MuteGlobalChatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnWarnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnWarnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnAdminJailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnAdminJailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnMuteGlobalChatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnMuteGlobalChatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerBansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerWarnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerWarnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerAdminJailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlayerAdminJailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWarnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPlayerBannedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsPlayerBannedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCharacterBlockedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCharacterBlockedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCharacterJailedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsCharacterJailedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchWarnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAdminJailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUnBansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUnBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUnWarnsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUnAdminJailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlayerAcquittalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlayerAcquittalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlayerPunishmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPlayerPunishmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPunishmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_punishments_punishments_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchPunishmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_punishments_punishments_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_punishments_punishments_proto_goTypes,
		DependencyIndexes: file_punishments_punishments_proto_depIdxs,
		EnumInfos:         file_punishments_punishments_proto_enumTypes,
		MessageInfos:      file_punishments_punishments_proto_msgTypes,
	}.Build()
	File_punishments_punishments_proto = out.File
	file_punishments_punishments_proto_rawDesc = nil
	file_punishments_punishments_proto_goTypes = nil
	file_punishments_punishments_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MruVPunishmentsServiceClient is the client API for MruVPunishmentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVPunishmentsServiceClient interface {
	// Ban player on account and/or ip.
	// If ban_time is 0, ban will never expire.
	Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error)
	// Block player character.
	Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	// Warn player.
	// If warn_time is 0, warn will never expire.
	Warn(ctx context.Context, in *WarnRequest, opts ...grpc.CallOption) (*WarnResponse, error)
	// Put player in an admin jail.
	AdminJail(ctx context.Context, in *AdminJailRequest, opts ...grpc.CallOption) (*AdminJailResponse, error)
	// Mute player global chats.
	MuteGlobalChats(ctx context.Context, in *MuteGlobalChatsRequest, opts ...grpc.CallOption) (*MuteGlobalChatsResponse, error)
	// Deactivate a specific player ban.
	UnBan(ctx context.Context, in *UnBanRequest, opts ...grpc.CallOption) (*UnBanResponse, error)
	// Deactivate a character block.
	UnBlock(ctx context.Context, in *UnBlockRequest, opts ...grpc.CallOption) (*UnBlockResponse, error)
	// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
	UnWarn(ctx context.Context, in *UnWarnRequest, opts ...grpc.CallOption) (*UnWarnResponse, error)
	// Remove player from admin jail.
	UnAdminJail(ctx context.Context, in *UnAdminJailRequest, opts ...grpc.CallOption) (*UnAdminJailResponse, error)
	//
	UnMuteGlobalChats(ctx context.Context, in *UnMuteGlobalChatsRequest, opts ...grpc.CallOption) (*UnMuteGlobalChatsResponse, error)
	// Get all player bans.
	GetPlayerBans(ctx context.Context, in *GetPlayerBansRequest, opts ...grpc.CallOption) (*GetPlayerBansResponse, error)
	// Get all player warns.
	GetPlayerWarns(ctx context.Context, in *GetPlayerWarnsRequest, opts ...grpc.CallOption) (*GetPlayerWarnsResponse, error)
	// Get player admin jail time.
	GetPlayerAdminJail(ctx context.Context, in *GetPlayerAdminJailRequest, opts ...grpc.CallOption) (*GetPlayerAdminJailResponse, error)
	// Get ban info.
	GetBan(ctx context.Context, in *GetBanRequest, opts ...grpc.CallOption) (*BanMessage, error)
	// Get warn info.
	GetWarn(ctx context.Context, in *GetWarnRequest, opts ...grpc.CallOption) (*WarnMessage, error)
	// Get block info.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockMessage, error)
	// Check is player or ip banned.
	IsPlayerBanned(ctx context.Context, in *IsPlayerBannedRequest, opts ...grpc.CallOption) (*IsPlayerBannedResponse, error)
	// Check is character is blocked.
	IsCharacterBlocked(ctx context.Context, in *IsCharacterBlockedRequest, opts ...grpc.CallOption) (*IsCharacterBlockedResponse, error)
	//
	IsCharacterJailed(ctx context.Context, in *IsCharacterJailedRequest, opts ...grpc.CallOption) (*IsCharacterJailedResponse, error)
	// Subscribe to ban events.
	WatchBans(ctx context.Context, in *WatchBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBansClient, error)
	// Subscribe to block events.
	WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBlocksClient, error)
	// Subscribe to warn events.
	WatchWarns(ctx context.Context, in *WatchWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchWarnsClient, error)
	// Subscribe to admin jail events.
	WatchAdminJails(ctx context.Context, in *WatchAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchAdminJailsClient, error)
	// Subscribe to unban events.
	WatchUnBans(ctx context.Context, in *WatchUnBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBansClient, error)
	// Subscribe to unblock events.
	WatchUnBlocks(ctx context.Context, in *WatchUnBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBlocksClient, error)
	// Subscribe to unwarn events.
	WatchUnWarns(ctx context.Context, in *WatchUnWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnWarnsClient, error)
	// Subscribe to admin jail release events.
	WatchUnAdminJails(ctx context.Context, in *WatchUnAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnAdminJailsClient, error)
	// Subscribe to player punishments.
	WatchPlayerPunishments(ctx context.Context, in *WatchPlayerPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerPunishmentsClient, error)
	// Subscribe to player acquittals.
	WatchPlayerAcquittals(ctx context.Context, in *WatchPlayerAcquittalsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerAcquittalsClient, error)
	// Subscribe to all punishments and acquittals events.
	WatchPunishments(ctx context.Context, in *WatchPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPunishmentsClient, error)
}

type mruVPunishmentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMruVPunishmentsServiceClient(cc grpc.ClientConnInterface) MruVPunishmentsServiceClient {
	return &mruVPunishmentsServiceClient{cc}
}

func (c *mruVPunishmentsServiceClient) Ban(ctx context.Context, in *BanRequest, opts ...grpc.CallOption) (*BanResponse, error) {
	out := new(BanResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Ban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) Block(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Block", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) Warn(ctx context.Context, in *WarnRequest, opts ...grpc.CallOption) (*WarnResponse, error) {
	out := new(WarnResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/Warn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) AdminJail(ctx context.Context, in *AdminJailRequest, opts ...grpc.CallOption) (*AdminJailResponse, error) {
	out := new(AdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/AdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) MuteGlobalChats(ctx context.Context, in *MuteGlobalChatsRequest, opts ...grpc.CallOption) (*MuteGlobalChatsResponse, error) {
	out := new(MuteGlobalChatsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/MuteGlobalChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnBan(ctx context.Context, in *UnBanRequest, opts ...grpc.CallOption) (*UnBanResponse, error) {
	out := new(UnBanResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnBlock(ctx context.Context, in *UnBlockRequest, opts ...grpc.CallOption) (*UnBlockResponse, error) {
	out := new(UnBlockResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnWarn(ctx context.Context, in *UnWarnRequest, opts ...grpc.CallOption) (*UnWarnResponse, error) {
	out := new(UnWarnResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnAdminJail(ctx context.Context, in *UnAdminJailRequest, opts ...grpc.CallOption) (*UnAdminJailResponse, error) {
	out := new(UnAdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnAdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) UnMuteGlobalChats(ctx context.Context, in *UnMuteGlobalChatsRequest, opts ...grpc.CallOption) (*UnMuteGlobalChatsResponse, error) {
	out := new(UnMuteGlobalChatsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/UnMuteGlobalChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerBans(ctx context.Context, in *GetPlayerBansRequest, opts ...grpc.CallOption) (*GetPlayerBansResponse, error) {
	out := new(GetPlayerBansResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerBans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerWarns(ctx context.Context, in *GetPlayerWarnsRequest, opts ...grpc.CallOption) (*GetPlayerWarnsResponse, error) {
	out := new(GetPlayerWarnsResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerWarns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetPlayerAdminJail(ctx context.Context, in *GetPlayerAdminJailRequest, opts ...grpc.CallOption) (*GetPlayerAdminJailResponse, error) {
	out := new(GetPlayerAdminJailResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetPlayerAdminJail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetBan(ctx context.Context, in *GetBanRequest, opts ...grpc.CallOption) (*BanMessage, error) {
	out := new(BanMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetBan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetWarn(ctx context.Context, in *GetWarnRequest, opts ...grpc.CallOption) (*WarnMessage, error) {
	out := new(WarnMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetWarn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*BlockMessage, error) {
	out := new(BlockMessage)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsPlayerBanned(ctx context.Context, in *IsPlayerBannedRequest, opts ...grpc.CallOption) (*IsPlayerBannedResponse, error) {
	out := new(IsPlayerBannedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsPlayerBanned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsCharacterBlocked(ctx context.Context, in *IsCharacterBlockedRequest, opts ...grpc.CallOption) (*IsCharacterBlockedResponse, error) {
	out := new(IsCharacterBlockedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsCharacterBlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) IsCharacterJailed(ctx context.Context, in *IsCharacterJailedRequest, opts ...grpc.CallOption) (*IsCharacterJailedResponse, error) {
	out := new(IsCharacterJailedResponse)
	err := c.cc.Invoke(ctx, "/mruv.punishments.MruVPunishmentsService/IsCharacterJailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPunishmentsServiceClient) WatchBans(ctx context.Context, in *WatchBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBansClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[0], "/mruv.punishments.MruVPunishmentsService/WatchBans", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchBansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchBansClient interface {
	Recv() (*BanMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchBansClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchBansClient) Recv() (*BanMessage, error) {
	m := new(BanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchBlocks(ctx context.Context, in *WatchBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[1], "/mruv.punishments.MruVPunishmentsService/WatchBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchBlocksClient interface {
	Recv() (*BlockMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchBlocksClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchBlocksClient) Recv() (*BlockMessage, error) {
	m := new(BlockMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchWarns(ctx context.Context, in *WatchWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchWarnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[2], "/mruv.punishments.MruVPunishmentsService/WatchWarns", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchWarnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchWarnsClient interface {
	Recv() (*WarnMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchWarnsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchWarnsClient) Recv() (*WarnMessage, error) {
	m := new(WarnMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchAdminJails(ctx context.Context, in *WatchAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchAdminJailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[3], "/mruv.punishments.MruVPunishmentsService/WatchAdminJails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchAdminJailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchAdminJailsClient interface {
	Recv() (*AdminJailMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchAdminJailsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchAdminJailsClient) Recv() (*AdminJailMessage, error) {
	m := new(AdminJailMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnBans(ctx context.Context, in *WatchUnBansRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBansClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[4], "/mruv.punishments.MruVPunishmentsService/WatchUnBans", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnBansClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnBansClient interface {
	Recv() (*UnBanMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnBansClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnBansClient) Recv() (*UnBanMessage, error) {
	m := new(UnBanMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnBlocks(ctx context.Context, in *WatchUnBlocksRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[5], "/mruv.punishments.MruVPunishmentsService/WatchUnBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnBlocksClient interface {
	Recv() (*UnBlockMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnBlocksClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnBlocksClient) Recv() (*UnBlockMessage, error) {
	m := new(UnBlockMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnWarns(ctx context.Context, in *WatchUnWarnsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnWarnsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[6], "/mruv.punishments.MruVPunishmentsService/WatchUnWarns", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnWarnsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnWarnsClient interface {
	Recv() (*UnWarnMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnWarnsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnWarnsClient) Recv() (*UnWarnMessage, error) {
	m := new(UnWarnMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchUnAdminJails(ctx context.Context, in *WatchUnAdminJailsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchUnAdminJailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[7], "/mruv.punishments.MruVPunishmentsService/WatchUnAdminJails", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchUnAdminJailsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchUnAdminJailsClient interface {
	Recv() (*UnAdminJailMessage, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchUnAdminJailsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchUnAdminJailsClient) Recv() (*UnAdminJailMessage, error) {
	m := new(UnAdminJailMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPlayerPunishments(ctx context.Context, in *WatchPlayerPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerPunishmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[8], "/mruv.punishments.MruVPunishmentsService/WatchPlayerPunishments", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPlayerPunishmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPlayerPunishmentsClient interface {
	Recv() (*WatchPlayerPunishmentsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPlayerPunishmentsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPlayerPunishmentsClient) Recv() (*WatchPlayerPunishmentsResponse, error) {
	m := new(WatchPlayerPunishmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPlayerAcquittals(ctx context.Context, in *WatchPlayerAcquittalsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPlayerAcquittalsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[9], "/mruv.punishments.MruVPunishmentsService/WatchPlayerAcquittals", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPlayerAcquittalsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPlayerAcquittalsClient interface {
	Recv() (*WatchPlayerAcquittalsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPlayerAcquittalsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPlayerAcquittalsClient) Recv() (*WatchPlayerAcquittalsResponse, error) {
	m := new(WatchPlayerAcquittalsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVPunishmentsServiceClient) WatchPunishments(ctx context.Context, in *WatchPunishmentsRequest, opts ...grpc.CallOption) (MruVPunishmentsService_WatchPunishmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVPunishmentsService_serviceDesc.Streams[10], "/mruv.punishments.MruVPunishmentsService/WatchPunishments", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVPunishmentsServiceWatchPunishmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVPunishmentsService_WatchPunishmentsClient interface {
	Recv() (*WatchPunishmentsResponse, error)
	grpc.ClientStream
}

type mruVPunishmentsServiceWatchPunishmentsClient struct {
	grpc.ClientStream
}

func (x *mruVPunishmentsServiceWatchPunishmentsClient) Recv() (*WatchPunishmentsResponse, error) {
	m := new(WatchPunishmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MruVPunishmentsServiceServer is the server API for MruVPunishmentsService service.
type MruVPunishmentsServiceServer interface {
	// Ban player on account and/or ip.
	// If ban_time is 0, ban will never expire.
	Ban(context.Context, *BanRequest) (*BanResponse, error)
	// Block player character.
	Block(context.Context, *BlockRequest) (*BlockResponse, error)
	// Warn player.
	// If warn_time is 0, warn will never expire.
	Warn(context.Context, *WarnRequest) (*WarnResponse, error)
	// Put player in an admin jail.
	AdminJail(context.Context, *AdminJailRequest) (*AdminJailResponse, error)
	// Mute player global chats.
	MuteGlobalChats(context.Context, *MuteGlobalChatsRequest) (*MuteGlobalChatsResponse, error)
	// Deactivate a specific player ban.
	UnBan(context.Context, *UnBanRequest) (*UnBanResponse, error)
	// Deactivate a character block.
	UnBlock(context.Context, *UnBlockRequest) (*UnBlockResponse, error)
	// Deactivate a specific player warning. If a player was banned by reaching the warning limit, a player will be unbanned.
	UnWarn(context.Context, *UnWarnRequest) (*UnWarnResponse, error)
	// Remove player from admin jail.
	UnAdminJail(context.Context, *UnAdminJailRequest) (*UnAdminJailResponse, error)
	//
	UnMuteGlobalChats(context.Context, *UnMuteGlobalChatsRequest) (*UnMuteGlobalChatsResponse, error)
	// Get all player bans.
	GetPlayerBans(context.Context, *GetPlayerBansRequest) (*GetPlayerBansResponse, error)
	// Get all player warns.
	GetPlayerWarns(context.Context, *GetPlayerWarnsRequest) (*GetPlayerWarnsResponse, error)
	// Get player admin jail time.
	GetPlayerAdminJail(context.Context, *GetPlayerAdminJailRequest) (*GetPlayerAdminJailResponse, error)
	// Get ban info.
	GetBan(context.Context, *GetBanRequest) (*BanMessage, error)
	// Get warn info.
	GetWarn(context.Context, *GetWarnRequest) (*WarnMessage, error)
	// Get block info.
	GetBlock(context.Context, *GetBlockRequest) (*BlockMessage, error)
	// Check is player or ip banned.
	IsPlayerBanned(context.Context, *IsPlayerBannedRequest) (*IsPlayerBannedResponse, error)
	// Check is character is blocked.
	IsCharacterBlocked(context.Context, *IsCharacterBlockedRequest) (*IsCharacterBlockedResponse, error)
	//
	IsCharacterJailed(context.Context, *IsCharacterJailedRequest) (*IsCharacterJailedResponse, error)
	// Subscribe to ban events.
	WatchBans(*WatchBansRequest, MruVPunishmentsService_WatchBansServer) error
	// Subscribe to block events.
	WatchBlocks(*WatchBlocksRequest, MruVPunishmentsService_WatchBlocksServer) error
	// Subscribe to warn events.
	WatchWarns(*WatchWarnsRequest, MruVPunishmentsService_WatchWarnsServer) error
	// Subscribe to admin jail events.
	WatchAdminJails(*WatchAdminJailsRequest, MruVPunishmentsService_WatchAdminJailsServer) error
	// Subscribe to unban events.
	WatchUnBans(*WatchUnBansRequest, MruVPunishmentsService_WatchUnBansServer) error
	// Subscribe to unblock events.
	WatchUnBlocks(*WatchUnBlocksRequest, MruVPunishmentsService_WatchUnBlocksServer) error
	// Subscribe to unwarn events.
	WatchUnWarns(*WatchUnWarnsRequest, MruVPunishmentsService_WatchUnWarnsServer) error
	// Subscribe to admin jail release events.
	WatchUnAdminJails(*WatchUnAdminJailsRequest, MruVPunishmentsService_WatchUnAdminJailsServer) error
	// Subscribe to player punishments.
	WatchPlayerPunishments(*WatchPlayerPunishmentsRequest, MruVPunishmentsService_WatchPlayerPunishmentsServer) error
	// Subscribe to player acquittals.
	WatchPlayerAcquittals(*WatchPlayerAcquittalsRequest, MruVPunishmentsService_WatchPlayerAcquittalsServer) error
	// Subscribe to all punishments and acquittals events.
	WatchPunishments(*WatchPunishmentsRequest, MruVPunishmentsService_WatchPunishmentsServer) error
}

// UnimplementedMruVPunishmentsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVPunishmentsServiceServer struct {
}

func (*UnimplementedMruVPunishmentsServiceServer) Ban(context.Context, *BanRequest) (*BanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) Block(context.Context, *BlockRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Block not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) Warn(context.Context, *WarnRequest) (*WarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) AdminJail(context.Context, *AdminJailRequest) (*AdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) MuteGlobalChats(context.Context, *MuteGlobalChatsRequest) (*MuteGlobalChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MuteGlobalChats not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnBan(context.Context, *UnBanRequest) (*UnBanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBan not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnBlock(context.Context, *UnBlockRequest) (*UnBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBlock not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnWarn(context.Context, *UnWarnRequest) (*UnWarnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWarn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnAdminJail(context.Context, *UnAdminJailRequest) (*UnAdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnAdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) UnMuteGlobalChats(context.Context, *UnMuteGlobalChatsRequest) (*UnMuteGlobalChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnMuteGlobalChats not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerBans(context.Context, *GetPlayerBansRequest) (*GetPlayerBansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerWarns(context.Context, *GetPlayerWarnsRequest) (*GetPlayerWarnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetPlayerAdminJail(context.Context, *GetPlayerAdminJailRequest) (*GetPlayerAdminJailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerAdminJail not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetBan(context.Context, *GetBanRequest) (*BanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBan not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetWarn(context.Context, *GetWarnRequest) (*WarnMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarn not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) GetBlock(context.Context, *GetBlockRequest) (*BlockMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsPlayerBanned(context.Context, *IsPlayerBannedRequest) (*IsPlayerBannedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPlayerBanned not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsCharacterBlocked(context.Context, *IsCharacterBlockedRequest) (*IsCharacterBlockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCharacterBlocked not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) IsCharacterJailed(context.Context, *IsCharacterJailedRequest) (*IsCharacterJailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCharacterJailed not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchBans(*WatchBansRequest, MruVPunishmentsService_WatchBansServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchBlocks(*WatchBlocksRequest, MruVPunishmentsService_WatchBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBlocks not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchWarns(*WatchWarnsRequest, MruVPunishmentsService_WatchWarnsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchAdminJails(*WatchAdminJailsRequest, MruVPunishmentsService_WatchAdminJailsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchAdminJails not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnBans(*WatchUnBansRequest, MruVPunishmentsService_WatchUnBansServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnBans not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnBlocks(*WatchUnBlocksRequest, MruVPunishmentsService_WatchUnBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnBlocks not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnWarns(*WatchUnWarnsRequest, MruVPunishmentsService_WatchUnWarnsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnWarns not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchUnAdminJails(*WatchUnAdminJailsRequest, MruVPunishmentsService_WatchUnAdminJailsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUnAdminJails not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPlayerPunishments(*WatchPlayerPunishmentsRequest, MruVPunishmentsService_WatchPlayerPunishmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPlayerPunishments not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPlayerAcquittals(*WatchPlayerAcquittalsRequest, MruVPunishmentsService_WatchPlayerAcquittalsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPlayerAcquittals not implemented")
}
func (*UnimplementedMruVPunishmentsServiceServer) WatchPunishments(*WatchPunishmentsRequest, MruVPunishmentsService_WatchPunishmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchPunishments not implemented")
}

func RegisterMruVPunishmentsServiceServer(s *grpc.Server, srv MruVPunishmentsServiceServer) {
	s.RegisterService(&_MruVPunishmentsService_serviceDesc, srv)
}

func _MruVPunishmentsService_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Ban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Ban(ctx, req.(*BanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_Block_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Block(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Block",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Block(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/Warn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).Warn(ctx, req.(*WarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_AdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).AdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/AdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).AdminJail(ctx, req.(*AdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_MuteGlobalChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MuteGlobalChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).MuteGlobalChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/MuteGlobalChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).MuteGlobalChats(ctx, req.(*MuteGlobalChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnBan(ctx, req.(*UnBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnBlock(ctx, req.(*UnBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnWarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnWarn(ctx, req.(*UnWarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnAdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnAdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnAdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnAdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnAdminJail(ctx, req.(*UnAdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_UnMuteGlobalChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnMuteGlobalChatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).UnMuteGlobalChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/UnMuteGlobalChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).UnMuteGlobalChats(ctx, req.(*UnMuteGlobalChatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerBans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerBansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerBans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerBans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerBans(ctx, req.(*GetPlayerBansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerWarns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerWarnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerWarns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerWarns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerWarns(ctx, req.(*GetPlayerWarnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetPlayerAdminJail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayerAdminJailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetPlayerAdminJail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetPlayerAdminJail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetPlayerAdminJail(ctx, req.(*GetPlayerAdminJailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetBan(ctx, req.(*GetBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWarnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetWarn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetWarn(ctx, req.(*GetWarnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsPlayerBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPlayerBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsPlayerBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsPlayerBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsPlayerBanned(ctx, req.(*IsPlayerBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsCharacterBlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCharacterBlockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsCharacterBlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsCharacterBlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsCharacterBlocked(ctx, req.(*IsCharacterBlockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_IsCharacterJailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCharacterJailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPunishmentsServiceServer).IsCharacterJailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.punishments.MruVPunishmentsService/IsCharacterJailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPunishmentsServiceServer).IsCharacterJailed(ctx, req.(*IsCharacterJailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPunishmentsService_WatchBans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBansRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchBans(m, &mruVPunishmentsServiceWatchBansServer{stream})
}

type MruVPunishmentsService_WatchBansServer interface {
	Send(*BanMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchBansServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchBansServer) Send(m *BanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchBlocks(m, &mruVPunishmentsServiceWatchBlocksServer{stream})
}

type MruVPunishmentsService_WatchBlocksServer interface {
	Send(*BlockMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchBlocksServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchBlocksServer) Send(m *BlockMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchWarns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchWarnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchWarns(m, &mruVPunishmentsServiceWatchWarnsServer{stream})
}

type MruVPunishmentsService_WatchWarnsServer interface {
	Send(*WarnMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchWarnsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchWarnsServer) Send(m *WarnMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchAdminJails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchAdminJailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchAdminJails(m, &mruVPunishmentsServiceWatchAdminJailsServer{stream})
}

type MruVPunishmentsService_WatchAdminJailsServer interface {
	Send(*AdminJailMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchAdminJailsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchAdminJailsServer) Send(m *AdminJailMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnBans_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnBansRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnBans(m, &mruVPunishmentsServiceWatchUnBansServer{stream})
}

type MruVPunishmentsService_WatchUnBansServer interface {
	Send(*UnBanMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnBansServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnBansServer) Send(m *UnBanMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnBlocks(m, &mruVPunishmentsServiceWatchUnBlocksServer{stream})
}

type MruVPunishmentsService_WatchUnBlocksServer interface {
	Send(*UnBlockMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnBlocksServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnBlocksServer) Send(m *UnBlockMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnWarns_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnWarnsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnWarns(m, &mruVPunishmentsServiceWatchUnWarnsServer{stream})
}

type MruVPunishmentsService_WatchUnWarnsServer interface {
	Send(*UnWarnMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnWarnsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnWarnsServer) Send(m *UnWarnMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchUnAdminJails_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUnAdminJailsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchUnAdminJails(m, &mruVPunishmentsServiceWatchUnAdminJailsServer{stream})
}

type MruVPunishmentsService_WatchUnAdminJailsServer interface {
	Send(*UnAdminJailMessage) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchUnAdminJailsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchUnAdminJailsServer) Send(m *UnAdminJailMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPlayerPunishments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPlayerPunishmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPlayerPunishments(m, &mruVPunishmentsServiceWatchPlayerPunishmentsServer{stream})
}

type MruVPunishmentsService_WatchPlayerPunishmentsServer interface {
	Send(*WatchPlayerPunishmentsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPlayerPunishmentsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPlayerPunishmentsServer) Send(m *WatchPlayerPunishmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPlayerAcquittals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPlayerAcquittalsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPlayerAcquittals(m, &mruVPunishmentsServiceWatchPlayerAcquittalsServer{stream})
}

type MruVPunishmentsService_WatchPlayerAcquittalsServer interface {
	Send(*WatchPlayerAcquittalsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPlayerAcquittalsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPlayerAcquittalsServer) Send(m *WatchPlayerAcquittalsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVPunishmentsService_WatchPunishments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchPunishmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVPunishmentsServiceServer).WatchPunishments(m, &mruVPunishmentsServiceWatchPunishmentsServer{stream})
}

type MruVPunishmentsService_WatchPunishmentsServer interface {
	Send(*WatchPunishmentsResponse) error
	grpc.ServerStream
}

type mruVPunishmentsServiceWatchPunishmentsServer struct {
	grpc.ServerStream
}

func (x *mruVPunishmentsServiceWatchPunishmentsServer) Send(m *WatchPunishmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MruVPunishmentsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.punishments.MruVPunishmentsService",
	HandlerType: (*MruVPunishmentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ban",
			Handler:    _MruVPunishmentsService_Ban_Handler,
		},
		{
			MethodName: "Block",
			Handler:    _MruVPunishmentsService_Block_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _MruVPunishmentsService_Warn_Handler,
		},
		{
			MethodName: "AdminJail",
			Handler:    _MruVPunishmentsService_AdminJail_Handler,
		},
		{
			MethodName: "MuteGlobalChats",
			Handler:    _MruVPunishmentsService_MuteGlobalChats_Handler,
		},
		{
			MethodName: "UnBan",
			Handler:    _MruVPunishmentsService_UnBan_Handler,
		},
		{
			MethodName: "UnBlock",
			Handler:    _MruVPunishmentsService_UnBlock_Handler,
		},
		{
			MethodName: "UnWarn",
			Handler:    _MruVPunishmentsService_UnWarn_Handler,
		},
		{
			MethodName: "UnAdminJail",
			Handler:    _MruVPunishmentsService_UnAdminJail_Handler,
		},
		{
			MethodName: "UnMuteGlobalChats",
			Handler:    _MruVPunishmentsService_UnMuteGlobalChats_Handler,
		},
		{
			MethodName: "GetPlayerBans",
			Handler:    _MruVPunishmentsService_GetPlayerBans_Handler,
		},
		{
			MethodName: "GetPlayerWarns",
			Handler:    _MruVPunishmentsService_GetPlayerWarns_Handler,
		},
		{
			MethodName: "GetPlayerAdminJail",
			Handler:    _MruVPunishmentsService_GetPlayerAdminJail_Handler,
		},
		{
			MethodName: "GetBan",
			Handler:    _MruVPunishmentsService_GetBan_Handler,
		},
		{
			MethodName: "GetWarn",
			Handler:    _MruVPunishmentsService_GetWarn_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _MruVPunishmentsService_GetBlock_Handler,
		},
		{
			MethodName: "IsPlayerBanned",
			Handler:    _MruVPunishmentsService_IsPlayerBanned_Handler,
		},
		{
			MethodName: "IsCharacterBlocked",
			Handler:    _MruVPunishmentsService_IsCharacterBlocked_Handler,
		},
		{
			MethodName: "IsCharacterJailed",
			Handler:    _MruVPunishmentsService_IsCharacterJailed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBans",
			Handler:       _MruVPunishmentsService_WatchBans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchBlocks",
			Handler:       _MruVPunishmentsService_WatchBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchWarns",
			Handler:       _MruVPunishmentsService_WatchWarns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAdminJails",
			Handler:       _MruVPunishmentsService_WatchAdminJails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnBans",
			Handler:       _MruVPunishmentsService_WatchUnBans_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnBlocks",
			Handler:       _MruVPunishmentsService_WatchUnBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnWarns",
			Handler:       _MruVPunishmentsService_WatchUnWarns_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchUnAdminJails",
			Handler:       _MruVPunishmentsService_WatchUnAdminJails_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPlayerPunishments",
			Handler:       _MruVPunishmentsService_WatchPlayerPunishments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPlayerAcquittals",
			Handler:       _MruVPunishmentsService_WatchPlayerAcquittals_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchPunishments",
			Handler:       _MruVPunishmentsService_WatchPunishments_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "punishments/punishments.proto",
}
