// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: plots/plots.proto

package plots

import (
	context "context"
	common "github.com/MruV-RP/mruv-pb-go/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Plot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Points      []*common.Position `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Plot) Reset() {
	*x = Plot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plot) ProtoMessage() {}

func (x *Plot) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plot.ProtoReflect.Descriptor instead.
func (*Plot) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{0}
}

func (x *Plot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plot) GetPoints() []*common.Position {
	if x != nil {
		return x.Points
	}
	return nil
}

// Request message for rpc `CreatePlot`.
type CreatePlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Points      []*common.Position `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *CreatePlotRequest) Reset() {
	*x = CreatePlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlotRequest) ProtoMessage() {}

func (x *CreatePlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlotRequest.ProtoReflect.Descriptor instead.
func (*CreatePlotRequest) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePlotRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlotRequest) GetPoints() []*common.Position {
	if x != nil {
		return x.Points
	}
	return nil
}

// Response message for rpc `CreatePlot`.
type CreatePlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreatePlotResponse) Reset() {
	*x = CreatePlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlotResponse) ProtoMessage() {}

func (x *CreatePlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlotResponse.ProtoReflect.Descriptor instead.
func (*CreatePlotResponse) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePlotResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `GetPlot`.
type GetPlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPlotRequest) Reset() {
	*x = GetPlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotRequest) ProtoMessage() {}

func (x *GetPlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotRequest.ProtoReflect.Descriptor instead.
func (*GetPlotRequest) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlotRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `GetPlot`.
type GetPlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Points      []*common.Position `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	Area        float64            `protobuf:"fixed64,4,opt,name=area,proto3" json:"area,omitempty"`
}

func (x *GetPlotResponse) Reset() {
	*x = GetPlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlotResponse) ProtoMessage() {}

func (x *GetPlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlotResponse.ProtoReflect.Descriptor instead.
func (*GetPlotResponse) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlotResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPlotResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetPlotResponse) GetPoints() []*common.Position {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *GetPlotResponse) GetArea() float64 {
	if x != nil {
		return x.Area
	}
	return 0
}

// Request message for rpc `UpdatePlot`.
type UpdatePlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdatePlotRequest) Reset() {
	*x = UpdatePlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlotRequest) ProtoMessage() {}

func (x *UpdatePlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlotRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlotRequest) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePlotRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePlotRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePlotRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Response message for rpc `UpdatePlot`.
type UpdatePlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePlotResponse) Reset() {
	*x = UpdatePlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlotResponse) ProtoMessage() {}

func (x *UpdatePlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlotResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlotResponse) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{6}
}

// Request message for rpc `DeletePlot`.
type DeletePlotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePlotRequest) Reset() {
	*x = DeletePlotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlotRequest) ProtoMessage() {}

func (x *DeletePlotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlotRequest.ProtoReflect.Descriptor instead.
func (*DeletePlotRequest) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePlotRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `DeletePlot`.
type DeletePlotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePlotResponse) Reset() {
	*x = DeletePlotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plots_plots_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlotResponse) ProtoMessage() {}

func (x *DeletePlotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plots_plots_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlotResponse.ProtoReflect.Descriptor instead.
func (*DeletePlotResponse) Descriptor() ([]byte, []int) {
	return file_plots_plots_proto_rawDescGZIP(), []int{8}
}

var File_plots_plots_proto protoreflect.FileDescriptor

var file_plots_plots_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x70, 0x61, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x6b, 0x0a, 0x04, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x78, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x22,
	0x59, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x03, 0x0a, 0x10,
	0x4d, 0x72, 0x75, 0x56, 0x50, 0x6c, 0x6f, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x61, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x1d,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x1a,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12,
	0x66, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x32, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x70, 0x6c, 0x6f, 0x74,
	0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x72, 0x75, 0x56, 0x2d,
	0x52, 0x50, 0x2f, 0x6d, 0x72, 0x75, 0x76, 0x2d, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x6c,
	0x6f, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plots_plots_proto_rawDescOnce sync.Once
	file_plots_plots_proto_rawDescData = file_plots_plots_proto_rawDesc
)

func file_plots_plots_proto_rawDescGZIP() []byte {
	file_plots_plots_proto_rawDescOnce.Do(func() {
		file_plots_plots_proto_rawDescData = protoimpl.X.CompressGZIP(file_plots_plots_proto_rawDescData)
	})
	return file_plots_plots_proto_rawDescData
}

var file_plots_plots_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_plots_plots_proto_goTypes = []interface{}{
	(*Plot)(nil),               // 0: mruv.plots.Plot
	(*CreatePlotRequest)(nil),  // 1: mruv.plots.CreatePlotRequest
	(*CreatePlotResponse)(nil), // 2: mruv.plots.CreatePlotResponse
	(*GetPlotRequest)(nil),     // 3: mruv.plots.GetPlotRequest
	(*GetPlotResponse)(nil),    // 4: mruv.plots.GetPlotResponse
	(*UpdatePlotRequest)(nil),  // 5: mruv.plots.UpdatePlotRequest
	(*UpdatePlotResponse)(nil), // 6: mruv.plots.UpdatePlotResponse
	(*DeletePlotRequest)(nil),  // 7: mruv.plots.DeletePlotRequest
	(*DeletePlotResponse)(nil), // 8: mruv.plots.DeletePlotResponse
	(*common.Position)(nil),    // 9: mruv.common.Position
}
var file_plots_plots_proto_depIdxs = []int32{
	9, // 0: mruv.plots.Plot.points:type_name -> mruv.common.Position
	9, // 1: mruv.plots.CreatePlotRequest.points:type_name -> mruv.common.Position
	9, // 2: mruv.plots.GetPlotResponse.points:type_name -> mruv.common.Position
	1, // 3: mruv.plots.MruVPlotsService.CreatePlot:input_type -> mruv.plots.CreatePlotRequest
	3, // 4: mruv.plots.MruVPlotsService.GetPlot:input_type -> mruv.plots.GetPlotRequest
	5, // 5: mruv.plots.MruVPlotsService.UpdatePlot:input_type -> mruv.plots.UpdatePlotRequest
	7, // 6: mruv.plots.MruVPlotsService.DeletePlot:input_type -> mruv.plots.DeletePlotRequest
	2, // 7: mruv.plots.MruVPlotsService.CreatePlot:output_type -> mruv.plots.CreatePlotResponse
	4, // 8: mruv.plots.MruVPlotsService.GetPlot:output_type -> mruv.plots.GetPlotResponse
	6, // 9: mruv.plots.MruVPlotsService.UpdatePlot:output_type -> mruv.plots.UpdatePlotResponse
	8, // 10: mruv.plots.MruVPlotsService.DeletePlot:output_type -> mruv.plots.DeletePlotResponse
	7, // [7:11] is the sub-list for method output_type
	3, // [3:7] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_plots_plots_proto_init() }
func file_plots_plots_proto_init() {
	if File_plots_plots_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plots_plots_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plots_plots_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plots_plots_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plots_plots_proto_goTypes,
		DependencyIndexes: file_plots_plots_proto_depIdxs,
		MessageInfos:      file_plots_plots_proto_msgTypes,
	}.Build()
	File_plots_plots_proto = out.File
	file_plots_plots_proto_rawDesc = nil
	file_plots_plots_proto_goTypes = nil
	file_plots_plots_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MruVPlotsServiceClient is the client API for MruVPlotsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVPlotsServiceClient interface {
	// Create a plot.
	CreatePlot(ctx context.Context, in *CreatePlotRequest, opts ...grpc.CallOption) (*CreatePlotResponse, error)
	// Get a plot.
	GetPlot(ctx context.Context, in *GetPlotRequest, opts ...grpc.CallOption) (*GetPlotResponse, error)
	// Update a plot.
	UpdatePlot(ctx context.Context, in *UpdatePlotRequest, opts ...grpc.CallOption) (*UpdatePlotResponse, error)
	// Delete a plot.
	DeletePlot(ctx context.Context, in *DeletePlotRequest, opts ...grpc.CallOption) (*DeletePlotResponse, error)
}

type mruVPlotsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMruVPlotsServiceClient(cc grpc.ClientConnInterface) MruVPlotsServiceClient {
	return &mruVPlotsServiceClient{cc}
}

func (c *mruVPlotsServiceClient) CreatePlot(ctx context.Context, in *CreatePlotRequest, opts ...grpc.CallOption) (*CreatePlotResponse, error) {
	out := new(CreatePlotResponse)
	err := c.cc.Invoke(ctx, "/mruv.plots.MruVPlotsService/CreatePlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPlotsServiceClient) GetPlot(ctx context.Context, in *GetPlotRequest, opts ...grpc.CallOption) (*GetPlotResponse, error) {
	out := new(GetPlotResponse)
	err := c.cc.Invoke(ctx, "/mruv.plots.MruVPlotsService/GetPlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPlotsServiceClient) UpdatePlot(ctx context.Context, in *UpdatePlotRequest, opts ...grpc.CallOption) (*UpdatePlotResponse, error) {
	out := new(UpdatePlotResponse)
	err := c.cc.Invoke(ctx, "/mruv.plots.MruVPlotsService/UpdatePlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVPlotsServiceClient) DeletePlot(ctx context.Context, in *DeletePlotRequest, opts ...grpc.CallOption) (*DeletePlotResponse, error) {
	out := new(DeletePlotResponse)
	err := c.cc.Invoke(ctx, "/mruv.plots.MruVPlotsService/DeletePlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MruVPlotsServiceServer is the server API for MruVPlotsService service.
type MruVPlotsServiceServer interface {
	// Create a plot.
	CreatePlot(context.Context, *CreatePlotRequest) (*CreatePlotResponse, error)
	// Get a plot.
	GetPlot(context.Context, *GetPlotRequest) (*GetPlotResponse, error)
	// Update a plot.
	UpdatePlot(context.Context, *UpdatePlotRequest) (*UpdatePlotResponse, error)
	// Delete a plot.
	DeletePlot(context.Context, *DeletePlotRequest) (*DeletePlotResponse, error)
}

// UnimplementedMruVPlotsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVPlotsServiceServer struct {
}

func (*UnimplementedMruVPlotsServiceServer) CreatePlot(context.Context, *CreatePlotRequest) (*CreatePlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlot not implemented")
}
func (*UnimplementedMruVPlotsServiceServer) GetPlot(context.Context, *GetPlotRequest) (*GetPlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlot not implemented")
}
func (*UnimplementedMruVPlotsServiceServer) UpdatePlot(context.Context, *UpdatePlotRequest) (*UpdatePlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlot not implemented")
}
func (*UnimplementedMruVPlotsServiceServer) DeletePlot(context.Context, *DeletePlotRequest) (*DeletePlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlot not implemented")
}

func RegisterMruVPlotsServiceServer(s *grpc.Server, srv MruVPlotsServiceServer) {
	s.RegisterService(&_MruVPlotsService_serviceDesc, srv)
}

func _MruVPlotsService_CreatePlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPlotsServiceServer).CreatePlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.plots.MruVPlotsService/CreatePlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPlotsServiceServer).CreatePlot(ctx, req.(*CreatePlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPlotsService_GetPlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPlotsServiceServer).GetPlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.plots.MruVPlotsService/GetPlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPlotsServiceServer).GetPlot(ctx, req.(*GetPlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPlotsService_UpdatePlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPlotsServiceServer).UpdatePlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.plots.MruVPlotsService/UpdatePlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPlotsServiceServer).UpdatePlot(ctx, req.(*UpdatePlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVPlotsService_DeletePlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVPlotsServiceServer).DeletePlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.plots.MruVPlotsService/DeletePlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVPlotsServiceServer).DeletePlot(ctx, req.(*DeletePlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MruVPlotsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.plots.MruVPlotsService",
	HandlerType: (*MruVPlotsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlot",
			Handler:    _MruVPlotsService_CreatePlot_Handler,
		},
		{
			MethodName: "GetPlot",
			Handler:    _MruVPlotsService_GetPlot_Handler,
		},
		{
			MethodName: "UpdatePlot",
			Handler:    _MruVPlotsService_UpdatePlot_Handler,
		},
		{
			MethodName: "DeletePlot",
			Handler:    _MruVPlotsService_DeletePlot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plots/plots.proto",
}
