// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: estates/estates.proto

package estates

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _estates_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Estate with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Estate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ProductId

	return nil
}

// EstateValidationError is the validation error returned by Estate.Validate if
// the designated constraints aren't met.
type EstateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstateValidationError) ErrorName() string { return "EstateValidationError" }

// Error satisfies the builtin error interface
func (e EstateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstateValidationError{}

// Validate checks the field values on CreateEstateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// CreateEstateRequestValidationError is the validation error returned by
// CreateEstateRequest.Validate if the designated constraints aren't met.
type CreateEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstateRequestValidationError) ErrorName() string {
	return "CreateEstateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstateRequestValidationError{}

// Validate checks the field values on CreateEstateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEstateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateEstateResponseValidationError is the validation error returned by
// CreateEstateResponse.Validate if the designated constraints aren't met.
type CreateEstateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEstateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEstateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEstateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEstateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEstateResponseValidationError) ErrorName() string {
	return "CreateEstateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEstateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEstateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEstateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEstateResponseValidationError{}

// Validate checks the field values on GetEstateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetEstateRequestValidationError is the validation error returned by
// GetEstateRequest.Validate if the designated constraints aren't met.
type GetEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstateRequestValidationError) ErrorName() string { return "GetEstateRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstateRequestValidationError{}

// Validate checks the field values on UpdateEstateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// UpdateEstateRequestValidationError is the validation error returned by
// UpdateEstateRequest.Validate if the designated constraints aren't met.
type UpdateEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstateRequestValidationError) ErrorName() string {
	return "UpdateEstateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstateRequestValidationError{}

// Validate checks the field values on UpdateEstateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateEstateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateEstateResponseValidationError is the validation error returned by
// UpdateEstateResponse.Validate if the designated constraints aren't met.
type UpdateEstateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEstateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEstateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEstateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEstateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEstateResponseValidationError) ErrorName() string {
	return "UpdateEstateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEstateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEstateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEstateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEstateResponseValidationError{}

// Validate checks the field values on DeleteEstateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteEstateRequestValidationError is the validation error returned by
// DeleteEstateRequest.Validate if the designated constraints aren't met.
type DeleteEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstateRequestValidationError) ErrorName() string {
	return "DeleteEstateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstateRequestValidationError{}

// Validate checks the field values on DeleteEstateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteEstateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteEstateResponseValidationError is the validation error returned by
// DeleteEstateResponse.Validate if the designated constraints aren't met.
type DeleteEstateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEstateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEstateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEstateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEstateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEstateResponseValidationError) ErrorName() string {
	return "DeleteEstateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEstateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEstateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEstateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEstateResponseValidationError{}

// Validate checks the field values on GetEstatesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEstatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for From

	// no validation rules for Limit

	return nil
}

// GetEstatesRequestValidationError is the validation error returned by
// GetEstatesRequest.Validate if the designated constraints aren't met.
type GetEstatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstatesRequestValidationError) ErrorName() string {
	return "GetEstatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstatesRequestValidationError{}

// Validate checks the field values on GetEstatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEstatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEstates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEstatesResponseValidationError{
					field:  fmt.Sprintf("Estates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEstatesResponseValidationError is the validation error returned by
// GetEstatesResponse.Validate if the designated constraints aren't met.
type GetEstatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstatesResponseValidationError) ErrorName() string {
	return "GetEstatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstatesResponseValidationError{}

// Validate checks the field values on AddGateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	// no validation rules for GateId

	return nil
}

// AddGateRequestValidationError is the validation error returned by
// AddGateRequest.Validate if the designated constraints aren't met.
type AddGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGateRequestValidationError) ErrorName() string { return "AddGateRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGateRequestValidationError{}

// Validate checks the field values on AddGateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddGateResponseValidationError is the validation error returned by
// AddGateResponse.Validate if the designated constraints aren't met.
type AddGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddGateResponseValidationError) ErrorName() string { return "AddGateResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddGateResponseValidationError{}

// Validate checks the field values on RemoveGateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	// no validation rules for GateId

	return nil
}

// RemoveGateRequestValidationError is the validation error returned by
// RemoveGateRequest.Validate if the designated constraints aren't met.
type RemoveGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGateRequestValidationError) ErrorName() string {
	return "RemoveGateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGateRequestValidationError{}

// Validate checks the field values on RemoveGateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveGateResponseValidationError is the validation error returned by
// RemoveGateResponse.Validate if the designated constraints aren't met.
type RemoveGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveGateResponseValidationError) ErrorName() string {
	return "RemoveGateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveGateResponseValidationError{}

// Validate checks the field values on GetEstateGatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEstateGatesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	return nil
}

// GetEstateGatesRequestValidationError is the validation error returned by
// GetEstateGatesRequest.Validate if the designated constraints aren't met.
type GetEstateGatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstateGatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstateGatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstateGatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstateGatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstateGatesRequestValidationError) ErrorName() string {
	return "GetEstateGatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstateGatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstateGatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstateGatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstateGatesRequestValidationError{}

// Validate checks the field values on GetEstateGatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEstateGatesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGates() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEstateGatesResponseValidationError{
					field:  fmt.Sprintf("Gates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEstateGatesResponseValidationError is the validation error returned by
// GetEstateGatesResponse.Validate if the designated constraints aren't met.
type GetEstateGatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstateGatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstateGatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstateGatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstateGatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstateGatesResponseValidationError) ErrorName() string {
	return "GetEstateGatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstateGatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstateGatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstateGatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstateGatesResponseValidationError{}

// Validate checks the field values on AddEntranceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddEntranceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	// no validation rules for EntranceId

	return nil
}

// AddEntranceRequestValidationError is the validation error returned by
// AddEntranceRequest.Validate if the designated constraints aren't met.
type AddEntranceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEntranceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEntranceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEntranceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEntranceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEntranceRequestValidationError) ErrorName() string {
	return "AddEntranceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddEntranceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEntranceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEntranceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEntranceRequestValidationError{}

// Validate checks the field values on AddEntranceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddEntranceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddEntranceResponseValidationError is the validation error returned by
// AddEntranceResponse.Validate if the designated constraints aren't met.
type AddEntranceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEntranceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEntranceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEntranceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEntranceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEntranceResponseValidationError) ErrorName() string {
	return "AddEntranceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddEntranceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEntranceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEntranceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEntranceResponseValidationError{}

// Validate checks the field values on RemoveEntranceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveEntranceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	// no validation rules for EntranceId

	return nil
}

// RemoveEntranceRequestValidationError is the validation error returned by
// RemoveEntranceRequest.Validate if the designated constraints aren't met.
type RemoveEntranceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEntranceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEntranceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEntranceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEntranceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEntranceRequestValidationError) ErrorName() string {
	return "RemoveEntranceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEntranceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEntranceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEntranceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEntranceRequestValidationError{}

// Validate checks the field values on RemoveEntranceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveEntranceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveEntranceResponseValidationError is the validation error returned by
// RemoveEntranceResponse.Validate if the designated constraints aren't met.
type RemoveEntranceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEntranceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEntranceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEntranceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEntranceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEntranceResponseValidationError) ErrorName() string {
	return "RemoveEntranceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEntranceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEntranceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEntranceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEntranceResponseValidationError{}

// Validate checks the field values on GetEstateEntrancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEstateEntrancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateId

	return nil
}

// GetEstateEntrancesRequestValidationError is the validation error returned by
// GetEstateEntrancesRequest.Validate if the designated constraints aren't met.
type GetEstateEntrancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstateEntrancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstateEntrancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstateEntrancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstateEntrancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstateEntrancesRequestValidationError) ErrorName() string {
	return "GetEstateEntrancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstateEntrancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstateEntrancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstateEntrancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstateEntrancesRequestValidationError{}

// Validate checks the field values on GetEstateEntrancesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetEstateEntrancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEntrances() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEstateEntrancesResponseValidationError{
					field:  fmt.Sprintf("Entrances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetEstateEntrancesResponseValidationError is the validation error returned
// by GetEstateEntrancesResponse.Validate if the designated constraints aren't met.
type GetEstateEntrancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEstateEntrancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEstateEntrancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEstateEntrancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEstateEntrancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEstateEntrancesResponseValidationError) ErrorName() string {
	return "GetEstateEntrancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEstateEntrancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEstateEntrancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEstateEntrancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEstateEntrancesResponseValidationError{}
