// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: items/items.proto

package items

import (
	context "context"
	common "github.com/MruV-RP/mruv-pb-go/common"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for `MruVItemsService.GetItems`.
type GetItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit of the returned items.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetItemsRequest) Reset() {
	*x = GetItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemsRequest) ProtoMessage() {}

func (x *GetItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemsRequest.ProtoReflect.Descriptor instead.
func (*GetItemsRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{0}
}

func (x *GetItemsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Response message for `MruVItemsService.GetItems`.
type GetItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of items.
	Items []*Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetItemsResponse) Reset() {
	*x = GetItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemsResponse) ProtoMessage() {}

func (x *GetItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemsResponse.ProtoReflect.Descriptor instead.
func (*GetItemsResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{1}
}

func (x *GetItemsResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

// Request message for `MruVItemsService.GetItemTypes`.
type GetItemTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limit of the returned item types.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetItemTypesRequest) Reset() {
	*x = GetItemTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTypesRequest) ProtoMessage() {}

func (x *GetItemTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTypesRequest.ProtoReflect.Descriptor instead.
func (*GetItemTypesRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{2}
}

func (x *GetItemTypesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

//Response message for `MruVItemsService.GetItemTypes`.
type GetItemTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//List of item types.
	ItemTypes []*ItemType `protobuf:"bytes,1,rep,name=item_types,json=itemTypes,proto3" json:"item_types,omitempty"`
}

func (x *GetItemTypesResponse) Reset() {
	*x = GetItemTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetItemTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetItemTypesResponse) ProtoMessage() {}

func (x *GetItemTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetItemTypesResponse.ProtoReflect.Descriptor instead.
func (*GetItemTypesResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{3}
}

func (x *GetItemTypesResponse) GetItemTypes() []*ItemType {
	if x != nil {
		return x.ItemTypes
	}
	return nil
}

//Request message for `MruVItemsService.GetContainers`.
type GetContainersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Limit of the returned containers.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetContainersRequest) Reset() {
	*x = GetContainersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainersRequest) ProtoMessage() {}

func (x *GetContainersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainersRequest.ProtoReflect.Descriptor instead.
func (*GetContainersRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{4}
}

func (x *GetContainersRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

//Response message for `MruVItemsService.GetContainers`.
type GetContainersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//List of containers.
	Containers []*Container `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (x *GetContainersResponse) Reset() {
	*x = GetContainersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainersResponse) ProtoMessage() {}

func (x *GetContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainersResponse.ProtoReflect.Descriptor instead.
func (*GetContainersResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{5}
}

func (x *GetContainersResponse) GetContainers() []*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

//Request message for `MruVItemsService.GetContainerTypes`.
type GetContainerTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Limit of the returned container types.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetContainerTypesRequest) Reset() {
	*x = GetContainerTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerTypesRequest) ProtoMessage() {}

func (x *GetContainerTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerTypesRequest.ProtoReflect.Descriptor instead.
func (*GetContainerTypesRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{6}
}

func (x *GetContainerTypesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

//Response message for `MruVItemsService.GetContainers`.
type GetContainerTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//List of container types.
	ContainerTypes []*ContainerType `protobuf:"bytes,1,rep,name=container_types,json=containerTypes,proto3" json:"container_types,omitempty"`
}

func (x *GetContainerTypesResponse) Reset() {
	*x = GetContainerTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerTypesResponse) ProtoMessage() {}

func (x *GetContainerTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerTypesResponse.ProtoReflect.Descriptor instead.
func (*GetContainerTypesResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{7}
}

func (x *GetContainerTypesResponse) GetContainerTypes() []*ContainerType {
	if x != nil {
		return x.ContainerTypes
	}
	return nil
}

//Request message for `MruVItemsService.PutItem`.
type PutItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ID of container where to put item.
	ContainerId uint32 `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	//ID of item we wan to put in.
	ItemId uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
	// Types that are assignable to Where:
	//	*PutItemRequest_Slot
	Where isPutItemRequest_Where `protobuf_oneof:"where"`
}

func (x *PutItemRequest) Reset() {
	*x = PutItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutItemRequest) ProtoMessage() {}

func (x *PutItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutItemRequest.ProtoReflect.Descriptor instead.
func (*PutItemRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{8}
}

func (x *PutItemRequest) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *PutItemRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (m *PutItemRequest) GetWhere() isPutItemRequest_Where {
	if m != nil {
		return m.Where
	}
	return nil
}

func (x *PutItemRequest) GetSlot() int32 {
	if x, ok := x.GetWhere().(*PutItemRequest_Slot); ok {
		return x.Slot
	}
	return 0
}

type isPutItemRequest_Where interface {
	isPutItemRequest_Where()
}

type PutItemRequest_Slot struct {
	//Position used for sorting items
	Slot int32 `protobuf:"varint,3,opt,name=slot,proto3,oneof"`
}

func (*PutItemRequest_Slot) isPutItemRequest_Where() {}

//Response message for `MruVItemsService.PutItem`
type PutItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Container with items inside.
	InsideItem *InsideItem `protobuf:"bytes,1,opt,name=inside_item,json=insideItem,proto3" json:"inside_item,omitempty"`
}

func (x *PutItemResponse) Reset() {
	*x = PutItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutItemResponse) ProtoMessage() {}

func (x *PutItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutItemResponse.ProtoReflect.Descriptor instead.
func (*PutItemResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{9}
}

func (x *PutItemResponse) GetInsideItem() *InsideItem {
	if x != nil {
		return x.InsideItem
	}
	return nil
}

//Request message for `MruVItemsService.GetContainerItems`.
type GetContainerItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ID of container with items.
	ContainerId uint32 `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	//Limit of the returned items.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetContainerItemsRequest) Reset() {
	*x = GetContainerItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerItemsRequest) ProtoMessage() {}

func (x *GetContainerItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerItemsRequest.ProtoReflect.Descriptor instead.
func (*GetContainerItemsRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{10}
}

func (x *GetContainerItemsRequest) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *GetContainerItemsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

//Request message for `MruVItemsService.GetContainerItems`.
type GetContainerItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//List of items inside containers.
	Items []*InsideItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *GetContainerItemsResponse) Reset() {
	*x = GetContainerItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContainerItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContainerItemsResponse) ProtoMessage() {}

func (x *GetContainerItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContainerItemsResponse.ProtoReflect.Descriptor instead.
func (*GetContainerItemsResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{11}
}

func (x *GetContainerItemsResponse) GetItems() []*InsideItem {
	if x != nil {
		return x.Items
	}
	return nil
}

//Request message for `MruVItemsService.PullItem`.
type PullItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ID of the container from which we pull out a item.
	ContainerId uint32 `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	//ID of the item we want to pull out.
	//That item must be inside the container.
	ItemId uint32 `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *PullItemRequest) Reset() {
	*x = PullItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullItemRequest) ProtoMessage() {}

func (x *PullItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullItemRequest.ProtoReflect.Descriptor instead.
func (*PullItemRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{12}
}

func (x *PullItemRequest) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *PullItemRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

//Request message for `MruVItemsService.SortItems`.
type SortItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//ID of the container which contain items.
	ContainerId uint32 `protobuf:"varint,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	//Sorting mode.
	SortBy SortingMode `protobuf:"varint,2,opt,name=sort_by,json=sortBy,proto3,enum=mruv.SortingMode" json:"sort_by,omitempty"`
}

func (x *SortItemsRequest) Reset() {
	*x = SortItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortItemsRequest) ProtoMessage() {}

func (x *SortItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortItemsRequest.ProtoReflect.Descriptor instead.
func (*SortItemsRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{13}
}

func (x *SortItemsRequest) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *SortItemsRequest) GetSortBy() SortingMode {
	if x != nil {
		return x.SortBy
	}
	return SortingMode_UNKNOWN
}

//Response message for `MruVItemsService.SortItems`.
type SortItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Container with sorted items inside.
	Container *Container `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *SortItemsResponse) Reset() {
	*x = SortItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortItemsResponse) ProtoMessage() {}

func (x *SortItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortItemsResponse.ProtoReflect.Descriptor instead.
func (*SortItemsResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{14}
}

func (x *SortItemsResponse) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

//Request message for `MruVItemsService.GetNearestItems`.
type GetNearestItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Position from which to calculate the distance
	Position *common.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	//ID of container that contains items.
	ContainerId uint32 `protobuf:"varint,2,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	//The distance over which the items are ignored.
	DistanceLimit float64 `protobuf:"fixed64,3,opt,name=distance_limit,json=distanceLimit,proto3" json:"distance_limit,omitempty"`
}

func (x *GetNearestItemsRequest) Reset() {
	*x = GetNearestItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearestItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearestItemsRequest) ProtoMessage() {}

func (x *GetNearestItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearestItemsRequest.ProtoReflect.Descriptor instead.
func (*GetNearestItemsRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{15}
}

func (x *GetNearestItemsRequest) GetPosition() *common.Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *GetNearestItemsRequest) GetContainerId() uint32 {
	if x != nil {
		return x.ContainerId
	}
	return 0
}

func (x *GetNearestItemsRequest) GetDistanceLimit() float64 {
	if x != nil {
		return x.DistanceLimit
	}
	return 0
}

//Response message for `MruVItemsService.GetNearestItems`.
type GetNearestItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//List of items sorted from nearest to farthest.
	Item []*InsideItem `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *GetNearestItemsResponse) Reset() {
	*x = GetNearestItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearestItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearestItemsResponse) ProtoMessage() {}

func (x *GetNearestItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearestItemsResponse.ProtoReflect.Descriptor instead.
func (*GetNearestItemsResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{16}
}

func (x *GetNearestItemsResponse) GetItem() []*InsideItem {
	if x != nil {
		return x.Item
	}
	return nil
}

//Request message for `MruVItemsService.UseItem`.
type UseItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId uint32 `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *UseItemRequest) Reset() {
	*x = UseItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseItemRequest) ProtoMessage() {}

func (x *UseItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseItemRequest.ProtoReflect.Descriptor instead.
func (*UseItemRequest) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{17}
}

func (x *UseItemRequest) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

//Response message for `MruVItemsService.UseItem`.
type UseItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//Is item usage was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UseItemResponse) Reset() {
	*x = UseItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_items_items_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseItemResponse) ProtoMessage() {}

func (x *UseItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_items_items_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseItemResponse.ProtoReflect.Descriptor instead.
func (*UseItemResponse) Descriptor() ([]byte, []int) {
	return file_items_items_proto_rawDescGZIP(), []int{18}
}

func (x *UseItemResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_items_items_proto protoreflect.FileDescriptor

var file_items_items_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x72, 0x75, 0x76, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x70,
	0x61, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x34, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x2c,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x48, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x22, 0x44, 0x0a, 0x0f, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0x4d, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x22,
	0x61, 0x0a, 0x10, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74,
	0x42, 0x79, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x61, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x61, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x29, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x32, 0xf4, 0x11, 0x0a, 0x0f, 0x4d, 0x72, 0x75, 0x56, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x0a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x1a, 0x0c,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x11, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0b, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x3b, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0c, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x1a, 0x0a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x40, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0c, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x4c,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x15, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0b, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x10,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x50, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x2a, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x19, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x22, 0x16, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x0f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0x54, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x60, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x22,
	0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x1a, 0x13, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x64, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x1a, 0x15, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x2a, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x70, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1e, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x64, 0x0a, 0x08, 0x50, 0x75, 0x6c, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x50, 0x75, 0x6c, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x2a,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6d,
	0x0a, 0x07, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x50, 0x75, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x1a, 0x2d,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x78, 0x0a,
	0x09, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x73,
	0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5a,
	0x12, 0x58, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x2f, 0x78, 0x2f,
	0x7b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x7d, 0x2f, 0x79, 0x2f, 0x7b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x79, 0x7d, 0x2f, 0x7a, 0x2f, 0x7b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x7a, 0x7d, 0x12, 0x57, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x55, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x55, 0x73, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x75, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x72, 0x75, 0x56, 0x2d, 0x52, 0x50, 0x2f, 0x6d, 0x72,
	0x75, 0x76, 0x2d, 0x70, 0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_items_items_proto_rawDescOnce sync.Once
	file_items_items_proto_rawDescData = file_items_items_proto_rawDesc
)

func file_items_items_proto_rawDescGZIP() []byte {
	file_items_items_proto_rawDescOnce.Do(func() {
		file_items_items_proto_rawDescData = protoimpl.X.CompressGZIP(file_items_items_proto_rawDescData)
	})
	return file_items_items_proto_rawDescData
}

var file_items_items_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_items_items_proto_goTypes = []interface{}{
	(*GetItemsRequest)(nil),              // 0: mruv.GetItemsRequest
	(*GetItemsResponse)(nil),             // 1: mruv.GetItemsResponse
	(*GetItemTypesRequest)(nil),          // 2: mruv.GetItemTypesRequest
	(*GetItemTypesResponse)(nil),         // 3: mruv.GetItemTypesResponse
	(*GetContainersRequest)(nil),         // 4: mruv.GetContainersRequest
	(*GetContainersResponse)(nil),        // 5: mruv.GetContainersResponse
	(*GetContainerTypesRequest)(nil),     // 6: mruv.GetContainerTypesRequest
	(*GetContainerTypesResponse)(nil),    // 7: mruv.GetContainerTypesResponse
	(*PutItemRequest)(nil),               // 8: mruv.PutItemRequest
	(*PutItemResponse)(nil),              // 9: mruv.PutItemResponse
	(*GetContainerItemsRequest)(nil),     // 10: mruv.GetContainerItemsRequest
	(*GetContainerItemsResponse)(nil),    // 11: mruv.GetContainerItemsResponse
	(*PullItemRequest)(nil),              // 12: mruv.PullItemRequest
	(*SortItemsRequest)(nil),             // 13: mruv.SortItemsRequest
	(*SortItemsResponse)(nil),            // 14: mruv.SortItemsResponse
	(*GetNearestItemsRequest)(nil),       // 15: mruv.GetNearestItemsRequest
	(*GetNearestItemsResponse)(nil),      // 16: mruv.GetNearestItemsResponse
	(*UseItemRequest)(nil),               // 17: mruv.UseItemRequest
	(*UseItemResponse)(nil),              // 18: mruv.UseItemResponse
	(*Item)(nil),                         // 19: mruv.Item
	(*ItemType)(nil),                     // 20: mruv.ItemType
	(*Container)(nil),                    // 21: mruv.Container
	(*ContainerType)(nil),                // 22: mruv.ContainerType
	(*InsideItem)(nil),                   // 23: mruv.InsideItem
	(SortingMode)(0),                     // 24: mruv.SortingMode
	(*common.Position)(nil),              // 25: mruv.Position
	(*ItemID)(nil),                       // 26: mruv.ItemID
	(*ItemTypeID)(nil),                   // 27: mruv.ItemTypeID
	(*ContainerID)(nil),                  // 28: mruv.ContainerID
	(*ContainerTypeID)(nil),              // 29: mruv.ContainerTypeID
	(*common.ServiceStatusRequest)(nil),  // 30: mruv.ServiceStatusRequest
	(*common.VersionRequest)(nil),        // 31: mruv.VersionRequest
	(*common.ServiceStatusResponse)(nil), // 32: mruv.ServiceStatusResponse
	(*common.VersionResponse)(nil),       // 33: mruv.VersionResponse
}
var file_items_items_proto_depIdxs = []int32{
	19, // 0: mruv.GetItemsResponse.items:type_name -> mruv.Item
	20, // 1: mruv.GetItemTypesResponse.item_types:type_name -> mruv.ItemType
	21, // 2: mruv.GetContainersResponse.containers:type_name -> mruv.Container
	22, // 3: mruv.GetContainerTypesResponse.container_types:type_name -> mruv.ContainerType
	23, // 4: mruv.PutItemResponse.inside_item:type_name -> mruv.InsideItem
	23, // 5: mruv.GetContainerItemsResponse.items:type_name -> mruv.InsideItem
	24, // 6: mruv.SortItemsRequest.sort_by:type_name -> mruv.SortingMode
	21, // 7: mruv.SortItemsResponse.container:type_name -> mruv.Container
	25, // 8: mruv.GetNearestItemsRequest.position:type_name -> mruv.Position
	23, // 9: mruv.GetNearestItemsResponse.item:type_name -> mruv.InsideItem
	19, // 10: mruv.MruVItemService.CreateItem:input_type -> mruv.Item
	26, // 11: mruv.MruVItemService.GetItem:input_type -> mruv.ItemID
	26, // 12: mruv.MruVItemService.DeleteItem:input_type -> mruv.ItemID
	0,  // 13: mruv.MruVItemService.GetItems:input_type -> mruv.GetItemsRequest
	20, // 14: mruv.MruVItemService.CreateItemType:input_type -> mruv.ItemType
	27, // 15: mruv.MruVItemService.GetItemType:input_type -> mruv.ItemTypeID
	27, // 16: mruv.MruVItemService.DeleteItemType:input_type -> mruv.ItemTypeID
	2,  // 17: mruv.MruVItemService.GetItemTypes:input_type -> mruv.GetItemTypesRequest
	21, // 18: mruv.MruVItemService.CreateContainer:input_type -> mruv.Container
	28, // 19: mruv.MruVItemService.GetContainer:input_type -> mruv.ContainerID
	28, // 20: mruv.MruVItemService.DeleteContainer:input_type -> mruv.ContainerID
	4,  // 21: mruv.MruVItemService.GetContainers:input_type -> mruv.GetContainersRequest
	22, // 22: mruv.MruVItemService.CreateContainerType:input_type -> mruv.ContainerType
	29, // 23: mruv.MruVItemService.GetContainerType:input_type -> mruv.ContainerTypeID
	29, // 24: mruv.MruVItemService.DeleteContainerType:input_type -> mruv.ContainerTypeID
	6,  // 25: mruv.MruVItemService.GetContainerTypes:input_type -> mruv.GetContainerTypesRequest
	10, // 26: mruv.MruVItemService.GetContainerItems:input_type -> mruv.GetContainerItemsRequest
	12, // 27: mruv.MruVItemService.PullItem:input_type -> mruv.PullItemRequest
	8,  // 28: mruv.MruVItemService.PutItem:input_type -> mruv.PutItemRequest
	13, // 29: mruv.MruVItemService.SortItems:input_type -> mruv.SortItemsRequest
	15, // 30: mruv.MruVItemService.GetNearestItems:input_type -> mruv.GetNearestItemsRequest
	17, // 31: mruv.MruVItemService.UseItem:input_type -> mruv.UseItemRequest
	30, // 32: mruv.MruVItemService.GetServiceStatus:input_type -> mruv.ServiceStatusRequest
	31, // 33: mruv.MruVItemService.GetServiceVersion:input_type -> mruv.VersionRequest
	26, // 34: mruv.MruVItemService.CreateItem:output_type -> mruv.ItemID
	19, // 35: mruv.MruVItemService.GetItem:output_type -> mruv.Item
	26, // 36: mruv.MruVItemService.DeleteItem:output_type -> mruv.ItemID
	1,  // 37: mruv.MruVItemService.GetItems:output_type -> mruv.GetItemsResponse
	27, // 38: mruv.MruVItemService.CreateItemType:output_type -> mruv.ItemTypeID
	20, // 39: mruv.MruVItemService.GetItemType:output_type -> mruv.ItemType
	27, // 40: mruv.MruVItemService.DeleteItemType:output_type -> mruv.ItemTypeID
	3,  // 41: mruv.MruVItemService.GetItemTypes:output_type -> mruv.GetItemTypesResponse
	28, // 42: mruv.MruVItemService.CreateContainer:output_type -> mruv.ContainerID
	21, // 43: mruv.MruVItemService.GetContainer:output_type -> mruv.Container
	28, // 44: mruv.MruVItemService.DeleteContainer:output_type -> mruv.ContainerID
	5,  // 45: mruv.MruVItemService.GetContainers:output_type -> mruv.GetContainersResponse
	29, // 46: mruv.MruVItemService.CreateContainerType:output_type -> mruv.ContainerTypeID
	22, // 47: mruv.MruVItemService.GetContainerType:output_type -> mruv.ContainerType
	29, // 48: mruv.MruVItemService.DeleteContainerType:output_type -> mruv.ContainerTypeID
	7,  // 49: mruv.MruVItemService.GetContainerTypes:output_type -> mruv.GetContainerTypesResponse
	11, // 50: mruv.MruVItemService.GetContainerItems:output_type -> mruv.GetContainerItemsResponse
	19, // 51: mruv.MruVItemService.PullItem:output_type -> mruv.Item
	9,  // 52: mruv.MruVItemService.PutItem:output_type -> mruv.PutItemResponse
	14, // 53: mruv.MruVItemService.SortItems:output_type -> mruv.SortItemsResponse
	16, // 54: mruv.MruVItemService.GetNearestItems:output_type -> mruv.GetNearestItemsResponse
	18, // 55: mruv.MruVItemService.UseItem:output_type -> mruv.UseItemResponse
	32, // 56: mruv.MruVItemService.GetServiceStatus:output_type -> mruv.ServiceStatusResponse
	33, // 57: mruv.MruVItemService.GetServiceVersion:output_type -> mruv.VersionResponse
	34, // [34:58] is the sub-list for method output_type
	10, // [10:34] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_items_items_proto_init() }
func file_items_items_proto_init() {
	if File_items_items_proto != nil {
		return
	}
	file_items_items_model_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_items_items_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetItemTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContainerItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearestItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearestItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_items_items_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_items_items_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*PutItemRequest_Slot)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_items_items_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_items_items_proto_goTypes,
		DependencyIndexes: file_items_items_proto_depIdxs,
		MessageInfos:      file_items_items_proto_msgTypes,
	}.Build()
	File_items_items_proto = out.File
	file_items_items_proto_rawDesc = nil
	file_items_items_proto_goTypes = nil
	file_items_items_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MruVItemServiceClient is the client API for MruVItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVItemServiceClient interface {
	// Create new item.
	CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemID, error)
	// Get item by id.
	GetItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error)
	// Delete item by id.
	DeleteItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ItemID, error)
	// Gets all items.
	GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error)
	// Create item type.
	CreateItemType(ctx context.Context, in *ItemType, opts ...grpc.CallOption) (*ItemTypeID, error)
	// Get item type by id.
	GetItemType(ctx context.Context, in *ItemTypeID, opts ...grpc.CallOption) (*ItemType, error)
	// Delete item type by id.
	DeleteItemType(ctx context.Context, in *ItemTypeID, opts ...grpc.CallOption) (*ItemTypeID, error)
	// Gets all item types.
	GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesResponse, error)
	// Create container.
	CreateContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*ContainerID, error)
	// Get container by id.
	GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error)
	// Delete container by id.
	DeleteContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*ContainerID, error)
	// Get all containers.
	GetContainers(ctx context.Context, in *GetContainersRequest, opts ...grpc.CallOption) (*GetContainersResponse, error)
	// Create a container type.
	CreateContainerType(ctx context.Context, in *ContainerType, opts ...grpc.CallOption) (*ContainerTypeID, error)
	// Get a container type by id.
	GetContainerType(ctx context.Context, in *ContainerTypeID, opts ...grpc.CallOption) (*ContainerType, error)
	// Delete a container type by id.
	DeleteContainerType(ctx context.Context, in *ContainerTypeID, opts ...grpc.CallOption) (*ContainerTypeID, error)
	// Get all container types.
	GetContainerTypes(ctx context.Context, in *GetContainerTypesRequest, opts ...grpc.CallOption) (*GetContainerTypesResponse, error)
	// Get items inside a container.
	GetContainerItems(ctx context.Context, in *GetContainerItemsRequest, opts ...grpc.CallOption) (*GetContainerItemsResponse, error)
	// Pull an item from container.
	PullItem(ctx context.Context, in *PullItemRequest, opts ...grpc.CallOption) (*Item, error)
	// Put an item into container.
	PutItem(ctx context.Context, in *PutItemRequest, opts ...grpc.CallOption) (*PutItemResponse, error)
	// Sort items inside container.
	// This procedure change order of items inside container.
	SortItems(ctx context.Context, in *SortItemsRequest, opts ...grpc.CallOption) (*SortItemsResponse, error)
	// Retrieves from the container the list of items nearest to the given position.
	GetNearestItems(ctx context.Context, in *GetNearestItemsRequest, opts ...grpc.CallOption) (*GetNearestItemsResponse, error)
	// Trigger action associated with the item usage.
	UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error)
	// Get service health status.
	GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error)
	//Get service current version.
	GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error)
}

type mruVItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMruVItemServiceClient(cc grpc.ClientConnInterface) MruVItemServiceClient {
	return &mruVItemServiceClient{cc}
}

func (c *mruVItemServiceClient) CreateItem(ctx context.Context, in *Item, opts ...grpc.CallOption) (*ItemID, error) {
	out := new(ItemID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) DeleteItem(ctx context.Context, in *ItemID, opts ...grpc.CallOption) (*ItemID, error) {
	out := new(ItemID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/DeleteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetItems(ctx context.Context, in *GetItemsRequest, opts ...grpc.CallOption) (*GetItemsResponse, error) {
	out := new(GetItemsResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) CreateItemType(ctx context.Context, in *ItemType, opts ...grpc.CallOption) (*ItemTypeID, error) {
	out := new(ItemTypeID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/CreateItemType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetItemType(ctx context.Context, in *ItemTypeID, opts ...grpc.CallOption) (*ItemType, error) {
	out := new(ItemType)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetItemType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) DeleteItemType(ctx context.Context, in *ItemTypeID, opts ...grpc.CallOption) (*ItemTypeID, error) {
	out := new(ItemTypeID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/DeleteItemType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetItemTypes(ctx context.Context, in *GetItemTypesRequest, opts ...grpc.CallOption) (*GetItemTypesResponse, error) {
	out := new(GetItemTypesResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetItemTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) CreateContainer(ctx context.Context, in *Container, opts ...grpc.CallOption) (*ContainerID, error) {
	out := new(ContainerID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/CreateContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error) {
	out := new(Container)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) DeleteContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*ContainerID, error) {
	out := new(ContainerID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/DeleteContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetContainers(ctx context.Context, in *GetContainersRequest, opts ...grpc.CallOption) (*GetContainersResponse, error) {
	out := new(GetContainersResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) CreateContainerType(ctx context.Context, in *ContainerType, opts ...grpc.CallOption) (*ContainerTypeID, error) {
	out := new(ContainerTypeID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/CreateContainerType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetContainerType(ctx context.Context, in *ContainerTypeID, opts ...grpc.CallOption) (*ContainerType, error) {
	out := new(ContainerType)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetContainerType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) DeleteContainerType(ctx context.Context, in *ContainerTypeID, opts ...grpc.CallOption) (*ContainerTypeID, error) {
	out := new(ContainerTypeID)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/DeleteContainerType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetContainerTypes(ctx context.Context, in *GetContainerTypesRequest, opts ...grpc.CallOption) (*GetContainerTypesResponse, error) {
	out := new(GetContainerTypesResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetContainerTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetContainerItems(ctx context.Context, in *GetContainerItemsRequest, opts ...grpc.CallOption) (*GetContainerItemsResponse, error) {
	out := new(GetContainerItemsResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetContainerItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) PullItem(ctx context.Context, in *PullItemRequest, opts ...grpc.CallOption) (*Item, error) {
	out := new(Item)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/PullItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) PutItem(ctx context.Context, in *PutItemRequest, opts ...grpc.CallOption) (*PutItemResponse, error) {
	out := new(PutItemResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/PutItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) SortItems(ctx context.Context, in *SortItemsRequest, opts ...grpc.CallOption) (*SortItemsResponse, error) {
	out := new(SortItemsResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/SortItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetNearestItems(ctx context.Context, in *GetNearestItemsRequest, opts ...grpc.CallOption) (*GetNearestItemsResponse, error) {
	out := new(GetNearestItemsResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetNearestItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) UseItem(ctx context.Context, in *UseItemRequest, opts ...grpc.CallOption) (*UseItemResponse, error) {
	out := new(UseItemResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/UseItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error) {
	out := new(common.ServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVItemServiceClient) GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error) {
	out := new(common.VersionResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVItemService/GetServiceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MruVItemServiceServer is the server API for MruVItemService service.
type MruVItemServiceServer interface {
	// Create new item.
	CreateItem(context.Context, *Item) (*ItemID, error)
	// Get item by id.
	GetItem(context.Context, *ItemID) (*Item, error)
	// Delete item by id.
	DeleteItem(context.Context, *ItemID) (*ItemID, error)
	// Gets all items.
	GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error)
	// Create item type.
	CreateItemType(context.Context, *ItemType) (*ItemTypeID, error)
	// Get item type by id.
	GetItemType(context.Context, *ItemTypeID) (*ItemType, error)
	// Delete item type by id.
	DeleteItemType(context.Context, *ItemTypeID) (*ItemTypeID, error)
	// Gets all item types.
	GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesResponse, error)
	// Create container.
	CreateContainer(context.Context, *Container) (*ContainerID, error)
	// Get container by id.
	GetContainer(context.Context, *ContainerID) (*Container, error)
	// Delete container by id.
	DeleteContainer(context.Context, *ContainerID) (*ContainerID, error)
	// Get all containers.
	GetContainers(context.Context, *GetContainersRequest) (*GetContainersResponse, error)
	// Create a container type.
	CreateContainerType(context.Context, *ContainerType) (*ContainerTypeID, error)
	// Get a container type by id.
	GetContainerType(context.Context, *ContainerTypeID) (*ContainerType, error)
	// Delete a container type by id.
	DeleteContainerType(context.Context, *ContainerTypeID) (*ContainerTypeID, error)
	// Get all container types.
	GetContainerTypes(context.Context, *GetContainerTypesRequest) (*GetContainerTypesResponse, error)
	// Get items inside a container.
	GetContainerItems(context.Context, *GetContainerItemsRequest) (*GetContainerItemsResponse, error)
	// Pull an item from container.
	PullItem(context.Context, *PullItemRequest) (*Item, error)
	// Put an item into container.
	PutItem(context.Context, *PutItemRequest) (*PutItemResponse, error)
	// Sort items inside container.
	// This procedure change order of items inside container.
	SortItems(context.Context, *SortItemsRequest) (*SortItemsResponse, error)
	// Retrieves from the container the list of items nearest to the given position.
	GetNearestItems(context.Context, *GetNearestItemsRequest) (*GetNearestItemsResponse, error)
	// Trigger action associated with the item usage.
	UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error)
	// Get service health status.
	GetServiceStatus(context.Context, *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error)
	//Get service current version.
	GetServiceVersion(context.Context, *common.VersionRequest) (*common.VersionResponse, error)
}

// UnimplementedMruVItemServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVItemServiceServer struct {
}

func (*UnimplementedMruVItemServiceServer) CreateItem(context.Context, *Item) (*ItemID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetItem(context.Context, *ItemID) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) DeleteItem(context.Context, *ItemID) (*ItemID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetItems(context.Context, *GetItemsRequest) (*GetItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (*UnimplementedMruVItemServiceServer) CreateItemType(context.Context, *ItemType) (*ItemTypeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemType not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetItemType(context.Context, *ItemTypeID) (*ItemType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemType not implemented")
}
func (*UnimplementedMruVItemServiceServer) DeleteItemType(context.Context, *ItemTypeID) (*ItemTypeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemType not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetItemTypes(context.Context, *GetItemTypesRequest) (*GetItemTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemTypes not implemented")
}
func (*UnimplementedMruVItemServiceServer) CreateContainer(context.Context, *Container) (*ContainerID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetContainer(context.Context, *ContainerID) (*Container, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainer not implemented")
}
func (*UnimplementedMruVItemServiceServer) DeleteContainer(context.Context, *ContainerID) (*ContainerID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainer not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetContainers(context.Context, *GetContainersRequest) (*GetContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainers not implemented")
}
func (*UnimplementedMruVItemServiceServer) CreateContainerType(context.Context, *ContainerType) (*ContainerTypeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainerType not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetContainerType(context.Context, *ContainerTypeID) (*ContainerType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerType not implemented")
}
func (*UnimplementedMruVItemServiceServer) DeleteContainerType(context.Context, *ContainerTypeID) (*ContainerTypeID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContainerType not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetContainerTypes(context.Context, *GetContainerTypesRequest) (*GetContainerTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerTypes not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetContainerItems(context.Context, *GetContainerItemsRequest) (*GetContainerItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerItems not implemented")
}
func (*UnimplementedMruVItemServiceServer) PullItem(context.Context, *PullItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) PutItem(context.Context, *PutItemRequest) (*PutItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) SortItems(context.Context, *SortItemsRequest) (*SortItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortItems not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetNearestItems(context.Context, *GetNearestItemsRequest) (*GetNearestItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearestItems not implemented")
}
func (*UnimplementedMruVItemServiceServer) UseItem(context.Context, *UseItemRequest) (*UseItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseItem not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetServiceStatus(context.Context, *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (*UnimplementedMruVItemServiceServer) GetServiceVersion(context.Context, *common.VersionRequest) (*common.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceVersion not implemented")
}

func RegisterMruVItemServiceServer(s *grpc.Server, srv MruVItemServiceServer) {
	s.RegisterService(&_MruVItemService_serviceDesc, srv)
}

func _MruVItemService_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Item)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).CreateItem(ctx, req.(*Item))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetItem(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/DeleteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).DeleteItem(ctx, req.(*ItemID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetItems(ctx, req.(*GetItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_CreateItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).CreateItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/CreateItemType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).CreateItemType(ctx, req.(*ItemType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemTypeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetItemType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetItemType(ctx, req.(*ItemTypeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_DeleteItemType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemTypeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).DeleteItemType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/DeleteItemType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).DeleteItemType(ctx, req.(*ItemTypeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetItemTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetItemTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetItemTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetItemTypes(ctx, req.(*GetItemTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Container)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).CreateContainer(ctx, req.(*Container))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetContainer(ctx, req.(*ContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_DeleteContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).DeleteContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/DeleteContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).DeleteContainer(ctx, req.(*ContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetContainers(ctx, req.(*GetContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_CreateContainerType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).CreateContainerType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/CreateContainerType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).CreateContainerType(ctx, req.(*ContainerType))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetContainerType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerTypeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetContainerType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetContainerType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetContainerType(ctx, req.(*ContainerTypeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_DeleteContainerType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerTypeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).DeleteContainerType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/DeleteContainerType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).DeleteContainerType(ctx, req.(*ContainerTypeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetContainerTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetContainerTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetContainerTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetContainerTypes(ctx, req.(*GetContainerTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetContainerItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetContainerItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetContainerItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetContainerItems(ctx, req.(*GetContainerItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_PullItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).PullItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/PullItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).PullItem(ctx, req.(*PullItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_PutItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).PutItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/PutItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).PutItem(ctx, req.(*PutItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_SortItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).SortItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/SortItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).SortItems(ctx, req.(*SortItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetNearestItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNearestItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetNearestItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetNearestItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetNearestItems(ctx, req.(*GetNearestItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_UseItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).UseItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/UseItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).UseItem(ctx, req.(*UseItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetServiceStatus(ctx, req.(*common.ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVItemService_GetServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVItemServiceServer).GetServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVItemService/GetServiceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVItemServiceServer).GetServiceVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MruVItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.MruVItemService",
	HandlerType: (*MruVItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateItem",
			Handler:    _MruVItemService_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _MruVItemService_GetItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _MruVItemService_DeleteItem_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _MruVItemService_GetItems_Handler,
		},
		{
			MethodName: "CreateItemType",
			Handler:    _MruVItemService_CreateItemType_Handler,
		},
		{
			MethodName: "GetItemType",
			Handler:    _MruVItemService_GetItemType_Handler,
		},
		{
			MethodName: "DeleteItemType",
			Handler:    _MruVItemService_DeleteItemType_Handler,
		},
		{
			MethodName: "GetItemTypes",
			Handler:    _MruVItemService_GetItemTypes_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _MruVItemService_CreateContainer_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _MruVItemService_GetContainer_Handler,
		},
		{
			MethodName: "DeleteContainer",
			Handler:    _MruVItemService_DeleteContainer_Handler,
		},
		{
			MethodName: "GetContainers",
			Handler:    _MruVItemService_GetContainers_Handler,
		},
		{
			MethodName: "CreateContainerType",
			Handler:    _MruVItemService_CreateContainerType_Handler,
		},
		{
			MethodName: "GetContainerType",
			Handler:    _MruVItemService_GetContainerType_Handler,
		},
		{
			MethodName: "DeleteContainerType",
			Handler:    _MruVItemService_DeleteContainerType_Handler,
		},
		{
			MethodName: "GetContainerTypes",
			Handler:    _MruVItemService_GetContainerTypes_Handler,
		},
		{
			MethodName: "GetContainerItems",
			Handler:    _MruVItemService_GetContainerItems_Handler,
		},
		{
			MethodName: "PullItem",
			Handler:    _MruVItemService_PullItem_Handler,
		},
		{
			MethodName: "PutItem",
			Handler:    _MruVItemService_PutItem_Handler,
		},
		{
			MethodName: "SortItems",
			Handler:    _MruVItemService_SortItems_Handler,
		},
		{
			MethodName: "GetNearestItems",
			Handler:    _MruVItemService_GetNearestItems_Handler,
		},
		{
			MethodName: "UseItem",
			Handler:    _MruVItemService_UseItem_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _MruVItemService_GetServiceStatus_Handler,
		},
		{
			MethodName: "GetServiceVersion",
			Handler:    _MruVItemService_GetServiceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "items/items.proto",
}
