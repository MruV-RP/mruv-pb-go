// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: items/items.proto

package items

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _items_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	return nil
}

// GetItemsRequestValidationError is the validation error returned by
// GetItemsRequest.Validate if the designated constraints aren't met.
type GetItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsRequestValidationError) ErrorName() string { return "GetItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsRequestValidationError{}

// Validate checks the field values on GetItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetItemsResponseValidationError is the validation error returned by
// GetItemsResponse.Validate if the designated constraints aren't met.
type GetItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsResponseValidationError) ErrorName() string { return "GetItemsResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsResponseValidationError{}

// Validate checks the field values on GetItemTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetItemTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	return nil
}

// GetItemTypesRequestValidationError is the validation error returned by
// GetItemTypesRequest.Validate if the designated constraints aren't met.
type GetItemTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemTypesRequestValidationError) ErrorName() string {
	return "GetItemTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemTypesRequestValidationError{}

// Validate checks the field values on GetItemTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetItemTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItemTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetItemTypesResponseValidationError{
					field:  fmt.Sprintf("ItemTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetItemTypesResponseValidationError is the validation error returned by
// GetItemTypesResponse.Validate if the designated constraints aren't met.
type GetItemTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemTypesResponseValidationError) ErrorName() string {
	return "GetItemTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemTypesResponseValidationError{}

// Validate checks the field values on GetContainersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	return nil
}

// GetContainersRequestValidationError is the validation error returned by
// GetContainersRequest.Validate if the designated constraints aren't met.
type GetContainersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainersRequestValidationError) ErrorName() string {
	return "GetContainersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainersRequestValidationError{}

// Validate checks the field values on GetContainersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContainers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContainersResponseValidationError{
					field:  fmt.Sprintf("Containers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetContainersResponseValidationError is the validation error returned by
// GetContainersResponse.Validate if the designated constraints aren't met.
type GetContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainersResponseValidationError) ErrorName() string {
	return "GetContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainersResponseValidationError{}

// Validate checks the field values on GetContainerTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainerTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	return nil
}

// GetContainerTypesRequestValidationError is the validation error returned by
// GetContainerTypesRequest.Validate if the designated constraints aren't met.
type GetContainerTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerTypesRequestValidationError) ErrorName() string {
	return "GetContainerTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerTypesRequestValidationError{}

// Validate checks the field values on GetContainerTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainerTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetContainerTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContainerTypesResponseValidationError{
					field:  fmt.Sprintf("ContainerTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetContainerTypesResponseValidationError is the validation error returned by
// GetContainerTypesResponse.Validate if the designated constraints aren't met.
type GetContainerTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerTypesResponseValidationError) ErrorName() string {
	return "GetContainerTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerTypesResponseValidationError{}

// Validate checks the field values on PutItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *PutItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContainerId

	// no validation rules for ItemId

	switch m.Where.(type) {

	case *PutItemRequest_Slot:
		// no validation rules for Slot

	}

	return nil
}

// PutItemRequestValidationError is the validation error returned by
// PutItemRequest.Validate if the designated constraints aren't met.
type PutItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutItemRequestValidationError) ErrorName() string { return "PutItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutItemRequestValidationError{}

// Validate checks the field values on PutItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PutItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInsideItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutItemResponseValidationError{
				field:  "InsideItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PutItemResponseValidationError is the validation error returned by
// PutItemResponse.Validate if the designated constraints aren't met.
type PutItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutItemResponseValidationError) ErrorName() string { return "PutItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutItemResponseValidationError{}

// Validate checks the field values on GetContainerItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainerItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContainerId

	// no validation rules for Limit

	return nil
}

// GetContainerItemsRequestValidationError is the validation error returned by
// GetContainerItemsRequest.Validate if the designated constraints aren't met.
type GetContainerItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerItemsRequestValidationError) ErrorName() string {
	return "GetContainerItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerItemsRequestValidationError{}

// Validate checks the field values on GetContainerItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContainerItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetContainerItemsResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetContainerItemsResponseValidationError is the validation error returned by
// GetContainerItemsResponse.Validate if the designated constraints aren't met.
type GetContainerItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetContainerItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetContainerItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetContainerItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetContainerItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetContainerItemsResponseValidationError) ErrorName() string {
	return "GetContainerItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetContainerItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContainerItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetContainerItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetContainerItemsResponseValidationError{}

// Validate checks the field values on PullItemRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PullItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContainerId

	// no validation rules for ItemId

	return nil
}

// PullItemRequestValidationError is the validation error returned by
// PullItemRequest.Validate if the designated constraints aren't met.
type PullItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PullItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PullItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PullItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PullItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PullItemRequestValidationError) ErrorName() string { return "PullItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e PullItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPullItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PullItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PullItemRequestValidationError{}

// Validate checks the field values on SortItemsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SortItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ContainerId

	// no validation rules for SortBy

	return nil
}

// SortItemsRequestValidationError is the validation error returned by
// SortItemsRequest.Validate if the designated constraints aren't met.
type SortItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortItemsRequestValidationError) ErrorName() string { return "SortItemsRequestValidationError" }

// Error satisfies the builtin error interface
func (e SortItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortItemsRequestValidationError{}

// Validate checks the field values on SortItemsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SortItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetContainer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SortItemsResponseValidationError{
				field:  "Container",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SortItemsResponseValidationError is the validation error returned by
// SortItemsResponse.Validate if the designated constraints aren't met.
type SortItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SortItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SortItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SortItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SortItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SortItemsResponseValidationError) ErrorName() string {
	return "SortItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SortItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSortItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SortItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SortItemsResponseValidationError{}

// Validate checks the field values on GetNearestItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNearestItemsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNearestItemsRequestValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ContainerId

	// no validation rules for DistanceLimit

	return nil
}

// GetNearestItemsRequestValidationError is the validation error returned by
// GetNearestItemsRequest.Validate if the designated constraints aren't met.
type GetNearestItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestItemsRequestValidationError) ErrorName() string {
	return "GetNearestItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestItemsRequestValidationError{}

// Validate checks the field values on GetNearestItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNearestItemsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItem() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetNearestItemsResponseValidationError{
					field:  fmt.Sprintf("Item[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetNearestItemsResponseValidationError is the validation error returned by
// GetNearestItemsResponse.Validate if the designated constraints aren't met.
type GetNearestItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNearestItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNearestItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNearestItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNearestItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNearestItemsResponseValidationError) ErrorName() string {
	return "GetNearestItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNearestItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNearestItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNearestItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNearestItemsResponseValidationError{}

// Validate checks the field values on UseItemRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UseItemRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ItemId

	return nil
}

// UseItemRequestValidationError is the validation error returned by
// UseItemRequest.Validate if the designated constraints aren't met.
type UseItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseItemRequestValidationError) ErrorName() string { return "UseItemRequestValidationError" }

// Error satisfies the builtin error interface
func (e UseItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseItemRequestValidationError{}

// Validate checks the field values on UseItemResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UseItemResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// UseItemResponseValidationError is the validation error returned by
// UseItemResponse.Validate if the designated constraints aren't met.
type UseItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UseItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UseItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UseItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UseItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UseItemResponseValidationError) ErrorName() string { return "UseItemResponseValidationError" }

// Error satisfies the builtin error interface
func (e UseItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUseItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UseItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UseItemResponseValidationError{}
