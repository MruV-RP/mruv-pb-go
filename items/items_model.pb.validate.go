// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: items/items_model.proto

package items

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _items_model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ItemType with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ItemType) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemTypeValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for BaseWeight

	// no validation rules for BaseVolume

	// no validation rules for ModelName

	// no validation rules for ModelHash

	return nil
}

// ItemTypeValidationError is the validation error returned by
// ItemType.Validate if the designated constraints aren't met.
type ItemTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemTypeValidationError) ErrorName() string { return "ItemTypeValidationError" }

// Error satisfies the builtin error interface
func (e ItemTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemTypeValidationError{}

// Validate checks the field values on ItemTypeID with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ItemTypeID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ItemTypeIDValidationError is the validation error returned by
// ItemTypeID.Validate if the designated constraints aren't met.
type ItemTypeIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemTypeIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemTypeIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemTypeIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemTypeIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemTypeIDValidationError) ErrorName() string { return "ItemTypeIDValidationError" }

// Error satisfies the builtin error interface
func (e ItemTypeIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemTypeID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemTypeIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemTypeIDValidationError{}

// Validate checks the field values on Item with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Item) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetItemTypeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemValidationError{
				field:  "ItemTypeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Weight

	// no validation rules for Volume

	return nil
}

// ItemValidationError is the validation error returned by Item.Validate if the
// designated constraints aren't met.
type ItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemValidationError) ErrorName() string { return "ItemValidationError" }

// Error satisfies the builtin error interface
func (e ItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemValidationError{}

// Validate checks the field values on ItemID with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ItemID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ItemIDValidationError is the validation error returned by ItemID.Validate if
// the designated constraints aren't met.
type ItemIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemIDValidationError) ErrorName() string { return "ItemIDValidationError" }

// Error satisfies the builtin error interface
func (e ItemIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemIDValidationError{}

// Validate checks the field values on ContainerType with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ContainerType) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerTypeValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetContainerItemTypeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerTypeValidationError{
				field:  "ContainerItemTypeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxNumber

	// no validation rules for MaxVolume

	// no validation rules for MaxWeight

	for idx, item := range m.GetValidItemTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerTypeValidationError{
					field:  fmt.Sprintf("ValidItemTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ContainerTypeValidationError is the validation error returned by
// ContainerType.Validate if the designated constraints aren't met.
type ContainerTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerTypeValidationError) ErrorName() string { return "ContainerTypeValidationError" }

// Error satisfies the builtin error interface
func (e ContainerTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerTypeValidationError{}

// Validate checks the field values on ContainerTypeID with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ContainerTypeID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ContainerTypeIDValidationError is the validation error returned by
// ContainerTypeID.Validate if the designated constraints aren't met.
type ContainerTypeIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerTypeIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerTypeIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerTypeIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerTypeIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerTypeIDValidationError) ErrorName() string { return "ContainerTypeIDValidationError" }

// Error satisfies the builtin error interface
func (e ContainerTypeIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerTypeID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerTypeIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerTypeIDValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Container) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetTypeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "TypeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetItemId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "ItemId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ItemsInside

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContainerValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on ContainerID with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ContainerID) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ContainerIDValidationError is the validation error returned by
// ContainerID.Validate if the designated constraints aren't met.
type ContainerIDValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIDValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIDValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIDValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIDValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIDValidationError) ErrorName() string { return "ContainerIDValidationError" }

// Error satisfies the builtin error interface
func (e ContainerIDValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerID.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIDValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIDValidationError{}

// Validate checks the field values on InsideItem with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *InsideItem) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetContainerId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsideItemValidationError{
				field:  "ContainerId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Position

	switch m.ItemOrId.(type) {

	case *InsideItem_ItemId:

		if v, ok := interface{}(m.GetItemId()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsideItemValidationError{
					field:  "ItemId",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsideItem_Item:

		if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsideItemValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// InsideItemValidationError is the validation error returned by
// InsideItem.Validate if the designated constraints aren't met.
type InsideItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsideItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsideItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsideItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsideItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsideItemValidationError) ErrorName() string { return "InsideItemValidationError" }

// Error satisfies the builtin error interface
func (e InsideItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsideItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsideItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsideItemValidationError{}
