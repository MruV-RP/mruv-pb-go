// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: business/business.proto

package business

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _business_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Business with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Business) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ProductId

	// no validation rules for OwnerType

	// no validation rules for OwnerId

	// no validation rules for BusinessGroup

	return nil
}

// BusinessValidationError is the validation error returned by
// Business.Validate if the designated constraints aren't met.
type BusinessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BusinessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BusinessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BusinessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BusinessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BusinessValidationError) ErrorName() string { return "BusinessValidationError" }

// Error satisfies the builtin error interface
func (e BusinessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBusiness.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BusinessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BusinessValidationError{}

// Validate checks the field values on CreateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ProductId

	return nil
}

// CreateBusinessRequestValidationError is the validation error returned by
// CreateBusinessRequest.Validate if the designated constraints aren't met.
type CreateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessRequestValidationError) ErrorName() string {
	return "CreateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessRequestValidationError{}

// Validate checks the field values on CreateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateBusinessResponseValidationError is the validation error returned by
// CreateBusinessResponse.Validate if the designated constraints aren't met.
type CreateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessResponseValidationError) ErrorName() string {
	return "CreateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessResponseValidationError{}

// Validate checks the field values on GetBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetBusinessRequestValidationError is the validation error returned by
// GetBusinessRequest.Validate if the designated constraints aren't met.
type GetBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessRequestValidationError) ErrorName() string {
	return "GetBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessRequestValidationError{}

// Validate checks the field values on GetBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetBusinessResponseValidationError is the validation error returned by
// GetBusinessResponse.Validate if the designated constraints aren't met.
type GetBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBusinessResponseValidationError) ErrorName() string {
	return "GetBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBusinessResponseValidationError{}

// Validate checks the field values on UpdateBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateBusinessRequestValidationError is the validation error returned by
// UpdateBusinessRequest.Validate if the designated constraints aren't met.
type UpdateBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessRequestValidationError) ErrorName() string {
	return "UpdateBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessRequestValidationError{}

// Validate checks the field values on UpdateBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateBusinessResponseValidationError is the validation error returned by
// UpdateBusinessResponse.Validate if the designated constraints aren't met.
type UpdateBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateBusinessResponseValidationError) ErrorName() string {
	return "UpdateBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateBusinessResponseValidationError{}

// Validate checks the field values on DeleteBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteBusinessRequestValidationError is the validation error returned by
// DeleteBusinessRequest.Validate if the designated constraints aren't met.
type DeleteBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessRequestValidationError) ErrorName() string {
	return "DeleteBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessRequestValidationError{}

// Validate checks the field values on DeleteBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteBusinessResponseValidationError is the validation error returned by
// DeleteBusinessResponse.Validate if the designated constraints aren't met.
type DeleteBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBusinessResponseValidationError) ErrorName() string {
	return "DeleteBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBusinessResponseValidationError{}

// Validate checks the field values on AssignOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// AssignOwnerRequestValidationError is the validation error returned by
// AssignOwnerRequest.Validate if the designated constraints aren't met.
type AssignOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignOwnerRequestValidationError) ErrorName() string {
	return "AssignOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignOwnerRequestValidationError{}

// Validate checks the field values on AssignOwnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignOwnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OwnerType

	// no validation rules for OwnerId

	return nil
}

// AssignOwnerResponseValidationError is the validation error returned by
// AssignOwnerResponse.Validate if the designated constraints aren't met.
type AssignOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignOwnerResponseValidationError) ErrorName() string {
	return "AssignOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignOwnerResponseValidationError{}

// Validate checks the field values on AssignEstateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for EstateId

	return nil
}

// AssignEstateRequestValidationError is the validation error returned by
// AssignEstateRequest.Validate if the designated constraints aren't met.
type AssignEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignEstateRequestValidationError) ErrorName() string {
	return "AssignEstateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignEstateRequestValidationError{}

// Validate checks the field values on AssignEstateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignEstateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateCount

	return nil
}

// AssignEstateResponseValidationError is the validation error returned by
// AssignEstateResponse.Validate if the designated constraints aren't met.
type AssignEstateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignEstateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignEstateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignEstateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignEstateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignEstateResponseValidationError) ErrorName() string {
	return "AssignEstateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignEstateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignEstateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignEstateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignEstateResponseValidationError{}

// Validate checks the field values on UnassignEstateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnassignEstateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BusinessId

	// no validation rules for EstateId

	return nil
}

// UnassignEstateRequestValidationError is the validation error returned by
// UnassignEstateRequest.Validate if the designated constraints aren't met.
type UnassignEstateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnassignEstateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnassignEstateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnassignEstateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnassignEstateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnassignEstateRequestValidationError) ErrorName() string {
	return "UnassignEstateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnassignEstateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnassignEstateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnassignEstateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnassignEstateRequestValidationError{}

// Validate checks the field values on UnassignEstateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnassignEstateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EstateCount

	return nil
}

// UnassignEstateResponseValidationError is the validation error returned by
// UnassignEstateResponse.Validate if the designated constraints aren't met.
type UnassignEstateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnassignEstateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnassignEstateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnassignEstateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnassignEstateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnassignEstateResponseValidationError) ErrorName() string {
	return "UnassignEstateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnassignEstateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnassignEstateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnassignEstateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnassignEstateResponseValidationError{}

// Validate checks the field values on BuyBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BuyBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for BuyerType

	// no validation rules for BuyerId

	return nil
}

// BuyBusinessRequestValidationError is the validation error returned by
// BuyBusinessRequest.Validate if the designated constraints aren't met.
type BuyBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyBusinessRequestValidationError) ErrorName() string {
	return "BuyBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuyBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyBusinessRequestValidationError{}

// Validate checks the field values on BuyBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BuyBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BuyBusinessResponseValidationError is the validation error returned by
// BuyBusinessResponse.Validate if the designated constraints aren't met.
type BuyBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyBusinessResponseValidationError) ErrorName() string {
	return "BuyBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyBusinessResponseValidationError{}

// Validate checks the field values on WatchBusinessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchBusinessRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBusinessRequestValidationError is the validation error returned by
// WatchBusinessRequest.Validate if the designated constraints aren't met.
type WatchBusinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBusinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBusinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBusinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBusinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBusinessRequestValidationError) ErrorName() string {
	return "WatchBusinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBusinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBusinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBusinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBusinessRequestValidationError{}

// Validate checks the field values on WatchBusinessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchBusinessResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBusinessResponseValidationError is the validation error returned by
// WatchBusinessResponse.Validate if the designated constraints aren't met.
type WatchBusinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBusinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBusinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBusinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBusinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBusinessResponseValidationError) ErrorName() string {
	return "WatchBusinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBusinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBusinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBusinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBusinessResponseValidationError{}

// Validate checks the field values on WatchBusinessesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchBusinessesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBusinessesRequestValidationError is the validation error returned by
// WatchBusinessesRequest.Validate if the designated constraints aren't met.
type WatchBusinessesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBusinessesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBusinessesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBusinessesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBusinessesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBusinessesRequestValidationError) ErrorName() string {
	return "WatchBusinessesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBusinessesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBusinessesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBusinessesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBusinessesRequestValidationError{}

// Validate checks the field values on WatchBusinessesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchBusinessesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// WatchBusinessesResponseValidationError is the validation error returned by
// WatchBusinessesResponse.Validate if the designated constraints aren't met.
type WatchBusinessesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBusinessesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBusinessesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBusinessesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBusinessesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBusinessesResponseValidationError) ErrorName() string {
	return "WatchBusinessesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBusinessesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBusinessesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBusinessesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBusinessesResponseValidationError{}
