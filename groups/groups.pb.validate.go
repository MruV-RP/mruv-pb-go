// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: groups/groups.proto

package groups

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _groups_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// CreateGroupRequestValidationError is the validation error returned by
// CreateGroupRequest.Validate if the designated constraints aren't met.
type CreateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupRequestValidationError) ErrorName() string {
	return "CreateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupRequestValidationError{}

// Validate checks the field values on CreateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// CreateGroupResponseValidationError is the validation error returned by
// CreateGroupResponse.Validate if the designated constraints aren't met.
type CreateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGroupResponseValidationError) ErrorName() string {
	return "CreateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGroupResponseValidationError{}

// Validate checks the field values on GetGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetGroupRequestValidationError is the validation error returned by
// GetGroupRequest.Validate if the designated constraints aren't met.
type GetGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupRequestValidationError) ErrorName() string { return "GetGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupRequestValidationError{}

// Validate checks the field values on GetGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// GetGroupResponseValidationError is the validation error returned by
// GetGroupResponse.Validate if the designated constraints aren't met.
type GetGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupResponseValidationError) ErrorName() string { return "GetGroupResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupResponseValidationError{}

// Validate checks the field values on UpdateGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// UpdateGroupRequestValidationError is the validation error returned by
// UpdateGroupRequest.Validate if the designated constraints aren't met.
type UpdateGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupRequestValidationError) ErrorName() string {
	return "UpdateGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupRequestValidationError{}

// Validate checks the field values on UpdateGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGroupResponseValidationError is the validation error returned by
// UpdateGroupResponse.Validate if the designated constraints aren't met.
type UpdateGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGroupResponseValidationError) ErrorName() string {
	return "UpdateGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGroupResponseValidationError{}

// Validate checks the field values on DeleteGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// DeleteGroupRequestValidationError is the validation error returned by
// DeleteGroupRequest.Validate if the designated constraints aren't met.
type DeleteGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupRequestValidationError) ErrorName() string {
	return "DeleteGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupRequestValidationError{}

// Validate checks the field values on DeleteGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteGroupResponseValidationError is the validation error returned by
// DeleteGroupResponse.Validate if the designated constraints aren't met.
type DeleteGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGroupResponseValidationError) ErrorName() string {
	return "DeleteGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGroupResponseValidationError{}

// Validate checks the field values on GetGroupsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for BeginFrom

	return nil
}

// GetGroupsRequestValidationError is the validation error returned by
// GetGroupsRequest.Validate if the designated constraints aren't met.
type GetGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsRequestValidationError) ErrorName() string { return "GetGroupsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsRequestValidationError{}

// Validate checks the field values on GetGroupsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGroupsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupsResponseValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGroupsResponseValidationError is the validation error returned by
// GetGroupsResponse.Validate if the designated constraints aren't met.
type GetGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsResponseValidationError) ErrorName() string {
	return "GetGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsResponseValidationError{}

// Validate checks the field values on AssignOwnerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for OwnerType

	// no validation rules for OwnerId

	return nil
}

// AssignOwnerRequestValidationError is the validation error returned by
// AssignOwnerRequest.Validate if the designated constraints aren't met.
type AssignOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignOwnerRequestValidationError) ErrorName() string {
	return "AssignOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignOwnerRequestValidationError{}

// Validate checks the field values on AssignOwnerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AssignOwnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AssignOwnerResponseValidationError is the validation error returned by
// AssignOwnerResponse.Validate if the designated constraints aren't met.
type AssignOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignOwnerResponseValidationError) ErrorName() string {
	return "AssignOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignOwnerResponseValidationError{}

// Validate checks the field values on GetOwnerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOwnerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetOwnerRequestValidationError is the validation error returned by
// GetOwnerRequest.Validate if the designated constraints aren't met.
type GetOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerRequestValidationError) ErrorName() string { return "GetOwnerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerRequestValidationError{}

// Validate checks the field values on GetOwnerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOwnerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OwnerId

	// no validation rules for OwnerType

	return nil
}

// GetOwnerResponseValidationError is the validation error returned by
// GetOwnerResponse.Validate if the designated constraints aren't met.
type GetOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOwnerResponseValidationError) ErrorName() string { return "GetOwnerResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOwnerResponseValidationError{}

// Validate checks the field values on AddMemberRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for MemberId

	return nil
}

// AddMemberRequestValidationError is the validation error returned by
// AddMemberRequest.Validate if the designated constraints aren't met.
type AddMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberRequestValidationError) ErrorName() string { return "AddMemberRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberRequestValidationError{}

// Validate checks the field values on AddMemberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddMemberResponseValidationError is the validation error returned by
// AddMemberResponse.Validate if the designated constraints aren't met.
type AddMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMemberResponseValidationError) ErrorName() string {
	return "AddMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMemberResponseValidationError{}

// Validate checks the field values on GetMembersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetMembersRequestValidationError is the validation error returned by
// GetMembersRequest.Validate if the designated constraints aren't met.
type GetMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersRequestValidationError) ErrorName() string {
	return "GetMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersRequestValidationError{}

// Validate checks the field values on GetMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberType

	return nil
}

// GetMembersResponseValidationError is the validation error returned by
// GetMembersResponse.Validate if the designated constraints aren't met.
type GetMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersResponseValidationError) ErrorName() string {
	return "GetMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersResponseValidationError{}

// Validate checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for MemberId

	return nil
}

// RemoveMemberRequestValidationError is the validation error returned by
// RemoveMemberRequest.Validate if the designated constraints aren't met.
type RemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberRequestValidationError) ErrorName() string {
	return "RemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberRequestValidationError{}

// Validate checks the field values on RemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMemberResponseValidationError is the validation error returned by
// RemoveMemberResponse.Validate if the designated constraints aren't met.
type RemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberResponseValidationError) ErrorName() string {
	return "RemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberResponseValidationError{}

// Validate checks the field values on AddPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddPermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for Name

	// no validation rules for Definition

	return nil
}

// AddPermissionRequestValidationError is the validation error returned by
// AddPermissionRequest.Validate if the designated constraints aren't met.
type AddPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionRequestValidationError) ErrorName() string {
	return "AddPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionRequestValidationError{}

// Validate checks the field values on AddPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddPermissionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PermissionId

	return nil
}

// AddPermissionResponseValidationError is the validation error returned by
// AddPermissionResponse.Validate if the designated constraints aren't met.
type AddPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPermissionResponseValidationError) ErrorName() string {
	return "AddPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPermissionResponseValidationError{}

// Validate checks the field values on GetPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetPermissionsRequestValidationError is the validation error returned by
// GetPermissionsRequest.Validate if the designated constraints aren't met.
type GetPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsRequestValidationError) ErrorName() string {
	return "GetPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsRequestValidationError{}

// Validate checks the field values on GetPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPermissionsResponseValidationError is the validation error returned by
// GetPermissionsResponse.Validate if the designated constraints aren't met.
type GetPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsResponseValidationError) ErrorName() string {
	return "GetPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsResponseValidationError{}

// Validate checks the field values on RemovePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for PermissionId

	return nil
}

// RemovePermissionRequestValidationError is the validation error returned by
// RemovePermissionRequest.Validate if the designated constraints aren't met.
type RemovePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionRequestValidationError) ErrorName() string {
	return "RemovePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionRequestValidationError{}

// Validate checks the field values on RemovePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemovePermissionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemovePermissionResponseValidationError is the validation error returned by
// RemovePermissionResponse.Validate if the designated constraints aren't met.
type RemovePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePermissionResponseValidationError) ErrorName() string {
	return "RemovePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePermissionResponseValidationError{}

// Validate checks the field values on AddSubgroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSubgroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for SubgroupId

	return nil
}

// AddSubgroupRequestValidationError is the validation error returned by
// AddSubgroupRequest.Validate if the designated constraints aren't met.
type AddSubgroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubgroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubgroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubgroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubgroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubgroupRequestValidationError) ErrorName() string {
	return "AddSubgroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSubgroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubgroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubgroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubgroupRequestValidationError{}

// Validate checks the field values on AddSubgroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSubgroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddSubgroupResponseValidationError is the validation error returned by
// AddSubgroupResponse.Validate if the designated constraints aren't met.
type AddSubgroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSubgroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSubgroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSubgroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSubgroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSubgroupResponseValidationError) ErrorName() string {
	return "AddSubgroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSubgroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSubgroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSubgroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSubgroupResponseValidationError{}

// Validate checks the field values on GetSubgroupsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubgroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	return nil
}

// GetSubgroupsRequestValidationError is the validation error returned by
// GetSubgroupsRequest.Validate if the designated constraints aren't met.
type GetSubgroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubgroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubgroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubgroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubgroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubgroupsRequestValidationError) ErrorName() string {
	return "GetSubgroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubgroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubgroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubgroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubgroupsRequestValidationError{}

// Validate checks the field values on GetSubgroupsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSubgroupsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSubgroupsResponseValidationError is the validation error returned by
// GetSubgroupsResponse.Validate if the designated constraints aren't met.
type GetSubgroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSubgroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSubgroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSubgroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSubgroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSubgroupsResponseValidationError) ErrorName() string {
	return "GetSubgroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSubgroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSubgroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSubgroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSubgroupsResponseValidationError{}

// Validate checks the field values on RemoveSubgroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSubgroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GroupId

	// no validation rules for SubgroupId

	return nil
}

// RemoveSubgroupRequestValidationError is the validation error returned by
// RemoveSubgroupRequest.Validate if the designated constraints aren't met.
type RemoveSubgroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSubgroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSubgroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSubgroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSubgroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSubgroupRequestValidationError) ErrorName() string {
	return "RemoveSubgroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSubgroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSubgroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSubgroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSubgroupRequestValidationError{}

// Validate checks the field values on RemoveSubgroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSubgroupResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveSubgroupResponseValidationError is the validation error returned by
// RemoveSubgroupResponse.Validate if the designated constraints aren't met.
type RemoveSubgroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSubgroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSubgroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSubgroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSubgroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSubgroupResponseValidationError) ErrorName() string {
	return "RemoveSubgroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSubgroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSubgroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSubgroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSubgroupResponseValidationError{}

// Validate checks the field values on IsPermittedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsPermittedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MemberId

	// no validation rules for MemberType

	// no validation rules for Action

	return nil
}

// IsPermittedRequestValidationError is the validation error returned by
// IsPermittedRequest.Validate if the designated constraints aren't met.
type IsPermittedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPermittedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPermittedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPermittedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPermittedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPermittedRequestValidationError) ErrorName() string {
	return "IsPermittedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsPermittedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPermittedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPermittedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPermittedRequestValidationError{}

// Validate checks the field values on IsPermittedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsPermittedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Permitted

	return nil
}

// IsPermittedResponseValidationError is the validation error returned by
// IsPermittedResponse.Validate if the designated constraints aren't met.
type IsPermittedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsPermittedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsPermittedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsPermittedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsPermittedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsPermittedResponseValidationError) ErrorName() string {
	return "IsPermittedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsPermittedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsPermittedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsPermittedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsPermittedResponseValidationError{}

// Validate checks the field values on GetGroupsResponse_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGroupsResponse_Group) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// GetGroupsResponse_GroupValidationError is the validation error returned by
// GetGroupsResponse_Group.Validate if the designated constraints aren't met.
type GetGroupsResponse_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsResponse_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsResponse_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsResponse_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsResponse_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsResponse_GroupValidationError) ErrorName() string {
	return "GetGroupsResponse_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsResponse_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsResponse_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsResponse_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsResponse_GroupValidationError{}

// Validate checks the field values on GetPermissionsResponse_Permission with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPermissionsResponse_Permission) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Definition

	return nil
}

// GetPermissionsResponse_PermissionValidationError is the validation error
// returned by GetPermissionsResponse_Permission.Validate if the designated
// constraints aren't met.
type GetPermissionsResponse_PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsResponse_PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsResponse_PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsResponse_PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsResponse_PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsResponse_PermissionValidationError) ErrorName() string {
	return "GetPermissionsResponse_PermissionValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsResponse_PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsResponse_Permission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsResponse_PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsResponse_PermissionValidationError{}
