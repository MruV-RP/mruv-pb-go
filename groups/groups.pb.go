// Code generated by protoc-gen-go. DO NOT EDIT.
// source: groups/groups.proto

package groups

import (
	context "context"
	fmt "fmt"
	common "github.com/MruV-RP/mruv-pb-go/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GroupID struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupID) Reset()         { *m = GroupID{} }
func (m *GroupID) String() string { return proto.CompactTextString(m) }
func (*GroupID) ProtoMessage()    {}
func (*GroupID) Descriptor() ([]byte, []int) {
	return fileDescriptor_c041880a4c61bab6, []int{0}
}

func (m *GroupID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupID.Unmarshal(m, b)
}
func (m *GroupID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupID.Marshal(b, m, deterministic)
}
func (m *GroupID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupID.Merge(m, src)
}
func (m *GroupID) XXX_Size() int {
	return xxx_messageInfo_GroupID.Size(m)
}
func (m *GroupID) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupID.DiscardUnknown(m)
}

var xxx_messageInfo_GroupID proto.InternalMessageInfo

func (m *GroupID) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetGroupsRequest struct {
	Limit                int32    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupsRequest) Reset()         { *m = GetGroupsRequest{} }
func (m *GetGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*GetGroupsRequest) ProtoMessage()    {}
func (*GetGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c041880a4c61bab6, []int{1}
}

func (m *GetGroupsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupsRequest.Unmarshal(m, b)
}
func (m *GetGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupsRequest.Marshal(b, m, deterministic)
}
func (m *GetGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupsRequest.Merge(m, src)
}
func (m *GetGroupsRequest) XXX_Size() int {
	return xxx_messageInfo_GetGroupsRequest.Size(m)
}
func (m *GetGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupsRequest proto.InternalMessageInfo

func (m *GetGroupsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetGroupsResponse struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGroupsResponse) Reset()         { *m = GetGroupsResponse{} }
func (m *GetGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*GetGroupsResponse) ProtoMessage()    {}
func (*GetGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c041880a4c61bab6, []int{2}
}

func (m *GetGroupsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGroupsResponse.Unmarshal(m, b)
}
func (m *GetGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGroupsResponse.Marshal(b, m, deterministic)
}
func (m *GetGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGroupsResponse.Merge(m, src)
}
func (m *GetGroupsResponse) XXX_Size() int {
	return xxx_messageInfo_GetGroupsResponse.Size(m)
}
func (m *GetGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGroupsResponse proto.InternalMessageInfo

func (m *GetGroupsResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*GroupID)(nil), "mruv.GroupID")
	proto.RegisterType((*GetGroupsRequest)(nil), "mruv.GetGroupsRequest")
	proto.RegisterType((*GetGroupsResponse)(nil), "mruv.GetGroupsResponse")
}

func init() { proto.RegisterFile("groups/groups.proto", fileDescriptor_c041880a4c61bab6) }

var fileDescriptor_c041880a4c61bab6 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x14, 0xc6, 0x69, 0xbd, 0xf7, 0xaa, 0x13, 0xff, 0xdc, 0x9c, 0x5e, 0x6d, 0x1b, 0x5d, 0x94, 0x28,
	0x52, 0x84, 0x66, 0xb0, 0x6e, 0xdc, 0x88, 0x50, 0x03, 0xa5, 0x0b, 0xa1, 0xa4, 0xd8, 0x85, 0x2e,
	0x24, 0x6d, 0x0e, 0xe9, 0x40, 0x92, 0x89, 0x99, 0x49, 0x36, 0xe2, 0xc6, 0x57, 0xf0, 0x51, 0x7c,
	0x14, 0x5f, 0xc1, 0x07, 0x91, 0xcc, 0x4c, 0x6c, 0xfa, 0x67, 0xe1, 0x2a, 0xcc, 0x39, 0xdf, 0xf7,
	0xfb, 0x26, 0x67, 0x0e, 0xe9, 0xc5, 0x05, 0x2f, 0x73, 0x41, 0xf5, 0xc7, 0xcb, 0x0b, 0x2e, 0x39,
	0x5c, 0xa4, 0x45, 0x59, 0x39, 0x4f, 0x63, 0xce, 0xe3, 0x04, 0x69, 0x98, 0x33, 0x1a, 0x66, 0x19,
	0x97, 0xa1, 0x64, 0x3c, 0x33, 0x1a, 0xa7, 0xb7, 0xe5, 0x69, 0xca, 0x33, 0xba, 0xc3, 0x30, 0x91,
	0x3b, 0x53, 0x1c, 0x1e, 0xd0, 0xbe, 0xa4, 0x3c, 0xc2, 0x44, 0xb7, 0xdc, 0x21, 0xb9, 0x3d, 0xaf,
	0xab, 0x0b, 0x1f, 0x1e, 0x90, 0x2e, 0x8b, 0x06, 0x9d, 0x51, 0x67, 0x7c, 0x19, 0x74, 0x59, 0xe4,
	0x8e, 0xc9, 0xf5, 0x1c, 0xa5, 0xea, 0x8a, 0x00, 0xbf, 0x96, 0x28, 0x24, 0xdc, 0x90, 0xcb, 0x84,
	0xa5, 0x4c, 0x1a, 0x99, 0x3e, 0xb8, 0x6f, 0x88, 0xdd, 0x52, 0x8a, 0x9c, 0x67, 0x02, 0xe1, 0x19,
	0xb9, 0xd2, 0x79, 0x83, 0xce, 0xe8, 0xd6, 0xd8, 0x9a, 0x5a, 0x5e, 0x7d, 0x7d, 0x4f, 0xa9, 0x02,
	0xd3, 0x9a, 0xfe, 0xba, 0x20, 0xf6, 0x87, 0xa2, 0x5c, 0x6b, 0xef, 0x0a, 0x8b, 0x8a, 0x6d, 0x11,
	0xde, 0x12, 0xeb, 0x7d, 0x81, 0xa1, 0x44, 0x55, 0x86, 0xb6, 0xd3, 0xb9, 0xdf, 0x3a, 0x2c, 0x7c,
	0x17, 0x7e, 0xfc, 0xfe, 0xf3, 0xb3, 0x7b, 0xcf, 0x25, 0xb4, 0x7a, 0x65, 0xfe, 0x0f, 0xde, 0x91,
	0x3b, 0xcd, 0x75, 0xe0, 0x50, 0xee, 0xb4, 0x51, 0x6e, 0x5f, 0x79, 0x6d, 0x78, 0xb8, 0xf7, 0xd2,
	0x6f, 0x2c, 0xfa, 0x0e, 0x33, 0x62, 0x7d, 0xcc, 0xa3, 0xff, 0xca, 0x37, 0x8c, 0xe9, 0x09, 0xc3,
	0x27, 0x96, 0x8f, 0x09, 0x36, 0x8c, 0xa3, 0x7b, 0x9c, 0xa7, 0xbc, 0x3c, 0xa1, 0x2c, 0xc9, 0xdd,
	0x7f, 0x93, 0x85, 0xc7, 0xc6, 0x74, 0xf4, 0x28, 0x4e, 0xff, 0xa4, 0xae, 0x9f, 0xa0, 0x19, 0x0e,
	0xb4, 0x87, 0x83, 0xea, 0x55, 0xcd, 0xa4, 0x57, 0x32, 0x94, 0xa5, 0x00, 0x47, 0x03, 0x0e, 0x8a,
	0x0d, 0xfc, 0xc9, 0xd9, 0x9e, 0x09, 0x18, 0xa8, 0x00, 0x80, 0xeb, 0x3a, 0x80, 0x49, 0x4c, 0x05,
	0x15, 0x1a, 0xf9, 0x59, 0xad, 0x84, 0x71, 0xad, 0xb1, 0x10, 0x8c, 0x67, 0x70, 0xa3, 0x59, 0xe6,
	0xd8, 0x24, 0x3c, 0x3a, 0xaa, 0x1a, 0xf6, 0x50, 0xb1, 0x7b, 0x60, 0xef, 0xd9, 0x95, 0x96, 0xcc,
	0x5e, 0x7c, 0x7a, 0x1e, 0x33, 0xb9, 0x2b, 0x37, 0xde, 0x96, 0xa7, 0xb4, 0xde, 0x9f, 0x49, 0xb0,
	0xa4, 0x35, 0x65, 0x92, 0x6f, 0x26, 0x31, 0x37, 0xff, 0xba, 0xb9, 0x52, 0x3b, 0xfe, 0xfa, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x70, 0x90, 0xef, 0x4e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MruVGroupsServiceClient is the client API for MruVGroupsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVGroupsServiceClient interface {
	//CRUD items
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error)
	GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Group, error)
	UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error)
	DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupID, error)
	GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error)
	//Service status
	GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error)
	GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error)
}

type mruVGroupsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMruVGroupsServiceClient(cc *grpc.ClientConn) MruVGroupsServiceClient {
	return &mruVGroupsServiceClient{cc}
}

func (c *mruVGroupsServiceClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) GetGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) UpdateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) DeleteGroup(ctx context.Context, in *GroupID, opts ...grpc.CallOption) (*GroupID, error) {
	out := new(GroupID)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/DeleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) GetGroups(ctx context.Context, in *GetGroupsRequest, opts ...grpc.CallOption) (*GetGroupsResponse, error) {
	out := new(GetGroupsResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error) {
	out := new(common.ServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/GetServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGroupsServiceClient) GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error) {
	out := new(common.VersionResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVGroupsService/GetServiceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MruVGroupsServiceServer is the server API for MruVGroupsService service.
type MruVGroupsServiceServer interface {
	//CRUD items
	CreateGroup(context.Context, *Group) (*GroupID, error)
	GetGroup(context.Context, *GroupID) (*Group, error)
	UpdateGroup(context.Context, *Group) (*GroupID, error)
	DeleteGroup(context.Context, *GroupID) (*GroupID, error)
	GetGroups(context.Context, *GetGroupsRequest) (*GetGroupsResponse, error)
	//Service status
	GetServiceStatus(context.Context, *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error)
	GetServiceVersion(context.Context, *common.VersionRequest) (*common.VersionResponse, error)
}

// UnimplementedMruVGroupsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVGroupsServiceServer struct {
}

func (*UnimplementedMruVGroupsServiceServer) CreateGroup(ctx context.Context, req *Group) (*GroupID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) GetGroup(ctx context.Context, req *GroupID) (*Group, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) UpdateGroup(ctx context.Context, req *Group) (*GroupID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) DeleteGroup(ctx context.Context, req *GroupID) (*GroupID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroup not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) GetGroups(ctx context.Context, req *GetGroupsRequest) (*GetGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) GetServiceStatus(ctx context.Context, req *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (*UnimplementedMruVGroupsServiceServer) GetServiceVersion(ctx context.Context, req *common.VersionRequest) (*common.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceVersion not implemented")
}

func RegisterMruVGroupsServiceServer(s *grpc.Server, srv MruVGroupsServiceServer) {
	s.RegisterService(&_MruVGroupsService_serviceDesc, srv)
}

func _MruVGroupsService_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).GetGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).UpdateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).DeleteGroup(ctx, req.(*GroupID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).GetGroups(ctx, req.(*GetGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/GetServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).GetServiceStatus(ctx, req.(*common.ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGroupsService_GetServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGroupsServiceServer).GetServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVGroupsService/GetServiceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGroupsServiceServer).GetServiceVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MruVGroupsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.MruVGroupsService",
	HandlerType: (*MruVGroupsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _MruVGroupsService_CreateGroup_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _MruVGroupsService_GetGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _MruVGroupsService_UpdateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _MruVGroupsService_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _MruVGroupsService_GetGroups_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _MruVGroupsService_GetServiceStatus_Handler,
		},
		{
			MethodName: "GetServiceVersion",
			Handler:    _MruVGroupsService_GetServiceVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups/groups.proto",
}
