// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: devtools/devtools.proto

package devtools

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _devtools_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetPositionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPositionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Category

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPositionsRequestValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPositionsRequestValidationError is the validation error returned by
// GetPositionsRequest.Validate if the designated constraints aren't met.
type GetPositionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPositionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPositionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPositionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPositionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPositionsRequestValidationError) ErrorName() string {
	return "GetPositionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPositionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPositionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPositionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPositionsRequestValidationError{}

// Validate checks the field values on GetPositionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPositionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetPositions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPositionsResponseValidationError{
					field:  fmt.Sprintf("Positions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPositionsResponseValidationError is the validation error returned by
// GetPositionsResponse.Validate if the designated constraints aren't met.
type GetPositionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPositionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPositionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPositionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPositionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPositionsResponseValidationError) ErrorName() string {
	return "GetPositionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPositionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPositionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPositionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPositionsResponseValidationError{}

// Validate checks the field values on SavePositionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SavePositionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SavePositionRequestValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SavePositionRequestValidationError is the validation error returned by
// SavePositionRequest.Validate if the designated constraints aren't met.
type SavePositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePositionRequestValidationError) ErrorName() string {
	return "SavePositionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SavePositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePositionRequestValidationError{}

// Validate checks the field values on SavePositionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SavePositionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// SavePositionResponseValidationError is the validation error returned by
// SavePositionResponse.Validate if the designated constraints aren't met.
type SavePositionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SavePositionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SavePositionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SavePositionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SavePositionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SavePositionResponseValidationError) ErrorName() string {
	return "SavePositionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SavePositionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSavePositionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SavePositionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SavePositionResponseValidationError{}

// Validate checks the field values on DeletePositionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePositionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeletePositionRequestValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeletePositionRequestValidationError is the validation error returned by
// DeletePositionRequest.Validate if the designated constraints aren't met.
type DeletePositionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePositionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePositionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePositionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePositionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePositionRequestValidationError) ErrorName() string {
	return "DeletePositionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePositionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePositionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePositionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePositionRequestValidationError{}

// Validate checks the field values on DeletePositionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePositionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// DeletePositionResponseValidationError is the validation error returned by
// DeletePositionResponse.Validate if the designated constraints aren't met.
type DeletePositionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePositionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePositionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePositionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePositionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePositionResponseValidationError) ErrorName() string {
	return "DeletePositionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePositionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePositionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePositionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePositionResponseValidationError{}

// Validate checks the field values on GetOutfitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOutfitsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Author

	return nil
}

// GetOutfitsRequestValidationError is the validation error returned by
// GetOutfitsRequest.Validate if the designated constraints aren't met.
type GetOutfitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOutfitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOutfitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOutfitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOutfitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOutfitsRequestValidationError) ErrorName() string {
	return "GetOutfitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOutfitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOutfitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOutfitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOutfitsRequestValidationError{}

// Validate checks the field values on GetOutfitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOutfitsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOutfits() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOutfitsResponseValidationError{
					field:  fmt.Sprintf("Outfits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetOutfitsResponseValidationError is the validation error returned by
// GetOutfitsResponse.Validate if the designated constraints aren't met.
type GetOutfitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOutfitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOutfitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOutfitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOutfitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOutfitsResponseValidationError) ErrorName() string {
	return "GetOutfitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOutfitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOutfitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOutfitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOutfitsResponseValidationError{}

// Validate checks the field values on SaveOutfitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SaveOutfitRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOutfit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveOutfitRequestValidationError{
				field:  "Outfit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SaveOutfitRequestValidationError is the validation error returned by
// SaveOutfitRequest.Validate if the designated constraints aren't met.
type SaveOutfitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveOutfitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveOutfitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveOutfitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveOutfitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveOutfitRequestValidationError) ErrorName() string {
	return "SaveOutfitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveOutfitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveOutfitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveOutfitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveOutfitRequestValidationError{}

// Validate checks the field values on SaveOutfitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SaveOutfitResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// SaveOutfitResponseValidationError is the validation error returned by
// SaveOutfitResponse.Validate if the designated constraints aren't met.
type SaveOutfitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveOutfitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveOutfitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveOutfitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveOutfitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveOutfitResponseValidationError) ErrorName() string {
	return "SaveOutfitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveOutfitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveOutfitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveOutfitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveOutfitResponseValidationError{}

// Validate checks the field values on GetAnimationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnimationsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Dict

	// no validation rules for Name

	return nil
}

// GetAnimationsRequestValidationError is the validation error returned by
// GetAnimationsRequest.Validate if the designated constraints aren't met.
type GetAnimationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationsRequestValidationError) ErrorName() string {
	return "GetAnimationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationsRequestValidationError{}

// Validate checks the field values on GetAnimationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnimationsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAnimations() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAnimationsResponseValidationError{
					field:  fmt.Sprintf("Animations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetAnimationsResponseValidationError is the validation error returned by
// GetAnimationsResponse.Validate if the designated constraints aren't met.
type GetAnimationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationsResponseValidationError) ErrorName() string {
	return "GetAnimationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationsResponseValidationError{}

// Validate checks the field values on GetAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnimationRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Dict

	// no validation rules for Name

	return nil
}

// GetAnimationRequestValidationError is the validation error returned by
// GetAnimationRequest.Validate if the designated constraints aren't met.
type GetAnimationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationRequestValidationError) ErrorName() string {
	return "GetAnimationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationRequestValidationError{}

// Validate checks the field values on GetAnimationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnimationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAnimation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAnimationResponseValidationError{
				field:  "Animation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAnimationResponseValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAnimationResponseValidationError is the validation error returned by
// GetAnimationResponse.Validate if the designated constraints aren't met.
type GetAnimationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationResponseValidationError) ErrorName() string {
	return "GetAnimationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationResponseValidationError{}

// Validate checks the field values on SaveAnimationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SaveAnimationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAnimation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SaveAnimationRequestValidationError{
				field:  "Animation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SaveAnimationRequestValidationError is the validation error returned by
// SaveAnimationRequest.Validate if the designated constraints aren't met.
type SaveAnimationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveAnimationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveAnimationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveAnimationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveAnimationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveAnimationRequestValidationError) ErrorName() string {
	return "SaveAnimationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SaveAnimationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveAnimationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveAnimationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveAnimationRequestValidationError{}

// Validate checks the field values on SaveAnimationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SaveAnimationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Success

	return nil
}

// SaveAnimationResponseValidationError is the validation error returned by
// SaveAnimationResponse.Validate if the designated constraints aren't met.
type SaveAnimationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveAnimationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveAnimationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveAnimationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveAnimationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveAnimationResponseValidationError) ErrorName() string {
	return "SaveAnimationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SaveAnimationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveAnimationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveAnimationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveAnimationResponseValidationError{}

// Validate checks the field values on GetPositionsResponse_Row with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPositionsResponse_Row) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPosition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPositionsResponse_RowValidationError{
				field:  "Position",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPositionsResponse_RowValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPositionsResponse_RowValidationError is the validation error returned by
// GetPositionsResponse_Row.Validate if the designated constraints aren't met.
type GetPositionsResponse_RowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPositionsResponse_RowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPositionsResponse_RowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPositionsResponse_RowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPositionsResponse_RowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPositionsResponse_RowValidationError) ErrorName() string {
	return "GetPositionsResponse_RowValidationError"
}

// Error satisfies the builtin error interface
func (e GetPositionsResponse_RowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPositionsResponse_Row.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPositionsResponse_RowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPositionsResponse_RowValidationError{}

// Validate checks the field values on GetOutfitsResponse_Row with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOutfitsResponse_Row) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOutfit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOutfitsResponse_RowValidationError{
				field:  "Outfit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOutfitsResponse_RowValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOutfitsResponse_RowValidationError is the validation error returned by
// GetOutfitsResponse_Row.Validate if the designated constraints aren't met.
type GetOutfitsResponse_RowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOutfitsResponse_RowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOutfitsResponse_RowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOutfitsResponse_RowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOutfitsResponse_RowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOutfitsResponse_RowValidationError) ErrorName() string {
	return "GetOutfitsResponse_RowValidationError"
}

// Error satisfies the builtin error interface
func (e GetOutfitsResponse_RowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOutfitsResponse_Row.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOutfitsResponse_RowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOutfitsResponse_RowValidationError{}

// Validate checks the field values on GetAnimationsResponse_Row with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAnimationsResponse_Row) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAnimation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAnimationsResponse_RowValidationError{
				field:  "Animation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAnimationsResponse_RowValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAnimationsResponse_RowValidationError is the validation error returned by
// GetAnimationsResponse_Row.Validate if the designated constraints aren't met.
type GetAnimationsResponse_RowValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAnimationsResponse_RowValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAnimationsResponse_RowValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAnimationsResponse_RowValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAnimationsResponse_RowValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAnimationsResponse_RowValidationError) ErrorName() string {
	return "GetAnimationsResponse_RowValidationError"
}

// Error satisfies the builtin error interface
func (e GetAnimationsResponse_RowValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAnimationsResponse_Row.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAnimationsResponse_RowValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAnimationsResponse_RowValidationError{}
