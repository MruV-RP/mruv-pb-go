// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: devtools/devtools_model.proto

package devtools

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _devtools_model_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Position with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Position) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// PositionValidationError is the validation error returned by
// Position.Validate if the designated constraints aren't met.
type PositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionValidationError) ErrorName() string { return "PositionValidationError" }

// Error satisfies the builtin error interface
func (e PositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionValidationError{}

// Validate checks the field values on Outfit with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Outfit) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Category

	return nil
}

// OutfitValidationError is the validation error returned by Outfit.Validate if
// the designated constraints aren't met.
type OutfitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OutfitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OutfitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OutfitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OutfitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OutfitValidationError) ErrorName() string { return "OutfitValidationError" }

// Error satisfies the builtin error interface
func (e OutfitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOutfit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OutfitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OutfitValidationError{}

// Validate checks the field values on Animation with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Animation) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Dict

	// no validation rules for Name

	// no validation rules for ReadableCategory

	// no validation rules for Category

	return nil
}

// AnimationValidationError is the validation error returned by
// Animation.Validate if the designated constraints aren't met.
type AnimationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnimationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnimationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnimationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnimationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnimationValidationError) ErrorName() string { return "AnimationValidationError" }

// Error satisfies the builtin error interface
func (e AnimationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnimation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnimationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnimationValidationError{}

// Validate checks the field values on Player with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Player) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Hash

	return nil
}

// PlayerValidationError is the validation error returned by Player.Validate if
// the designated constraints aren't met.
type PlayerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlayerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlayerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlayerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlayerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlayerValidationError) ErrorName() string { return "PlayerValidationError" }

// Error satisfies the builtin error interface
func (e PlayerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlayer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlayerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlayerValidationError{}
