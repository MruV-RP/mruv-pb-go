// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plot/plots.proto

package plots

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _plots_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreatePlotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreatePlotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePlotRequestValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CreatePlotRequestValidationError is the validation error returned by
// CreatePlotRequest.Validate if the designated constraints aren't met.
type CreatePlotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlotRequestValidationError) ErrorName() string {
	return "CreatePlotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlotRequestValidationError{}

// Validate checks the field values on CreatePlotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePlotResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreatePlotResponseValidationError is the validation error returned by
// CreatePlotResponse.Validate if the designated constraints aren't met.
type CreatePlotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlotResponseValidationError) ErrorName() string {
	return "CreatePlotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlotResponseValidationError{}

// Validate checks the field values on GetPlotRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetPlotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetPlotRequestValidationError is the validation error returned by
// GetPlotRequest.Validate if the designated constraints aren't met.
type GetPlotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlotRequestValidationError) ErrorName() string { return "GetPlotRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPlotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlotRequestValidationError{}

// Validate checks the field values on GetPlotResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPlotResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Description

	for idx, item := range m.GetPoints() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlotResponseValidationError{
					field:  fmt.Sprintf("Points[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPlotResponseValidationError is the validation error returned by
// GetPlotResponse.Validate if the designated constraints aren't met.
type GetPlotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlotResponseValidationError) ErrorName() string { return "GetPlotResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPlotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlotResponseValidationError{}

// Validate checks the field values on UpdatePlotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatePlotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// UpdatePlotRequestValidationError is the validation error returned by
// UpdatePlotRequest.Validate if the designated constraints aren't met.
type UpdatePlotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlotRequestValidationError) ErrorName() string {
	return "UpdatePlotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlotRequestValidationError{}

// Validate checks the field values on UpdatePlotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePlotResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdatePlotResponseValidationError is the validation error returned by
// UpdatePlotResponse.Validate if the designated constraints aren't met.
type UpdatePlotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePlotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePlotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePlotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePlotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePlotResponseValidationError) ErrorName() string {
	return "UpdatePlotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePlotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePlotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePlotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePlotResponseValidationError{}

// Validate checks the field values on DeletePlotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeletePlotRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeletePlotRequestValidationError is the validation error returned by
// DeletePlotRequest.Validate if the designated constraints aren't met.
type DeletePlotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlotRequestValidationError) ErrorName() string {
	return "DeletePlotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlotRequestValidationError{}

// Validate checks the field values on DeletePlotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePlotResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePlotResponseValidationError is the validation error returned by
// DeletePlotResponse.Validate if the designated constraints aren't met.
type DeletePlotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlotResponseValidationError) ErrorName() string {
	return "DeletePlotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlotResponseValidationError{}
