// Code generated by protoc-gen-go. DO NOT EDIT.
// source: characters/characters.proto

package characters

import (
	context "context"
	fmt "fmt"
	common "github.com/MruV-RP/mruv-pb-go/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//requests & response messages
type DeathStreamRequest struct {
	DeathTypes           []DeathType `protobuf:"varint,1,rep,packed,name=death_types,json=deathTypes,proto3,enum=mruv.DeathType" json:"death_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DeathStreamRequest) Reset()         { *m = DeathStreamRequest{} }
func (m *DeathStreamRequest) String() string { return proto.CompactTextString(m) }
func (*DeathStreamRequest) ProtoMessage()    {}
func (*DeathStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cc9875990e6028d, []int{0}
}

func (m *DeathStreamRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeathStreamRequest.Unmarshal(m, b)
}
func (m *DeathStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeathStreamRequest.Marshal(b, m, deterministic)
}
func (m *DeathStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeathStreamRequest.Merge(m, src)
}
func (m *DeathStreamRequest) XXX_Size() int {
	return xxx_messageInfo_DeathStreamRequest.Size(m)
}
func (m *DeathStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeathStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeathStreamRequest proto.InternalMessageInfo

func (m *DeathStreamRequest) GetDeathTypes() []DeathType {
	if m != nil {
		return m.DeathTypes
	}
	return nil
}

type DeathStreamResponse struct {
	Character            *Character `protobuf:"bytes,1,opt,name=character,proto3" json:"character,omitempty"`
	DeathType            DeathType  `protobuf:"varint,2,opt,name=death_type,json=deathType,proto3,enum=mruv.DeathType" json:"death_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DeathStreamResponse) Reset()         { *m = DeathStreamResponse{} }
func (m *DeathStreamResponse) String() string { return proto.CompactTextString(m) }
func (*DeathStreamResponse) ProtoMessage()    {}
func (*DeathStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8cc9875990e6028d, []int{1}
}

func (m *DeathStreamResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeathStreamResponse.Unmarshal(m, b)
}
func (m *DeathStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeathStreamResponse.Marshal(b, m, deterministic)
}
func (m *DeathStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeathStreamResponse.Merge(m, src)
}
func (m *DeathStreamResponse) XXX_Size() int {
	return xxx_messageInfo_DeathStreamResponse.Size(m)
}
func (m *DeathStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeathStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeathStreamResponse proto.InternalMessageInfo

func (m *DeathStreamResponse) GetCharacter() *Character {
	if m != nil {
		return m.Character
	}
	return nil
}

func (m *DeathStreamResponse) GetDeathType() DeathType {
	if m != nil {
		return m.DeathType
	}
	return DeathType_DEATH_TYPE_NONE
}

func init() {
	proto.RegisterType((*DeathStreamRequest)(nil), "mruv.DeathStreamRequest")
	proto.RegisterType((*DeathStreamResponse)(nil), "mruv.DeathStreamResponse")
}

func init() { proto.RegisterFile("characters/characters.proto", fileDescriptor_8cc9875990e6028d) }

var fileDescriptor_8cc9875990e6028d = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0xf9, 0x90, 0xba, 0xad, 0x9a, 0x76, 0x42, 0x82, 0x71, 0x00, 0xa5, 0xe6, 0x12,
	0x22, 0xc5, 0x2e, 0xe5, 0x0d, 0x68, 0x45, 0x84, 0x50, 0x45, 0xe5, 0x54, 0x3d, 0x70, 0x29, 0x1b,
	0x67, 0x14, 0x1b, 0xd9, 0x5e, 0xb3, 0x3b, 0xb6, 0x54, 0x21, 0x2e, 0xbc, 0x00, 0x07, 0x1e, 0x8d,
	0x57, 0xe0, 0x41, 0x90, 0xbf, 0xe2, 0xd8, 0x58, 0xa8, 0xb7, 0xf5, 0x7f, 0x66, 0x7e, 0xff, 0x59,
	0xcf, 0x2c, 0x1b, 0xb9, 0x1e, 0x97, 0xdc, 0x25, 0x94, 0xca, 0xae, 0x8f, 0x56, 0x2c, 0x05, 0x09,
	0x78, 0x10, 0xca, 0x24, 0x35, 0x9e, 0xad, 0x85, 0x58, 0x07, 0x68, 0xf3, 0xd8, 0xb7, 0x79, 0x14,
	0x09, 0xe2, 0xe4, 0x8b, 0xa8, 0xcc, 0x31, 0xfa, 0xae, 0x08, 0x43, 0x11, 0xd9, 0x1e, 0xf2, 0x80,
	0xbc, 0x52, 0x3c, 0xee, 0xa4, 0xde, 0x84, 0x62, 0x85, 0x41, 0x91, 0x62, 0xbe, 0x63, 0x70, 0x8e,
	0x9c, 0xbc, 0x05, 0x49, 0xe4, 0xa1, 0x83, 0x5f, 0x13, 0x54, 0x04, 0x27, 0x6c, 0x6f, 0x95, 0xa9,
	0x37, 0x74, 0x1b, 0xa3, 0xd2, 0xb5, 0xf1, 0xfd, 0xc9, 0xc1, 0x69, 0xcf, 0xca, 0xfa, 0xb0, 0xf2,
	0xf4, 0xab, 0xdb, 0x18, 0x1d, 0xb6, 0xaa, 0x8e, 0xca, 0x24, 0xd6, 0x6f, 0x70, 0x54, 0x2c, 0x22,
	0x85, 0x30, 0x63, 0xbb, 0x1b, 0x63, 0x5d, 0x1b, 0x6b, 0x93, 0xbd, 0x0a, 0x73, 0x56, 0xc9, 0x4e,
	0x9d, 0x01, 0x16, 0x63, 0xb5, 0xaf, 0xbe, 0x33, 0xd6, 0xba, 0x6c, 0x77, 0x37, 0xb6, 0xa7, 0x3f,
	0x1f, 0xb2, 0xc1, 0x85, 0x4c, 0xae, 0x37, 0x30, 0xb5, 0x40, 0x99, 0xfa, 0x2e, 0xc2, 0x05, 0xeb,
	0x9d, 0x49, 0xe4, 0x84, 0x9b, 0x10, 0xb4, 0x8d, 0x8d, 0xa3, 0x96, 0xf0, 0xfe, 0xdc, 0x1c, 0xfe,
	0xf8, 0xfd, 0xe7, 0xd7, 0xce, 0xa1, 0x79, 0x60, 0xa7, 0xaf, 0xb7, 0x7e, 0x19, 0x7c, 0x64, 0xfb,
	0x73, 0xa4, 0x9a, 0xf5, 0x6f, 0xa9, 0xd1, 0xc6, 0x9b, 0xa3, 0x9c, 0x35, 0x80, 0x7e, 0x93, 0x65,
	0x7f, 0xf3, 0x57, 0xdf, 0xe1, 0x8a, 0xf5, 0x1c, 0x0c, 0x45, 0x8a, 0xff, 0x65, 0x76, 0x74, 0x58,
	0x52, 0xa7, 0x9d, 0x54, 0x9f, 0x0d, 0x2f, 0x51, 0x86, 0x3c, 0xc2, 0xa8, 0x6e, 0xf6, 0x83, 0x1f,
	0x04, 0x77, 0x84, 0xbf, 0xca, 0xe1, 0x2f, 0xa7, 0xc7, 0x2d, 0x78, 0x5c, 0x41, 0x33, 0x56, 0x61,
	0x35, 0x67, 0xfb, 0xf9, 0x48, 0x54, 0x31, 0x71, 0xd0, 0xb7, 0xc6, 0xd4, 0x58, 0x26, 0xe3, 0x69,
	0x47, 0xa4, 0x58, 0x0f, 0xf3, 0xde, 0x89, 0x06, 0x5f, 0xd8, 0xe1, 0x1c, 0xa9, 0x9c, 0xdb, 0x82,
	0x38, 0x25, 0x0a, 0x8c, 0xa2, 0xa4, 0x21, 0x56, 0xb8, 0x51, 0x67, 0xac, 0x04, 0x3e, 0xcf, 0x2f,
	0xf0, 0x04, 0x06, 0xad, 0x0b, 0xa8, 0x82, 0xfb, 0x99, 0x1d, 0xd5, 0x5e, 0xd7, 0x28, 0x95, 0x2f,
	0x22, 0x78, 0x5c, 0x00, 0xcb, 0xcf, 0xca, 0x66, 0xd0, 0x52, 0x4b, 0x83, 0x17, 0xb9, 0x81, 0x0e,
	0xc3, 0x96, 0x41, 0x5a, 0xe4, 0xbd, 0x9d, 0x7e, 0x9a, 0xac, 0x7d, 0xf2, 0x92, 0xa5, 0xe5, 0x8a,
	0xd0, 0xce, 0x76, 0x73, 0xe6, 0x5c, 0xda, 0x19, 0x6a, 0x16, 0x2f, 0x67, 0x6b, 0xb1, 0x55, 0xb3,
	0x7c, 0x94, 0x3f, 0xc1, 0x37, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52, 0xbd, 0x01, 0xfe, 0xfd,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MruVCharactersServiceClient is the client API for MruVCharactersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVCharactersServiceClient interface {
	//CRUD
	CreateCharacter(ctx context.Context, in *Character, opts ...grpc.CallOption) (*CharacterID, error)
	GetCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*Character, error)
	RemoveCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*CharacterID, error)
	//Deaths
	PermanentCharacterKill(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*CharacterID, error)
	DeathsStream(ctx context.Context, in *DeathStreamRequest, opts ...grpc.CallOption) (MruVCharactersService_DeathsStreamClient, error)
	//Service status
	GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error)
	GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error)
}

type mruVCharactersServiceClient struct {
	cc *grpc.ClientConn
}

func NewMruVCharactersServiceClient(cc *grpc.ClientConn) MruVCharactersServiceClient {
	return &mruVCharactersServiceClient{cc}
}

func (c *mruVCharactersServiceClient) CreateCharacter(ctx context.Context, in *Character, opts ...grpc.CallOption) (*CharacterID, error) {
	out := new(CharacterID)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/CreateCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVCharactersServiceClient) GetCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*Character, error) {
	out := new(Character)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/GetCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVCharactersServiceClient) RemoveCharacter(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*CharacterID, error) {
	out := new(CharacterID)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/RemoveCharacter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVCharactersServiceClient) PermanentCharacterKill(ctx context.Context, in *CharacterID, opts ...grpc.CallOption) (*CharacterID, error) {
	out := new(CharacterID)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/PermanentCharacterKill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVCharactersServiceClient) DeathsStream(ctx context.Context, in *DeathStreamRequest, opts ...grpc.CallOption) (MruVCharactersService_DeathsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVCharactersService_serviceDesc.Streams[0], "/mruv.MruVCharactersService/DeathsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVCharactersServiceDeathsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVCharactersService_DeathsStreamClient interface {
	Recv() (*DeathStreamResponse, error)
	grpc.ClientStream
}

type mruVCharactersServiceDeathsStreamClient struct {
	grpc.ClientStream
}

func (x *mruVCharactersServiceDeathsStreamClient) Recv() (*DeathStreamResponse, error) {
	m := new(DeathStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mruVCharactersServiceClient) GetServiceStatus(ctx context.Context, in *common.ServiceStatusRequest, opts ...grpc.CallOption) (*common.ServiceStatusResponse, error) {
	out := new(common.ServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/GetServiceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVCharactersServiceClient) GetServiceVersion(ctx context.Context, in *common.VersionRequest, opts ...grpc.CallOption) (*common.VersionResponse, error) {
	out := new(common.VersionResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVCharactersService/GetServiceVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MruVCharactersServiceServer is the server API for MruVCharactersService service.
type MruVCharactersServiceServer interface {
	//CRUD
	CreateCharacter(context.Context, *Character) (*CharacterID, error)
	GetCharacter(context.Context, *CharacterID) (*Character, error)
	RemoveCharacter(context.Context, *CharacterID) (*CharacterID, error)
	//Deaths
	PermanentCharacterKill(context.Context, *CharacterID) (*CharacterID, error)
	DeathsStream(*DeathStreamRequest, MruVCharactersService_DeathsStreamServer) error
	//Service status
	GetServiceStatus(context.Context, *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error)
	GetServiceVersion(context.Context, *common.VersionRequest) (*common.VersionResponse, error)
}

// UnimplementedMruVCharactersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVCharactersServiceServer struct {
}

func (*UnimplementedMruVCharactersServiceServer) CreateCharacter(ctx context.Context, req *Character) (*CharacterID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) GetCharacter(ctx context.Context, req *CharacterID) (*Character, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) RemoveCharacter(ctx context.Context, req *CharacterID) (*CharacterID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCharacter not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) PermanentCharacterKill(ctx context.Context, req *CharacterID) (*CharacterID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentCharacterKill not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) DeathsStream(req *DeathStreamRequest, srv MruVCharactersService_DeathsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeathsStream not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) GetServiceStatus(ctx context.Context, req *common.ServiceStatusRequest) (*common.ServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (*UnimplementedMruVCharactersServiceServer) GetServiceVersion(ctx context.Context, req *common.VersionRequest) (*common.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceVersion not implemented")
}

func RegisterMruVCharactersServiceServer(s *grpc.Server, srv MruVCharactersServiceServer) {
	s.RegisterService(&_MruVCharactersService_serviceDesc, srv)
}

func _MruVCharactersService_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Character)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/CreateCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).CreateCharacter(ctx, req.(*Character))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVCharactersService_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/GetCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).GetCharacter(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVCharactersService_RemoveCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).RemoveCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/RemoveCharacter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).RemoveCharacter(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVCharactersService_PermanentCharacterKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CharacterID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).PermanentCharacterKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/PermanentCharacterKill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).PermanentCharacterKill(ctx, req.(*CharacterID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVCharactersService_DeathsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeathStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVCharactersServiceServer).DeathsStream(m, &mruVCharactersServiceDeathsStreamServer{stream})
}

type MruVCharactersService_DeathsStreamServer interface {
	Send(*DeathStreamResponse) error
	grpc.ServerStream
}

type mruVCharactersServiceDeathsStreamServer struct {
	grpc.ServerStream
}

func (x *mruVCharactersServiceDeathsStreamServer) Send(m *DeathStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MruVCharactersService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/GetServiceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).GetServiceStatus(ctx, req.(*common.ServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVCharactersService_GetServiceVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVCharactersServiceServer).GetServiceVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVCharactersService/GetServiceVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVCharactersServiceServer).GetServiceVersion(ctx, req.(*common.VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MruVCharactersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.MruVCharactersService",
	HandlerType: (*MruVCharactersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCharacter",
			Handler:    _MruVCharactersService_CreateCharacter_Handler,
		},
		{
			MethodName: "GetCharacter",
			Handler:    _MruVCharactersService_GetCharacter_Handler,
		},
		{
			MethodName: "RemoveCharacter",
			Handler:    _MruVCharactersService_RemoveCharacter_Handler,
		},
		{
			MethodName: "PermanentCharacterKill",
			Handler:    _MruVCharactersService_PermanentCharacterKill_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _MruVCharactersService_GetServiceStatus_Handler,
		},
		{
			MethodName: "GetServiceVersion",
			Handler:    _MruVCharactersService_GetServiceVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeathsStream",
			Handler:       _MruVCharactersService_DeathsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "characters/characters.proto",
}
