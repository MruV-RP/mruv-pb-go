// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gates/gates.proto

package gates

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _gates_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Gate with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Gate) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetGateObjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GateValidationError{
					field:  fmt.Sprintf("GateObjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSpot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GateValidationError{
				field:  "Spot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Opened

	// no validation rules for Locked

	return nil
}

// GateValidationError is the validation error returned by Gate.Validate if the
// designated constraints aren't met.
type GateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GateValidationError) ErrorName() string { return "GateValidationError" }

// Error satisfies the builtin error interface
func (e GateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GateValidationError{}

// Validate checks the field values on CreateGateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	for idx, item := range m.GetGateObjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateGateRequestValidationError{
					field:  fmt.Sprintf("GateObjects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSpot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateGateRequestValidationError{
				field:  "Spot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateGateRequestValidationError is the validation error returned by
// CreateGateRequest.Validate if the designated constraints aren't met.
type CreateGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGateRequestValidationError) ErrorName() string {
	return "CreateGateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGateRequestValidationError{}

// Validate checks the field values on CreateGateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateGateResponseValidationError is the validation error returned by
// CreateGateResponse.Validate if the designated constraints aren't met.
type CreateGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGateResponseValidationError) ErrorName() string {
	return "CreateGateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGateResponseValidationError{}

// Validate checks the field values on GetGateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetGateRequestValidationError is the validation error returned by
// GetGateRequest.Validate if the designated constraints aren't met.
type GetGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGateRequestValidationError) ErrorName() string { return "GetGateRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGateRequestValidationError{}

// Validate checks the field values on GetGateResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	if v, ok := interface{}(m.GetSpot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGateResponseValidationError{
				field:  "Spot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Opened

	// no validation rules for Locked

	return nil
}

// GetGateResponseValidationError is the validation error returned by
// GetGateResponse.Validate if the designated constraints aren't met.
type GetGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGateResponseValidationError) ErrorName() string { return "GetGateResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGateResponseValidationError{}

// Validate checks the field values on UpdateGateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for SpotId

	return nil
}

// UpdateGateRequestValidationError is the validation error returned by
// UpdateGateRequest.Validate if the designated constraints aren't met.
type UpdateGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGateRequestValidationError) ErrorName() string {
	return "UpdateGateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGateRequestValidationError{}

// Validate checks the field values on UpdateGateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateGateResponseValidationError is the validation error returned by
// UpdateGateResponse.Validate if the designated constraints aren't met.
type UpdateGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateGateResponseValidationError) ErrorName() string {
	return "UpdateGateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateGateResponseValidationError{}

// Validate checks the field values on DeleteGateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteGateRequestValidationError is the validation error returned by
// DeleteGateRequest.Validate if the designated constraints aren't met.
type DeleteGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGateRequestValidationError) ErrorName() string {
	return "DeleteGateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGateRequestValidationError{}

// Validate checks the field values on DeleteGateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteGateResponseValidationError is the validation error returned by
// DeleteGateResponse.Validate if the designated constraints aren't met.
type DeleteGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteGateResponseValidationError) ErrorName() string {
	return "DeleteGateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteGateResponseValidationError{}

// Validate checks the field values on LockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// LockRequestValidationError is the validation error returned by
// LockRequest.Validate if the designated constraints aren't met.
type LockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockRequestValidationError) ErrorName() string { return "LockRequestValidationError" }

// Error satisfies the builtin error interface
func (e LockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockRequestValidationError{}

// Validate checks the field values on LockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *LockResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LockResponseValidationError is the validation error returned by
// LockResponse.Validate if the designated constraints aren't met.
type LockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockResponseValidationError) ErrorName() string { return "LockResponseValidationError" }

// Error satisfies the builtin error interface
func (e LockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockResponseValidationError{}

// Validate checks the field values on UnlockRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnlockRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UnlockRequestValidationError is the validation error returned by
// UnlockRequest.Validate if the designated constraints aren't met.
type UnlockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockRequestValidationError) ErrorName() string { return "UnlockRequestValidationError" }

// Error satisfies the builtin error interface
func (e UnlockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockRequestValidationError{}

// Validate checks the field values on UnlockResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UnlockResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UnlockResponseValidationError is the validation error returned by
// UnlockResponse.Validate if the designated constraints aren't met.
type UnlockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockResponseValidationError) ErrorName() string { return "UnlockResponseValidationError" }

// Error satisfies the builtin error interface
func (e UnlockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockResponseValidationError{}

// Validate checks the field values on OpenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpenRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// OpenRequestValidationError is the validation error returned by
// OpenRequest.Validate if the designated constraints aren't met.
type OpenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenRequestValidationError) ErrorName() string { return "OpenRequestValidationError" }

// Error satisfies the builtin error interface
func (e OpenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenRequestValidationError{}

// Validate checks the field values on OpenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OpenResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// OpenResponseValidationError is the validation error returned by
// OpenResponse.Validate if the designated constraints aren't met.
type OpenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenResponseValidationError) ErrorName() string { return "OpenResponseValidationError" }

// Error satisfies the builtin error interface
func (e OpenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenResponseValidationError{}

// Validate checks the field values on CloseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CloseRequestValidationError is the validation error returned by
// CloseRequest.Validate if the designated constraints aren't met.
type CloseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseRequestValidationError) ErrorName() string { return "CloseRequestValidationError" }

// Error satisfies the builtin error interface
func (e CloseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseRequestValidationError{}

// Validate checks the field values on CloseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CloseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CloseResponseValidationError is the validation error returned by
// CloseResponse.Validate if the designated constraints aren't met.
type CloseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseResponseValidationError) ErrorName() string { return "CloseResponseValidationError" }

// Error satisfies the builtin error interface
func (e CloseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseResponseValidationError{}

// Validate checks the field values on FindNearestGateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FindNearestGateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for MaxDistance

	return nil
}

// FindNearestGateRequestValidationError is the validation error returned by
// FindNearestGateRequest.Validate if the designated constraints aren't met.
type FindNearestGateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindNearestGateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindNearestGateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindNearestGateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindNearestGateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindNearestGateRequestValidationError) ErrorName() string {
	return "FindNearestGateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindNearestGateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindNearestGateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindNearestGateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindNearestGateRequestValidationError{}

// Validate checks the field values on FindNearestGateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *FindNearestGateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Distance

	return nil
}

// FindNearestGateResponseValidationError is the validation error returned by
// FindNearestGateResponse.Validate if the designated constraints aren't met.
type FindNearestGateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindNearestGateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindNearestGateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindNearestGateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindNearestGateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindNearestGateResponseValidationError) ErrorName() string {
	return "FindNearestGateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindNearestGateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindNearestGateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindNearestGateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindNearestGateResponseValidationError{}
