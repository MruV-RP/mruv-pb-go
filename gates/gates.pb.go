// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: gates/gates.proto

package gates

import (
	context "context"
	objects "github.com/MruV-RP/mruv-pb-go/objects"
	spots "github.com/MruV-RP/mruv-pb-go/spots"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Gate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GateObjects []*objects.MovableObject `protobuf:"bytes,2,rep,name=gate_objects,json=gateObjects,proto3" json:"gate_objects,omitempty"`
	Spot        *spots.Spot              `protobuf:"bytes,3,opt,name=spot,proto3" json:"spot,omitempty"`
	Opened      bool                     `protobuf:"varint,4,opt,name=opened,proto3" json:"opened,omitempty"`
	Locked      bool                     `protobuf:"varint,5,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *Gate) Reset() {
	*x = Gate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gate) ProtoMessage() {}

func (x *Gate) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gate.ProtoReflect.Descriptor instead.
func (*Gate) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{0}
}

func (x *Gate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gate) GetGateObjects() []*objects.MovableObject {
	if x != nil {
		return x.GateObjects
	}
	return nil
}

func (x *Gate) GetSpot() *spots.Spot {
	if x != nil {
		return x.Spot
	}
	return nil
}

func (x *Gate) GetOpened() bool {
	if x != nil {
		return x.Opened
	}
	return false
}

func (x *Gate) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

// Request message for rpc `CreateGate`.
type CreateGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of objects to move on gate close/open. Every object should have only 2 states: opened, closed.
	GateObjects []*objects.MovableObject `protobuf:"bytes,2,rep,name=gate_objects,json=gateObjects,proto3" json:"gate_objects,omitempty"`
	// Gate spot. This spot define gate position.
	Spot *spots.Spot `protobuf:"bytes,3,opt,name=spot,proto3" json:"spot,omitempty"`
}

func (x *CreateGateRequest) Reset() {
	*x = CreateGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGateRequest) ProtoMessage() {}

func (x *CreateGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGateRequest.ProtoReflect.Descriptor instead.
func (*CreateGateRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateGateRequest) GetGateObjects() []*objects.MovableObject {
	if x != nil {
		return x.GateObjects
	}
	return nil
}

func (x *CreateGateRequest) GetSpot() *spots.Spot {
	if x != nil {
		return x.Spot
	}
	return nil
}

// Response message for rpc `CreateGate`.
type CreateGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateGateResponse) Reset() {
	*x = CreateGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGateResponse) ProtoMessage() {}

func (x *CreateGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGateResponse.ProtoReflect.Descriptor instead.
func (*CreateGateResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGateResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `GetGate`.
type GetGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGateRequest) Reset() {
	*x = GetGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGateRequest) ProtoMessage() {}

func (x *GetGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGateRequest.ProtoReflect.Descriptor instead.
func (*GetGateRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{3}
}

func (x *GetGateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `GetGate`.
type GetGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of objects to move on gate close/open. Every object should have only 2 states: opened, closed.
	MovableObjects []*objects.MovableObject `protobuf:"bytes,2,rep,name=movable_objects,json=movableObjects,proto3" json:"movable_objects,omitempty"`
	Spot           *spots.Spot              `protobuf:"bytes,3,opt,name=spot,proto3" json:"spot,omitempty"`
	Opened         bool                     `protobuf:"varint,4,opt,name=opened,proto3" json:"opened,omitempty"`
	Locked         bool                     `protobuf:"varint,5,opt,name=locked,proto3" json:"locked,omitempty"`
}

func (x *GetGateResponse) Reset() {
	*x = GetGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGateResponse) ProtoMessage() {}

func (x *GetGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGateResponse.ProtoReflect.Descriptor instead.
func (*GetGateResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{4}
}

func (x *GetGateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetGateResponse) GetMovableObjects() []*objects.MovableObject {
	if x != nil {
		return x.MovableObjects
	}
	return nil
}

func (x *GetGateResponse) GetSpot() *spots.Spot {
	if x != nil {
		return x.Spot
	}
	return nil
}

func (x *GetGateResponse) GetOpened() bool {
	if x != nil {
		return x.Opened
	}
	return false
}

func (x *GetGateResponse) GetLocked() bool {
	if x != nil {
		return x.Locked
	}
	return false
}

// Request message for rpc `UpdateGate`.
type UpdateGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SpotId             uint32   `protobuf:"varint,3,opt,name=spot_id,json=spotId,proto3" json:"spot_id,omitempty"`
	GateMovableObjects []uint32 `protobuf:"varint,4,rep,packed,name=gate_movable_objects,json=gateMovableObjects,proto3" json:"gate_movable_objects,omitempty"`
}

func (x *UpdateGateRequest) Reset() {
	*x = UpdateGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGateRequest) ProtoMessage() {}

func (x *UpdateGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGateRequest.ProtoReflect.Descriptor instead.
func (*UpdateGateRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateGateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateGateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateGateRequest) GetSpotId() uint32 {
	if x != nil {
		return x.SpotId
	}
	return 0
}

func (x *UpdateGateRequest) GetGateMovableObjects() []uint32 {
	if x != nil {
		return x.GateMovableObjects
	}
	return nil
}

// Response message for rpc `UpdateGate`.
type UpdateGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateGateResponse) Reset() {
	*x = UpdateGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGateResponse) ProtoMessage() {}

func (x *UpdateGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGateResponse.ProtoReflect.Descriptor instead.
func (*UpdateGateResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{6}
}

// Request message for rpc `DeleteGate`.
type DeleteGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGateRequest) Reset() {
	*x = DeleteGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGateRequest) ProtoMessage() {}

func (x *DeleteGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGateRequest.ProtoReflect.Descriptor instead.
func (*DeleteGateRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteGateRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `DeleteGate`.
type DeleteGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGateResponse) Reset() {
	*x = DeleteGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGateResponse) ProtoMessage() {}

func (x *DeleteGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGateResponse.ProtoReflect.Descriptor instead.
func (*DeleteGateResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{8}
}

// Request message for rpc `Lock`.
type LockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LockRequest) Reset() {
	*x = LockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockRequest) ProtoMessage() {}

func (x *LockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockRequest.ProtoReflect.Descriptor instead.
func (*LockRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{9}
}

func (x *LockRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `Lock`.
type LockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockResponse) Reset() {
	*x = LockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResponse) ProtoMessage() {}

func (x *LockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResponse.ProtoReflect.Descriptor instead.
func (*LockResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{10}
}

// Request message for rpc `Unlock`.
type UnlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UnlockRequest) Reset() {
	*x = UnlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockRequest) ProtoMessage() {}

func (x *UnlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockRequest.ProtoReflect.Descriptor instead.
func (*UnlockRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{11}
}

func (x *UnlockRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `Unlock`.
type UnlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnlockResponse) Reset() {
	*x = UnlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockResponse) ProtoMessage() {}

func (x *UnlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockResponse.ProtoReflect.Descriptor instead.
func (*UnlockResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{12}
}

// Request message for rpc `Open`.
type OpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *OpenRequest) Reset() {
	*x = OpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenRequest) ProtoMessage() {}

func (x *OpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenRequest.ProtoReflect.Descriptor instead.
func (*OpenRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{13}
}

func (x *OpenRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `Open`.
type OpenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenResponse) Reset() {
	*x = OpenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenResponse) ProtoMessage() {}

func (x *OpenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenResponse.ProtoReflect.Descriptor instead.
func (*OpenResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{14}
}

// Request message for rpc `Close`.
type CloseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{15}
}

func (x *CloseRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `Close`.
type CloseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseResponse) Reset() {
	*x = CloseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponse) ProtoMessage() {}

func (x *CloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponse.ProtoReflect.Descriptor instead.
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{16}
}

// Request message for rpc `FindNearestGate`.
type FindNearestGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X           float32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y           float32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	Z           float32 `protobuf:"fixed32,3,opt,name=z,proto3" json:"z,omitempty"`
	MaxDistance float32 `protobuf:"fixed32,4,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
}

func (x *FindNearestGateRequest) Reset() {
	*x = FindNearestGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearestGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearestGateRequest) ProtoMessage() {}

func (x *FindNearestGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearestGateRequest.ProtoReflect.Descriptor instead.
func (*FindNearestGateRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{17}
}

func (x *FindNearestGateRequest) GetX() float32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *FindNearestGateRequest) GetY() float32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *FindNearestGateRequest) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *FindNearestGateRequest) GetMaxDistance() float32 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

// Response message for rpc `FindNearestGate`.
type FindNearestGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Distance float32 `protobuf:"fixed32,2,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *FindNearestGateResponse) Reset() {
	*x = FindNearestGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindNearestGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindNearestGateResponse) ProtoMessage() {}

func (x *FindNearestGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindNearestGateResponse.ProtoReflect.Descriptor instead.
func (*FindNearestGateResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{18}
}

func (x *FindNearestGateResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FindNearestGateResponse) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

// Request message for rpc `FetchAllGates`.
type FetchAllGatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChunkSize uint32 `protobuf:"varint,1,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
}

func (x *FetchAllGatesRequest) Reset() {
	*x = FetchAllGatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllGatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllGatesRequest) ProtoMessage() {}

func (x *FetchAllGatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllGatesRequest.ProtoReflect.Descriptor instead.
func (*FetchAllGatesRequest) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{19}
}

func (x *FetchAllGatesRequest) GetChunkSize() uint32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

// Response message for rpc `FetchAllGates`.
type FetchAllGatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gates map[uint32]*Gate `protobuf:"bytes,1,rep,name=gates,proto3" json:"gates,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FetchAllGatesResponse) Reset() {
	*x = FetchAllGatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gates_gates_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchAllGatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchAllGatesResponse) ProtoMessage() {}

func (x *FetchAllGatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gates_gates_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchAllGatesResponse.ProtoReflect.Descriptor instead.
func (*FetchAllGatesResponse) Descriptor() ([]byte, []int) {
	return file_gates_gates_proto_rawDescGZIP(), []int{20}
}

func (x *FetchAllGatesResponse) GetGates() map[uint32]*Gate {
	if x != nil {
		return x.Gates
	}
	return nil
}

var File_gates_gates_proto protoreflect.FileDescriptor

var file_gates_gates_proto_rawDesc = []byte{
	0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x04, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e,
	0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x2e,
	0x53, 0x70, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2e, 0x4d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0e, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x73, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x52, 0x04, 0x73, 0x70, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x12, 0x67, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x0a, 0x0b,
	0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x0d, 0x55,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e,
	0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0e, 0x0a,
	0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a,
	0x0d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65,
	0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x01, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x45, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61,
	0x72, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x35, 0x0a, 0x14,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c,
	0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x05, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41,
	0x6c, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x47, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x1a, 0x4a, 0x0a, 0x0a, 0x47, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xe2, 0x07,
	0x0a, 0x10, 0x4d, 0x72, 0x75, 0x56, 0x47, 0x61, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x61, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d,
	0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x12, 0x66, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x32, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x2a, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x59,
	0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x17, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x61, 0x0a, 0x06, 0x55, 0x6e, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x04,
	0x4f, 0x70, 0x65, 0x6e, 0x12, 0x17, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22,
	0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x70, 0x65, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x5d, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x12, 0x18, 0x2e, 0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x72, 0x75,
	0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65,
	0x61, 0x72, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x65, 0x61, 0x72, 0x65,
	0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x6d, 0x72, 0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e,
	0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x61, 0x74, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x61, 0x72, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a,
	0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x20, 0x2e, 0x6d, 0x72, 0x75, 0x76,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x72,
	0x75, 0x76, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x41, 0x6c,
	0x6c, 0x47, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4d, 0x72, 0x75, 0x56, 0x2d, 0x52, 0x50, 0x2f, 0x6d, 0x72, 0x75, 0x76, 0x2d, 0x70, 0x62,
	0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_gates_gates_proto_rawDescOnce sync.Once
	file_gates_gates_proto_rawDescData = file_gates_gates_proto_rawDesc
)

func file_gates_gates_proto_rawDescGZIP() []byte {
	file_gates_gates_proto_rawDescOnce.Do(func() {
		file_gates_gates_proto_rawDescData = protoimpl.X.CompressGZIP(file_gates_gates_proto_rawDescData)
	})
	return file_gates_gates_proto_rawDescData
}

var file_gates_gates_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_gates_gates_proto_goTypes = []interface{}{
	(*Gate)(nil),                    // 0: mruv.gates.Gate
	(*CreateGateRequest)(nil),       // 1: mruv.gates.CreateGateRequest
	(*CreateGateResponse)(nil),      // 2: mruv.gates.CreateGateResponse
	(*GetGateRequest)(nil),          // 3: mruv.gates.GetGateRequest
	(*GetGateResponse)(nil),         // 4: mruv.gates.GetGateResponse
	(*UpdateGateRequest)(nil),       // 5: mruv.gates.UpdateGateRequest
	(*UpdateGateResponse)(nil),      // 6: mruv.gates.UpdateGateResponse
	(*DeleteGateRequest)(nil),       // 7: mruv.gates.DeleteGateRequest
	(*DeleteGateResponse)(nil),      // 8: mruv.gates.DeleteGateResponse
	(*LockRequest)(nil),             // 9: mruv.gates.LockRequest
	(*LockResponse)(nil),            // 10: mruv.gates.LockResponse
	(*UnlockRequest)(nil),           // 11: mruv.gates.UnlockRequest
	(*UnlockResponse)(nil),          // 12: mruv.gates.UnlockResponse
	(*OpenRequest)(nil),             // 13: mruv.gates.OpenRequest
	(*OpenResponse)(nil),            // 14: mruv.gates.OpenResponse
	(*CloseRequest)(nil),            // 15: mruv.gates.CloseRequest
	(*CloseResponse)(nil),           // 16: mruv.gates.CloseResponse
	(*FindNearestGateRequest)(nil),  // 17: mruv.gates.FindNearestGateRequest
	(*FindNearestGateResponse)(nil), // 18: mruv.gates.FindNearestGateResponse
	(*FetchAllGatesRequest)(nil),    // 19: mruv.gates.FetchAllGatesRequest
	(*FetchAllGatesResponse)(nil),   // 20: mruv.gates.FetchAllGatesResponse
	nil,                             // 21: mruv.gates.FetchAllGatesResponse.GatesEntry
	(*objects.MovableObject)(nil),   // 22: mruv.objects.MovableObject
	(*spots.Spot)(nil),              // 23: mruv.spots.Spot
}
var file_gates_gates_proto_depIdxs = []int32{
	22, // 0: mruv.gates.Gate.gate_objects:type_name -> mruv.objects.MovableObject
	23, // 1: mruv.gates.Gate.spot:type_name -> mruv.spots.Spot
	22, // 2: mruv.gates.CreateGateRequest.gate_objects:type_name -> mruv.objects.MovableObject
	23, // 3: mruv.gates.CreateGateRequest.spot:type_name -> mruv.spots.Spot
	22, // 4: mruv.gates.GetGateResponse.movable_objects:type_name -> mruv.objects.MovableObject
	23, // 5: mruv.gates.GetGateResponse.spot:type_name -> mruv.spots.Spot
	21, // 6: mruv.gates.FetchAllGatesResponse.gates:type_name -> mruv.gates.FetchAllGatesResponse.GatesEntry
	0,  // 7: mruv.gates.FetchAllGatesResponse.GatesEntry.value:type_name -> mruv.gates.Gate
	1,  // 8: mruv.gates.MruVGatesService.CreateGate:input_type -> mruv.gates.CreateGateRequest
	3,  // 9: mruv.gates.MruVGatesService.GetGate:input_type -> mruv.gates.GetGateRequest
	5,  // 10: mruv.gates.MruVGatesService.UpdateGate:input_type -> mruv.gates.UpdateGateRequest
	7,  // 11: mruv.gates.MruVGatesService.DeleteGate:input_type -> mruv.gates.DeleteGateRequest
	9,  // 12: mruv.gates.MruVGatesService.Lock:input_type -> mruv.gates.LockRequest
	11, // 13: mruv.gates.MruVGatesService.Unlock:input_type -> mruv.gates.UnlockRequest
	13, // 14: mruv.gates.MruVGatesService.Open:input_type -> mruv.gates.OpenRequest
	15, // 15: mruv.gates.MruVGatesService.Close:input_type -> mruv.gates.CloseRequest
	17, // 16: mruv.gates.MruVGatesService.FindNearestGate:input_type -> mruv.gates.FindNearestGateRequest
	19, // 17: mruv.gates.MruVGatesService.FetchAll:input_type -> mruv.gates.FetchAllGatesRequest
	2,  // 18: mruv.gates.MruVGatesService.CreateGate:output_type -> mruv.gates.CreateGateResponse
	4,  // 19: mruv.gates.MruVGatesService.GetGate:output_type -> mruv.gates.GetGateResponse
	6,  // 20: mruv.gates.MruVGatesService.UpdateGate:output_type -> mruv.gates.UpdateGateResponse
	8,  // 21: mruv.gates.MruVGatesService.DeleteGate:output_type -> mruv.gates.DeleteGateResponse
	10, // 22: mruv.gates.MruVGatesService.Lock:output_type -> mruv.gates.LockResponse
	12, // 23: mruv.gates.MruVGatesService.Unlock:output_type -> mruv.gates.UnlockResponse
	14, // 24: mruv.gates.MruVGatesService.Open:output_type -> mruv.gates.OpenResponse
	16, // 25: mruv.gates.MruVGatesService.Close:output_type -> mruv.gates.CloseResponse
	18, // 26: mruv.gates.MruVGatesService.FindNearestGate:output_type -> mruv.gates.FindNearestGateResponse
	20, // 27: mruv.gates.MruVGatesService.FetchAll:output_type -> mruv.gates.FetchAllGatesResponse
	18, // [18:28] is the sub-list for method output_type
	8,  // [8:18] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_gates_gates_proto_init() }
func file_gates_gates_proto_init() {
	if File_gates_gates_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gates_gates_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearestGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindNearestGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllGatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gates_gates_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchAllGatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gates_gates_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gates_gates_proto_goTypes,
		DependencyIndexes: file_gates_gates_proto_depIdxs,
		MessageInfos:      file_gates_gates_proto_msgTypes,
	}.Build()
	File_gates_gates_proto = out.File
	file_gates_gates_proto_rawDesc = nil
	file_gates_gates_proto_goTypes = nil
	file_gates_gates_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MruVGatesServiceClient is the client API for MruVGatesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVGatesServiceClient interface {
	// Create a gate or a moving objects objects group.
	CreateGate(ctx context.Context, in *CreateGateRequest, opts ...grpc.CallOption) (*CreateGateResponse, error)
	// Get a gate or a moving objects objects group.
	GetGate(ctx context.Context, in *GetGateRequest, opts ...grpc.CallOption) (*GetGateResponse, error)
	// Update a gate or a moving objects objects group.
	UpdateGate(ctx context.Context, in *UpdateGateRequest, opts ...grpc.CallOption) (*UpdateGateResponse, error)
	// Delete a gate or a moving objects objects group.
	DeleteGate(ctx context.Context, in *DeleteGateRequest, opts ...grpc.CallOption) (*DeleteGateResponse, error)
	// Lock a gate. Locked gate cannot be opened.
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	// Unload a gate, so it can be open.
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	// Opens a gate.
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	// Close a gate.
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	// Find gate that is closest to a specific position.
	FindNearestGate(ctx context.Context, in *FindNearestGateRequest, opts ...grpc.CallOption) (*FindNearestGateResponse, error)
	//
	FetchAll(ctx context.Context, in *FetchAllGatesRequest, opts ...grpc.CallOption) (MruVGatesService_FetchAllClient, error)
}

type mruVGatesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMruVGatesServiceClient(cc grpc.ClientConnInterface) MruVGatesServiceClient {
	return &mruVGatesServiceClient{cc}
}

func (c *mruVGatesServiceClient) CreateGate(ctx context.Context, in *CreateGateRequest, opts ...grpc.CallOption) (*CreateGateResponse, error) {
	out := new(CreateGateResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/CreateGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) GetGate(ctx context.Context, in *GetGateRequest, opts ...grpc.CallOption) (*GetGateResponse, error) {
	out := new(GetGateResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/GetGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) UpdateGate(ctx context.Context, in *UpdateGateRequest, opts ...grpc.CallOption) (*UpdateGateResponse, error) {
	out := new(UpdateGateResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/UpdateGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) DeleteGate(ctx context.Context, in *DeleteGateRequest, opts ...grpc.CallOption) (*DeleteGateResponse, error) {
	out := new(DeleteGateResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/DeleteGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) FindNearestGate(ctx context.Context, in *FindNearestGateRequest, opts ...grpc.CallOption) (*FindNearestGateResponse, error) {
	out := new(FindNearestGateResponse)
	err := c.cc.Invoke(ctx, "/mruv.gates.MruVGatesService/FindNearestGate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVGatesServiceClient) FetchAll(ctx context.Context, in *FetchAllGatesRequest, opts ...grpc.CallOption) (MruVGatesService_FetchAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MruVGatesService_serviceDesc.Streams[0], "/mruv.gates.MruVGatesService/FetchAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &mruVGatesServiceFetchAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MruVGatesService_FetchAllClient interface {
	Recv() (*FetchAllGatesResponse, error)
	grpc.ClientStream
}

type mruVGatesServiceFetchAllClient struct {
	grpc.ClientStream
}

func (x *mruVGatesServiceFetchAllClient) Recv() (*FetchAllGatesResponse, error) {
	m := new(FetchAllGatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MruVGatesServiceServer is the server API for MruVGatesService service.
type MruVGatesServiceServer interface {
	// Create a gate or a moving objects objects group.
	CreateGate(context.Context, *CreateGateRequest) (*CreateGateResponse, error)
	// Get a gate or a moving objects objects group.
	GetGate(context.Context, *GetGateRequest) (*GetGateResponse, error)
	// Update a gate or a moving objects objects group.
	UpdateGate(context.Context, *UpdateGateRequest) (*UpdateGateResponse, error)
	// Delete a gate or a moving objects objects group.
	DeleteGate(context.Context, *DeleteGateRequest) (*DeleteGateResponse, error)
	// Lock a gate. Locked gate cannot be opened.
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	// Unload a gate, so it can be open.
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	// Opens a gate.
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	// Close a gate.
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	// Find gate that is closest to a specific position.
	FindNearestGate(context.Context, *FindNearestGateRequest) (*FindNearestGateResponse, error)
	//
	FetchAll(*FetchAllGatesRequest, MruVGatesService_FetchAllServer) error
}

// UnimplementedMruVGatesServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVGatesServiceServer struct {
}

func (*UnimplementedMruVGatesServiceServer) CreateGate(context.Context, *CreateGateRequest) (*CreateGateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGate not implemented")
}
func (*UnimplementedMruVGatesServiceServer) GetGate(context.Context, *GetGateRequest) (*GetGateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGate not implemented")
}
func (*UnimplementedMruVGatesServiceServer) UpdateGate(context.Context, *UpdateGateRequest) (*UpdateGateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGate not implemented")
}
func (*UnimplementedMruVGatesServiceServer) DeleteGate(context.Context, *DeleteGateRequest) (*DeleteGateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGate not implemented")
}
func (*UnimplementedMruVGatesServiceServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedMruVGatesServiceServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (*UnimplementedMruVGatesServiceServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (*UnimplementedMruVGatesServiceServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (*UnimplementedMruVGatesServiceServer) FindNearestGate(context.Context, *FindNearestGateRequest) (*FindNearestGateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearestGate not implemented")
}
func (*UnimplementedMruVGatesServiceServer) FetchAll(*FetchAllGatesRequest, MruVGatesService_FetchAllServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchAll not implemented")
}

func RegisterMruVGatesServiceServer(s *grpc.Server, srv MruVGatesServiceServer) {
	s.RegisterService(&_MruVGatesService_serviceDesc, srv)
}

func _MruVGatesService_CreateGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).CreateGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/CreateGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).CreateGate(ctx, req.(*CreateGateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_GetGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).GetGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/GetGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).GetGate(ctx, req.(*GetGateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_UpdateGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).UpdateGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/UpdateGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).UpdateGate(ctx, req.(*UpdateGateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_DeleteGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).DeleteGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/DeleteGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).DeleteGate(ctx, req.(*DeleteGateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_FindNearestGate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindNearestGateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVGatesServiceServer).FindNearestGate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.gates.MruVGatesService/FindNearestGate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVGatesServiceServer).FindNearestGate(ctx, req.(*FindNearestGateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVGatesService_FetchAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchAllGatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MruVGatesServiceServer).FetchAll(m, &mruVGatesServiceFetchAllServer{stream})
}

type MruVGatesService_FetchAllServer interface {
	Send(*FetchAllGatesResponse) error
	grpc.ServerStream
}

type mruVGatesServiceFetchAllServer struct {
	grpc.ServerStream
}

func (x *mruVGatesServiceFetchAllServer) Send(m *FetchAllGatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _MruVGatesService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.gates.MruVGatesService",
	HandlerType: (*MruVGatesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGate",
			Handler:    _MruVGatesService_CreateGate_Handler,
		},
		{
			MethodName: "GetGate",
			Handler:    _MruVGatesService_GetGate_Handler,
		},
		{
			MethodName: "UpdateGate",
			Handler:    _MruVGatesService_UpdateGate_Handler,
		},
		{
			MethodName: "DeleteGate",
			Handler:    _MruVGatesService_DeleteGate_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _MruVGatesService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _MruVGatesService_Unlock_Handler,
		},
		{
			MethodName: "Open",
			Handler:    _MruVGatesService_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _MruVGatesService_Close_Handler,
		},
		{
			MethodName: "FindNearestGate",
			Handler:    _MruVGatesService_FindNearestGate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchAll",
			Handler:       _MruVGatesService_FetchAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gates/gates.proto",
}
