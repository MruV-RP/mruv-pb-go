// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: economy/economy.proto

package economy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _economy_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on RegisterProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Description

	// no validation rules for PriceClass

	// no validation rules for PriceRatio

	// no validation rules for StartingPrice

	return nil
}

// RegisterProductRequestValidationError is the validation error returned by
// RegisterProductRequest.Validate if the designated constraints aren't met.
type RegisterProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProductRequestValidationError) ErrorName() string {
	return "RegisterProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProductRequestValidationError{}

// Validate checks the field values on RegisterProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RegisterProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RegisterProductResponseValidationError is the validation error returned by
// RegisterProductResponse.Validate if the designated constraints aren't met.
type RegisterProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterProductResponseValidationError) ErrorName() string {
	return "RegisterProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterProductResponseValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Description

	// no validation rules for PriceClass

	// no validation rules for PriceRatio

	// no validation rules for StartingPrice

	// no validation rules for Price

	return nil
}

// GetProductResponseValidationError is the validation error returned by
// GetProductResponse.Validate if the designated constraints aren't met.
type GetProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductResponseValidationError) ErrorName() string {
	return "GetProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductResponseValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for FullName

	// no validation rules for Description

	// no validation rules for PriceClass

	// no validation rules for PriceRatio

	return nil
}

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateProductResponseValidationError is the validation error returned by
// UpdateProductResponse.Validate if the designated constraints aren't met.
type UpdateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductResponseValidationError) ErrorName() string {
	return "UpdateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductResponseValidationError{}

// Validate checks the field values on UpdatePriceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePriceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for NewPrice

	return nil
}

// UpdatePriceRequestValidationError is the validation error returned by
// UpdatePriceRequest.Validate if the designated constraints aren't met.
type UpdatePriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePriceRequestValidationError) ErrorName() string {
	return "UpdatePriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePriceRequestValidationError{}

// Validate checks the field values on UpdatePriceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePriceResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdatePriceResponseValidationError is the validation error returned by
// UpdatePriceResponse.Validate if the designated constraints aren't met.
type UpdatePriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePriceResponseValidationError) ErrorName() string {
	return "UpdatePriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePriceResponseValidationError{}

// Validate checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// DeleteProductRequestValidationError is the validation error returned by
// DeleteProductRequest.Validate if the designated constraints aren't met.
type DeleteProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductRequestValidationError) ErrorName() string {
	return "DeleteProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductRequestValidationError{}

// Validate checks the field values on DeleteProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteProductResponseValidationError is the validation error returned by
// DeleteProductResponse.Validate if the designated constraints aren't met.
type DeleteProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductResponseValidationError) ErrorName() string {
	return "DeleteProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductResponseValidationError{}

// Validate checks the field values on GetPriceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPriceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// GetPriceRequestValidationError is the validation error returned by
// GetPriceRequest.Validate if the designated constraints aren't met.
type GetPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceRequestValidationError) ErrorName() string { return "GetPriceRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceRequestValidationError{}

// Validate checks the field values on GetPriceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPriceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Price

	return nil
}

// GetPriceResponseValidationError is the validation error returned by
// GetPriceResponse.Validate if the designated constraints aren't met.
type GetPriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPriceResponseValidationError) ErrorName() string { return "GetPriceResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetPriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPriceResponseValidationError{}

// Validate checks the field values on BuyProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *BuyProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// BuyProductRequestValidationError is the validation error returned by
// BuyProductRequest.Validate if the designated constraints aren't met.
type BuyProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyProductRequestValidationError) ErrorName() string {
	return "BuyProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuyProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyProductRequestValidationError{}

// Validate checks the field values on BuyProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BuyProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BuyProductResponseValidationError is the validation error returned by
// BuyProductResponse.Validate if the designated constraints aren't met.
type BuyProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuyProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuyProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuyProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuyProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuyProductResponseValidationError) ErrorName() string {
	return "BuyProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuyProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuyProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuyProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuyProductResponseValidationError{}

// Validate checks the field values on WatchProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// WatchProductRequestValidationError is the validation error returned by
// WatchProductRequest.Validate if the designated constraints aren't met.
type WatchProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchProductRequestValidationError) ErrorName() string {
	return "WatchProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchProductRequestValidationError{}

// Validate checks the field values on WatchProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Event

	return nil
}

// WatchProductResponseValidationError is the validation error returned by
// WatchProductResponse.Validate if the designated constraints aren't met.
type WatchProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchProductResponseValidationError) ErrorName() string {
	return "WatchProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchProductResponseValidationError{}

// Validate checks the field values on WatchPriceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *WatchPriceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// WatchPriceRequestValidationError is the validation error returned by
// WatchPriceRequest.Validate if the designated constraints aren't met.
type WatchPriceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPriceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPriceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPriceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPriceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPriceRequestValidationError) ErrorName() string {
	return "WatchPriceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPriceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPriceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPriceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPriceRequestValidationError{}

// Validate checks the field values on WatchPriceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *WatchPriceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Price

	return nil
}

// WatchPriceResponseValidationError is the validation error returned by
// WatchPriceResponse.Validate if the designated constraints aren't met.
type WatchPriceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchPriceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchPriceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchPriceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchPriceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchPriceResponseValidationError) ErrorName() string {
	return "WatchPriceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchPriceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchPriceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchPriceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchPriceResponseValidationError{}
