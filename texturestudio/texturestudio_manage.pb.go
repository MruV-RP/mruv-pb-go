// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: texturestudio/texturestudio_manage.proto

package texturestudio

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for rpc `CreateServer`.
type CreateServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId uint32 `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *CreateServerRequest) Reset() {
	*x = CreateServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerRequest) ProtoMessage() {}

func (x *CreateServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerRequest.ProtoReflect.Descriptor instead.
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServerRequest) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

// Response message for rpc `CreateServer`.
type CreateServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CreateServerResponse) Reset() {
	*x = CreateServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServerResponse) ProtoMessage() {}

func (x *CreateServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServerResponse.ProtoReflect.Descriptor instead.
func (*CreateServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServerResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateServerResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Request message for rpc `GetServers`.
type GetServersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetServersRequest) Reset() {
	*x = GetServersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersRequest) ProtoMessage() {}

func (x *GetServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersRequest.ProtoReflect.Descriptor instead.
func (*GetServersRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{2}
}

// Response message for rpc `GetServers`.
type GetServersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServersResponse) Reset() {
	*x = GetServersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServersResponse) ProtoMessage() {}

func (x *GetServersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServersResponse.ProtoReflect.Descriptor instead.
func (*GetServersResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{3}
}

func (x *GetServersResponse) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

// Request message for rpc `MyServer`.
type MyServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MyServerRequest) Reset() {
	*x = MyServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServerRequest) ProtoMessage() {}

func (x *MyServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServerRequest.ProtoReflect.Descriptor instead.
func (*MyServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{4}
}

// Response message for rpc `MyServer`.
type MyServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MyServerResponse) Reset() {
	*x = MyServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MyServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MyServerResponse) ProtoMessage() {}

func (x *MyServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MyServerResponse.ProtoReflect.Descriptor instead.
func (*MyServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{5}
}

func (x *MyServerResponse) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for rpc `TransferOwnership`.
type TransferOwnershipRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	OwnerId  uint32 `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *TransferOwnershipRequest) Reset() {
	*x = TransferOwnershipRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOwnershipRequest) ProtoMessage() {}

func (x *TransferOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOwnershipRequest.ProtoReflect.Descriptor instead.
func (*TransferOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{6}
}

func (x *TransferOwnershipRequest) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *TransferOwnershipRequest) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

// Response message for rpc `TransferOwnership`.
type TransferOwnershipResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferOwnershipResponse) Reset() {
	*x = TransferOwnershipResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferOwnershipResponse) ProtoMessage() {}

func (x *TransferOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferOwnershipResponse.ProtoReflect.Descriptor instead.
func (*TransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{7}
}

// Request message for rpc `DeleteServer`.
type DeleteServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteServerRequest) Reset() {
	*x = DeleteServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerRequest) ProtoMessage() {}

func (x *DeleteServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteServerRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `DeleteServer`.
type DeleteServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteServerResponse) Reset() {
	*x = DeleteServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServerResponse) ProtoMessage() {}

func (x *DeleteServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_manage_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_manage_proto_rawDescGZIP(), []int{9}
}

var File_texturestudio_texturestudio_manage_proto protoreflect.FileDescriptor

var file_texturestudio_texturestudio_manage_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x11, 0x0a, 0x0f, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa6, 0x05, 0x0a, 0x1b, 0x54, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7c, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x73,
	0x0a, 0x08, 0x4d, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x65, 0x78,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x4d, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x2f, 0x6d, 0x79, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x28, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x32, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x81, 0x01,
	0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x20, 0x2a, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4d, 0x72, 0x75, 0x56, 0x2d, 0x52, 0x50, 0x2f, 0x6d, 0x72, 0x75, 0x76, 0x2d, 0x70, 0x62, 0x2d,
	0x67, 0x6f, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_texturestudio_texturestudio_manage_proto_rawDescOnce sync.Once
	file_texturestudio_texturestudio_manage_proto_rawDescData = file_texturestudio_texturestudio_manage_proto_rawDesc
)

func file_texturestudio_texturestudio_manage_proto_rawDescGZIP() []byte {
	file_texturestudio_texturestudio_manage_proto_rawDescOnce.Do(func() {
		file_texturestudio_texturestudio_manage_proto_rawDescData = protoimpl.X.CompressGZIP(file_texturestudio_texturestudio_manage_proto_rawDescData)
	})
	return file_texturestudio_texturestudio_manage_proto_rawDescData
}

var file_texturestudio_texturestudio_manage_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_texturestudio_texturestudio_manage_proto_goTypes = []interface{}{
	(*CreateServerRequest)(nil),       // 0: texture_studio.CreateServerRequest
	(*CreateServerResponse)(nil),      // 1: texture_studio.CreateServerResponse
	(*GetServersRequest)(nil),         // 2: texture_studio.GetServersRequest
	(*GetServersResponse)(nil),        // 3: texture_studio.GetServersResponse
	(*MyServerRequest)(nil),           // 4: texture_studio.MyServerRequest
	(*MyServerResponse)(nil),          // 5: texture_studio.MyServerResponse
	(*TransferOwnershipRequest)(nil),  // 6: texture_studio.TransferOwnershipRequest
	(*TransferOwnershipResponse)(nil), // 7: texture_studio.TransferOwnershipResponse
	(*DeleteServerRequest)(nil),       // 8: texture_studio.DeleteServerRequest
	(*DeleteServerResponse)(nil),      // 9: texture_studio.DeleteServerResponse
}
var file_texturestudio_texturestudio_manage_proto_depIdxs = []int32{
	0, // 0: texture_studio.TextureStudioManagerService.CreateServer:input_type -> texture_studio.CreateServerRequest
	2, // 1: texture_studio.TextureStudioManagerService.GetServers:input_type -> texture_studio.GetServersRequest
	4, // 2: texture_studio.TextureStudioManagerService.MyServer:input_type -> texture_studio.MyServerRequest
	6, // 3: texture_studio.TextureStudioManagerService.TransferOwnership:input_type -> texture_studio.TransferOwnershipRequest
	8, // 4: texture_studio.TextureStudioManagerService.DeleteServer:input_type -> texture_studio.DeleteServerRequest
	1, // 5: texture_studio.TextureStudioManagerService.CreateServer:output_type -> texture_studio.CreateServerResponse
	3, // 6: texture_studio.TextureStudioManagerService.GetServers:output_type -> texture_studio.GetServersResponse
	5, // 7: texture_studio.TextureStudioManagerService.MyServer:output_type -> texture_studio.MyServerResponse
	7, // 8: texture_studio.TextureStudioManagerService.TransferOwnership:output_type -> texture_studio.TransferOwnershipResponse
	9, // 9: texture_studio.TextureStudioManagerService.DeleteServer:output_type -> texture_studio.DeleteServerResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_texturestudio_texturestudio_manage_proto_init() }
func file_texturestudio_texturestudio_manage_proto_init() {
	if File_texturestudio_texturestudio_manage_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_texturestudio_texturestudio_manage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MyServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOwnershipRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferOwnershipResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_manage_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_texturestudio_texturestudio_manage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_texturestudio_texturestudio_manage_proto_goTypes,
		DependencyIndexes: file_texturestudio_texturestudio_manage_proto_depIdxs,
		MessageInfos:      file_texturestudio_texturestudio_manage_proto_msgTypes,
	}.Build()
	File_texturestudio_texturestudio_manage_proto = out.File
	file_texturestudio_texturestudio_manage_proto_rawDesc = nil
	file_texturestudio_texturestudio_manage_proto_goTypes = nil
	file_texturestudio_texturestudio_manage_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TextureStudioManagerServiceClient is the client API for TextureStudioManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextureStudioManagerServiceClient interface {
	// Create a new texture studio server.
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	// Get all existing servers
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
	// Get texture studio server id for current user.
	MyServer(ctx context.Context, in *MyServerRequest, opts ...grpc.CallOption) (*MyServerResponse, error)
	// Change owner of texture studio server.
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error)
	// Delete a texture studio server.
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
}

type textureStudioManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextureStudioManagerServiceClient(cc grpc.ClientConnInterface) TextureStudioManagerServiceClient {
	return &textureStudioManagerServiceClient{cc}
}

func (c *textureStudioManagerServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) MyServer(ctx context.Context, in *MyServerRequest, opts ...grpc.CallOption) (*MyServerResponse, error) {
	out := new(MyServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/MyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error) {
	out := new(TransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextureStudioManagerServiceServer is the server API for TextureStudioManagerService service.
type TextureStudioManagerServiceServer interface {
	// Create a new texture studio server.
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	// Get all existing servers
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	// Get texture studio server id for current user.
	MyServer(context.Context, *MyServerRequest) (*MyServerResponse, error)
	// Change owner of texture studio server.
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error)
	// Delete a texture studio server.
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
}

// UnimplementedTextureStudioManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTextureStudioManagerServiceServer struct {
}

func (*UnimplementedTextureStudioManagerServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) MyServer(context.Context, *MyServerRequest) (*MyServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyServer not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}

func RegisterTextureStudioManagerServiceServer(s *grpc.Server, srv TextureStudioManagerServiceServer) {
	s.RegisterService(&_TextureStudioManagerService_serviceDesc, srv)
}

func _TextureStudioManagerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_MyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).MyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/MyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).MyServer(ctx, req.(*MyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TextureStudioManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "texture_studio.TextureStudioManagerService",
	HandlerType: (*TextureStudioManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _TextureStudioManagerService_CreateServer_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _TextureStudioManagerService_GetServers_Handler,
		},
		{
			MethodName: "MyServer",
			Handler:    _TextureStudioManagerService_MyServer_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _TextureStudioManagerService_TransferOwnership_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _TextureStudioManagerService_DeleteServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "texturestudio/texturestudio_manage.proto",
}
