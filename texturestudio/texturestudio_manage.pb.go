// Code generated by protoc-gen-go. DO NOT EDIT.
// source: texturestudio/texturestudio_manage.proto

package texturestudio

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for rpc `CreateServer`.
type CreateServerRequest struct {
	OwnerId              uint32   `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateServerRequest) Reset()         { *m = CreateServerRequest{} }
func (m *CreateServerRequest) String() string { return proto.CompactTextString(m) }
func (*CreateServerRequest) ProtoMessage()    {}
func (*CreateServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{0}
}

func (m *CreateServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateServerRequest.Unmarshal(m, b)
}
func (m *CreateServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateServerRequest.Marshal(b, m, deterministic)
}
func (m *CreateServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServerRequest.Merge(m, src)
}
func (m *CreateServerRequest) XXX_Size() int {
	return xxx_messageInfo_CreateServerRequest.Size(m)
}
func (m *CreateServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServerRequest proto.InternalMessageInfo

func (m *CreateServerRequest) GetOwnerId() uint32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

// Response message for rpc `CreateServer`.
type CreateServerResponse struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateServerResponse) Reset()         { *m = CreateServerResponse{} }
func (m *CreateServerResponse) String() string { return proto.CompactTextString(m) }
func (*CreateServerResponse) ProtoMessage()    {}
func (*CreateServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{1}
}

func (m *CreateServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateServerResponse.Unmarshal(m, b)
}
func (m *CreateServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateServerResponse.Marshal(b, m, deterministic)
}
func (m *CreateServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateServerResponse.Merge(m, src)
}
func (m *CreateServerResponse) XXX_Size() int {
	return xxx_messageInfo_CreateServerResponse.Size(m)
}
func (m *CreateServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateServerResponse proto.InternalMessageInfo

func (m *CreateServerResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateServerResponse) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// Request message for rpc `GetServers`.
type GetServersRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServersRequest) Reset()         { *m = GetServersRequest{} }
func (m *GetServersRequest) String() string { return proto.CompactTextString(m) }
func (*GetServersRequest) ProtoMessage()    {}
func (*GetServersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{2}
}

func (m *GetServersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServersRequest.Unmarshal(m, b)
}
func (m *GetServersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServersRequest.Marshal(b, m, deterministic)
}
func (m *GetServersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServersRequest.Merge(m, src)
}
func (m *GetServersRequest) XXX_Size() int {
	return xxx_messageInfo_GetServersRequest.Size(m)
}
func (m *GetServersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetServersRequest proto.InternalMessageInfo

// Response message for rpc `GetServers`.
type GetServersResponse struct {
	Id                   []uint32 `protobuf:"varint,1,rep,packed,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetServersResponse) Reset()         { *m = GetServersResponse{} }
func (m *GetServersResponse) String() string { return proto.CompactTextString(m) }
func (*GetServersResponse) ProtoMessage()    {}
func (*GetServersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{3}
}

func (m *GetServersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetServersResponse.Unmarshal(m, b)
}
func (m *GetServersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetServersResponse.Marshal(b, m, deterministic)
}
func (m *GetServersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetServersResponse.Merge(m, src)
}
func (m *GetServersResponse) XXX_Size() int {
	return xxx_messageInfo_GetServersResponse.Size(m)
}
func (m *GetServersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetServersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetServersResponse proto.InternalMessageInfo

func (m *GetServersResponse) GetId() []uint32 {
	if m != nil {
		return m.Id
	}
	return nil
}

// Request message for rpc `MyServer`.
type MyServerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyServerRequest) Reset()         { *m = MyServerRequest{} }
func (m *MyServerRequest) String() string { return proto.CompactTextString(m) }
func (*MyServerRequest) ProtoMessage()    {}
func (*MyServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{4}
}

func (m *MyServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyServerRequest.Unmarshal(m, b)
}
func (m *MyServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyServerRequest.Marshal(b, m, deterministic)
}
func (m *MyServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyServerRequest.Merge(m, src)
}
func (m *MyServerRequest) XXX_Size() int {
	return xxx_messageInfo_MyServerRequest.Size(m)
}
func (m *MyServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MyServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MyServerRequest proto.InternalMessageInfo

// Response message for rpc `MyServer`.
type MyServerResponse struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyServerResponse) Reset()         { *m = MyServerResponse{} }
func (m *MyServerResponse) String() string { return proto.CompactTextString(m) }
func (*MyServerResponse) ProtoMessage()    {}
func (*MyServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{5}
}

func (m *MyServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MyServerResponse.Unmarshal(m, b)
}
func (m *MyServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MyServerResponse.Marshal(b, m, deterministic)
}
func (m *MyServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyServerResponse.Merge(m, src)
}
func (m *MyServerResponse) XXX_Size() int {
	return xxx_messageInfo_MyServerResponse.Size(m)
}
func (m *MyServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MyServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MyServerResponse proto.InternalMessageInfo

func (m *MyServerResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request message for rpc `TransferOwnership`.
type TransferOwnershipRequest struct {
	ServerId             uint32   `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	OwnerId              uint32   `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferOwnershipRequest) Reset()         { *m = TransferOwnershipRequest{} }
func (m *TransferOwnershipRequest) String() string { return proto.CompactTextString(m) }
func (*TransferOwnershipRequest) ProtoMessage()    {}
func (*TransferOwnershipRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{6}
}

func (m *TransferOwnershipRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferOwnershipRequest.Unmarshal(m, b)
}
func (m *TransferOwnershipRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferOwnershipRequest.Marshal(b, m, deterministic)
}
func (m *TransferOwnershipRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOwnershipRequest.Merge(m, src)
}
func (m *TransferOwnershipRequest) XXX_Size() int {
	return xxx_messageInfo_TransferOwnershipRequest.Size(m)
}
func (m *TransferOwnershipRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOwnershipRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOwnershipRequest proto.InternalMessageInfo

func (m *TransferOwnershipRequest) GetServerId() uint32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *TransferOwnershipRequest) GetOwnerId() uint32 {
	if m != nil {
		return m.OwnerId
	}
	return 0
}

// Response message for rpc `TransferOwnership`.
type TransferOwnershipResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferOwnershipResponse) Reset()         { *m = TransferOwnershipResponse{} }
func (m *TransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*TransferOwnershipResponse) ProtoMessage()    {}
func (*TransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{7}
}

func (m *TransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferOwnershipResponse.Unmarshal(m, b)
}
func (m *TransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferOwnershipResponse.Marshal(b, m, deterministic)
}
func (m *TransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOwnershipResponse.Merge(m, src)
}
func (m *TransferOwnershipResponse) XXX_Size() int {
	return xxx_messageInfo_TransferOwnershipResponse.Size(m)
}
func (m *TransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOwnershipResponse proto.InternalMessageInfo

// Request message for rpc `DeleteServer`.
type DeleteServerRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServerRequest) Reset()         { *m = DeleteServerRequest{} }
func (m *DeleteServerRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteServerRequest) ProtoMessage()    {}
func (*DeleteServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{8}
}

func (m *DeleteServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServerRequest.Unmarshal(m, b)
}
func (m *DeleteServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServerRequest.Marshal(b, m, deterministic)
}
func (m *DeleteServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServerRequest.Merge(m, src)
}
func (m *DeleteServerRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteServerRequest.Size(m)
}
func (m *DeleteServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServerRequest proto.InternalMessageInfo

func (m *DeleteServerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Response message for rpc `DeleteServer`.
type DeleteServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteServerResponse) Reset()         { *m = DeleteServerResponse{} }
func (m *DeleteServerResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteServerResponse) ProtoMessage()    {}
func (*DeleteServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32110ea29a241999, []int{9}
}

func (m *DeleteServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteServerResponse.Unmarshal(m, b)
}
func (m *DeleteServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteServerResponse.Marshal(b, m, deterministic)
}
func (m *DeleteServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteServerResponse.Merge(m, src)
}
func (m *DeleteServerResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteServerResponse.Size(m)
}
func (m *DeleteServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteServerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateServerRequest)(nil), "texture_studio.CreateServerRequest")
	proto.RegisterType((*CreateServerResponse)(nil), "texture_studio.CreateServerResponse")
	proto.RegisterType((*GetServersRequest)(nil), "texture_studio.GetServersRequest")
	proto.RegisterType((*GetServersResponse)(nil), "texture_studio.GetServersResponse")
	proto.RegisterType((*MyServerRequest)(nil), "texture_studio.MyServerRequest")
	proto.RegisterType((*MyServerResponse)(nil), "texture_studio.MyServerResponse")
	proto.RegisterType((*TransferOwnershipRequest)(nil), "texture_studio.TransferOwnershipRequest")
	proto.RegisterType((*TransferOwnershipResponse)(nil), "texture_studio.TransferOwnershipResponse")
	proto.RegisterType((*DeleteServerRequest)(nil), "texture_studio.DeleteServerRequest")
	proto.RegisterType((*DeleteServerResponse)(nil), "texture_studio.DeleteServerResponse")
}

func init() {
	proto.RegisterFile("texturestudio/texturestudio_manage.proto", fileDescriptor_32110ea29a241999)
}

var fileDescriptor_32110ea29a241999 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x56, 0xc3, 0x5f, 0x39, 0x1a, 0x83, 0xba, 0x13, 0x6a, 0xd3, 0x69, 0x74, 0xa6, 0x83, 0x02,
	0x4a, 0x03, 0xe3, 0x8e, 0x4b, 0x40, 0x42, 0xbb, 0xa8, 0x40, 0xdd, 0xc4, 0x05, 0x37, 0x55, 0xba,
	0x1c, 0x32, 0x4b, 0x6b, 0x1c, 0x6c, 0xa7, 0x30, 0xc1, 0x2e, 0xe0, 0x15, 0xb8, 0xe0, 0x0d, 0x78,
	0x21, 0x5e, 0x81, 0x07, 0x41, 0xb3, 0xb3, 0xb6, 0x76, 0xd3, 0x88, 0xbb, 0xe4, 0xf8, 0x3b, 0xe7,
	0xfb, 0x7c, 0xbe, 0x4f, 0x86, 0xbe, 0xc2, 0x2f, 0x2a, 0x17, 0x28, 0x55, 0x1e, 0x33, 0x1e, 0x5a,
	0x7f, 0xe3, 0x69, 0x94, 0x46, 0x09, 0x0e, 0x32, 0xc1, 0x15, 0x27, 0x9b, 0xc5, 0xd9, 0xd8, 0x1c,
	0xfa, 0xdb, 0x09, 0xe7, 0xc9, 0x29, 0x86, 0x51, 0xc6, 0xc2, 0x28, 0x4d, 0xb9, 0x8a, 0x14, 0xe3,
	0xa9, 0x34, 0x68, 0xfa, 0x14, 0x9a, 0xaf, 0x04, 0x46, 0x0a, 0x0f, 0x51, 0xcc, 0x50, 0x8c, 0xf0,
	0x53, 0x8e, 0x52, 0x91, 0x36, 0xd4, 0xf9, 0xe7, 0x14, 0xc5, 0x98, 0xc5, 0xad, 0x5a, 0xb7, 0xd6,
	0xbf, 0x35, 0xba, 0xa1, 0xff, 0x0f, 0x62, 0xfa, 0x02, 0xb6, 0xec, 0x0e, 0x99, 0xf1, 0x54, 0x22,
	0xd9, 0x04, 0x6f, 0x0e, 0xf6, 0x58, 0x4c, 0x08, 0x5c, 0xcd, 0xb8, 0x50, 0x2d, 0x4f, 0x57, 0xf4,
	0x37, 0x6d, 0x42, 0xe3, 0x0d, 0x2a, 0xd3, 0x28, 0x0b, 0x2e, 0xda, 0x03, 0xb2, 0x5c, 0x74, 0xc6,
	0x5d, 0x31, 0xe3, 0x68, 0x03, 0x6e, 0x0f, 0xcf, 0x2c, 0x91, 0x94, 0xc2, 0x9d, 0x45, 0xa9, 0x5c,
	0x05, 0x1d, 0x41, 0xeb, 0x48, 0x44, 0xa9, 0xfc, 0x88, 0xe2, 0xed, 0xc5, 0x05, 0xe4, 0x09, 0xcb,
	0x2e, 0x2f, 0xd9, 0x81, 0x9b, 0x52, 0x77, 0x2f, 0x6e, 0x59, 0x37, 0x85, 0x83, 0xd8, 0xda, 0x80,
	0x67, 0x6f, 0xa0, 0x03, 0xed, 0x92, 0x99, 0x46, 0x00, 0xdd, 0x83, 0xe6, 0x6b, 0x3c, 0x45, 0x77,
	0xa1, 0xae, 0xae, 0xbb, 0xb0, 0x65, 0xc3, 0x4c, 0xfb, 0xfe, 0xef, 0x6b, 0xd0, 0x39, 0x32, 0x06,
	0x1e, 0x6a, 0xff, 0x86, 0xda, 0x5b, 0x71, 0x01, 0x63, 0xc7, 0x48, 0xbe, 0xc1, 0xc6, 0xf2, 0xf6,
	0xc9, 0xfd, 0x81, 0x6d, 0xf7, 0xa0, 0xc4, 0x4d, 0xbf, 0x57, 0x0d, 0x2a, 0x94, 0xef, 0xfe, 0xf8,
	0xf3, 0xf7, 0xa7, 0xd7, 0xa1, 0xed, 0x70, 0xf6, 0xcc, 0x0e, 0x58, 0x68, 0xb6, 0x22, 0xc9, 0x0c,
	0x60, 0x61, 0x15, 0xd9, 0x75, 0xc7, 0xae, 0x78, 0xeb, 0xd3, 0x2a, 0x88, 0xcd, 0x4b, 0x2a, 0x78,
	0x25, 0xd4, 0x2f, 0x9d, 0x26, 0xf7, 0xdc, 0x91, 0x4e, 0x2c, 0xfc, 0xee, 0x7a, 0x40, 0xc1, 0xd8,
	0xd3, 0x8c, 0x3b, 0x64, 0x7b, 0x2d, 0x63, 0x38, 0x3d, 0x23, 0xbf, 0x6a, 0xd0, 0x58, 0xf1, 0x99,
	0xf4, 0xdd, 0xe9, 0xeb, 0xe2, 0xe5, 0x3f, 0xfa, 0x0f, 0x64, 0x21, 0x28, 0xd0, 0x82, 0x1e, 0xee,
	0xef, 0xad, 0x17, 0xf4, 0x75, 0x1e, 0xd5, 0x73, 0xf2, 0xbd, 0x06, 0x1b, 0xcb, 0xe9, 0x59, 0x4d,
	0x41, 0x49, 0x04, 0x57, 0x53, 0x50, 0x16, 0x40, 0xfa, 0x40, 0x4b, 0xe9, 0x3e, 0xde, 0xa9, 0x90,
	0xc2, 0xe2, 0xf3, 0x97, 0xc1, 0x87, 0x27, 0x09, 0x53, 0x27, 0xf9, 0x64, 0x70, 0xcc, 0xa7, 0xe1,
	0x50, 0xe4, 0xef, 0x83, 0xd1, 0xbb, 0x70, 0x2a, 0xf2, 0x59, 0x90, 0x4d, 0x82, 0xc4, 0x79, 0xa2,
	0x26, 0xd7, 0xf5, 0x73, 0xf3, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x0e, 0x59, 0xb7,
	0xc8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TextureStudioManagerServiceClient is the client API for TextureStudioManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextureStudioManagerServiceClient interface {
	// Create a new texture studio server.
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	// Get all existing servers
	GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
	// Get texture studio server id for current user.
	MyServer(ctx context.Context, in *MyServerRequest, opts ...grpc.CallOption) (*MyServerResponse, error)
	// Change owner of texture studio server.
	TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error)
	// Delete a texture studio server.
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error)
}

type textureStudioManagerServiceClient struct {
	cc *grpc.ClientConn
}

func NewTextureStudioManagerServiceClient(cc *grpc.ClientConn) TextureStudioManagerServiceClient {
	return &textureStudioManagerServiceClient{cc}
}

func (c *textureStudioManagerServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) GetServers(ctx context.Context, in *GetServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) MyServer(ctx context.Context, in *MyServerRequest, opts ...grpc.CallOption) (*MyServerResponse, error) {
	out := new(MyServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/MyServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) TransferOwnership(ctx context.Context, in *TransferOwnershipRequest, opts ...grpc.CallOption) (*TransferOwnershipResponse, error) {
	out := new(TransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioManagerServiceClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*DeleteServerResponse, error) {
	out := new(DeleteServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioManagerService/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextureStudioManagerServiceServer is the server API for TextureStudioManagerService service.
type TextureStudioManagerServiceServer interface {
	// Create a new texture studio server.
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	// Get all existing servers
	GetServers(context.Context, *GetServersRequest) (*GetServersResponse, error)
	// Get texture studio server id for current user.
	MyServer(context.Context, *MyServerRequest) (*MyServerResponse, error)
	// Change owner of texture studio server.
	TransferOwnership(context.Context, *TransferOwnershipRequest) (*TransferOwnershipResponse, error)
	// Delete a texture studio server.
	DeleteServer(context.Context, *DeleteServerRequest) (*DeleteServerResponse, error)
}

// UnimplementedTextureStudioManagerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTextureStudioManagerServiceServer struct {
}

func (*UnimplementedTextureStudioManagerServiceServer) CreateServer(ctx context.Context, req *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) GetServers(ctx context.Context, req *GetServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) MyServer(ctx context.Context, req *MyServerRequest) (*MyServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyServer not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) TransferOwnership(ctx context.Context, req *TransferOwnershipRequest) (*TransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}
func (*UnimplementedTextureStudioManagerServiceServer) DeleteServer(ctx context.Context, req *DeleteServerRequest) (*DeleteServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}

func RegisterTextureStudioManagerServiceServer(s *grpc.Server, srv TextureStudioManagerServiceServer) {
	s.RegisterService(&_TextureStudioManagerService_serviceDesc, srv)
}

func _TextureStudioManagerService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).GetServers(ctx, req.(*GetServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_MyServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).MyServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/MyServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).MyServer(ctx, req.(*MyServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).TransferOwnership(ctx, req.(*TransferOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioManagerService_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioManagerServiceServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioManagerService/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioManagerServiceServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TextureStudioManagerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "texture_studio.TextureStudioManagerService",
	HandlerType: (*TextureStudioManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _TextureStudioManagerService_CreateServer_Handler,
		},
		{
			MethodName: "GetServers",
			Handler:    _TextureStudioManagerService_GetServers_Handler,
		},
		{
			MethodName: "MyServer",
			Handler:    _TextureStudioManagerService_MyServer_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _TextureStudioManagerService_TransferOwnership_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _TextureStudioManagerService_DeleteServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "texturestudio/texturestudio_manage.proto",
}
