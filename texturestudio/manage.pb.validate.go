// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: texturestudio/manage.proto

package texturestudio

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _manage_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OwnerId

	return nil
}

// CreateServerRequestValidationError is the validation error returned by
// CreateServerRequest.Validate if the designated constraints aren't met.
type CreateServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServerRequestValidationError) ErrorName() string {
	return "CreateServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServerRequestValidationError{}

// Validate checks the field values on CreateServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateServerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Port

	return nil
}

// CreateServerResponseValidationError is the validation error returned by
// CreateServerResponse.Validate if the designated constraints aren't met.
type CreateServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateServerResponseValidationError) ErrorName() string {
	return "CreateServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateServerResponseValidationError{}

// Validate checks the field values on GetServersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetServersRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetServersRequestValidationError is the validation error returned by
// GetServersRequest.Validate if the designated constraints aren't met.
type GetServersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServersRequestValidationError) ErrorName() string {
	return "GetServersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServersRequestValidationError{}

// Validate checks the field values on GetServersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetServersResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetServersResponseValidationError is the validation error returned by
// GetServersResponse.Validate if the designated constraints aren't met.
type GetServersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServersResponseValidationError) ErrorName() string {
	return "GetServersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServersResponseValidationError{}

// Validate checks the field values on MyServerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MyServerRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MyServerRequestValidationError is the validation error returned by
// MyServerRequest.Validate if the designated constraints aren't met.
type MyServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyServerRequestValidationError) ErrorName() string { return "MyServerRequestValidationError" }

// Error satisfies the builtin error interface
func (e MyServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyServerRequestValidationError{}

// Validate checks the field values on MyServerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MyServerResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// MyServerResponseValidationError is the validation error returned by
// MyServerResponse.Validate if the designated constraints aren't met.
type MyServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyServerResponseValidationError) ErrorName() string { return "MyServerResponseValidationError" }

// Error satisfies the builtin error interface
func (e MyServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyServerResponseValidationError{}

// Validate checks the field values on TransferOwnershipRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferOwnershipRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ServerId

	// no validation rules for OwnerId

	return nil
}

// TransferOwnershipRequestValidationError is the validation error returned by
// TransferOwnershipRequest.Validate if the designated constraints aren't met.
type TransferOwnershipRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferOwnershipRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferOwnershipRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferOwnershipRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferOwnershipRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferOwnershipRequestValidationError) ErrorName() string {
	return "TransferOwnershipRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferOwnershipRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferOwnershipRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferOwnershipRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferOwnershipRequestValidationError{}

// Validate checks the field values on TransferOwnershipResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TransferOwnershipResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// TransferOwnershipResponseValidationError is the validation error returned by
// TransferOwnershipResponse.Validate if the designated constraints aren't met.
type TransferOwnershipResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferOwnershipResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferOwnershipResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferOwnershipResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferOwnershipResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferOwnershipResponseValidationError) ErrorName() string {
	return "TransferOwnershipResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferOwnershipResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferOwnershipResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferOwnershipResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferOwnershipResponseValidationError{}

// Validate checks the field values on DeleteServerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServerRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteServerRequestValidationError is the validation error returned by
// DeleteServerRequest.Validate if the designated constraints aren't met.
type DeleteServerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerRequestValidationError) ErrorName() string {
	return "DeleteServerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerRequestValidationError{}

// Validate checks the field values on DeleteServerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteServerResponseValidationError is the validation error returned by
// DeleteServerResponse.Validate if the designated constraints aren't met.
type DeleteServerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServerResponseValidationError) ErrorName() string {
	return "DeleteServerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServerResponseValidationError{}
