// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: texturestudio/texturestudio_server.proto

package texturestudio

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerStatus int32

const (
	ServerStatus_UNKNOWN_STATUS ServerStatus = 0
	ServerStatus_ON             ServerStatus = 1
	ServerStatus_OFF            ServerStatus = 2
)

// Enum value maps for ServerStatus.
var (
	ServerStatus_name = map[int32]string{
		0: "UNKNOWN_STATUS",
		1: "ON",
		2: "OFF",
	}
	ServerStatus_value = map[string]int32{
		"UNKNOWN_STATUS": 0,
		"ON":             1,
		"OFF":            2,
	}
)

func (x ServerStatus) Enum() *ServerStatus {
	p := new(ServerStatus)
	*p = x
	return p
}

func (x ServerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_texturestudio_texturestudio_server_proto_enumTypes[0].Descriptor()
}

func (ServerStatus) Type() protoreflect.EnumType {
	return &file_texturestudio_texturestudio_server_proto_enumTypes[0]
}

func (x ServerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerStatus.Descriptor instead.
func (ServerStatus) EnumDescriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{0}
}

// Request message for rpc `StartServer`.
type StartServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartServerRequest) Reset() {
	*x = StartServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServerRequest) ProtoMessage() {}

func (x *StartServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServerRequest.ProtoReflect.Descriptor instead.
func (*StartServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{0}
}

func (x *StartServerRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `StartServer`.
type StartServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartServerResponse) Reset() {
	*x = StartServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartServerResponse) ProtoMessage() {}

func (x *StartServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartServerResponse.ProtoReflect.Descriptor instead.
func (*StartServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{1}
}

// Request message for rpc `StopServer`.
type StopServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopServerRequest) Reset() {
	*x = StopServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServerRequest) ProtoMessage() {}

func (x *StopServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServerRequest.ProtoReflect.Descriptor instead.
func (*StopServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{2}
}

func (x *StopServerRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `StopServer`.
type StopServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopServerResponse) Reset() {
	*x = StopServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopServerResponse) ProtoMessage() {}

func (x *StopServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopServerResponse.ProtoReflect.Descriptor instead.
func (*StopServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{3}
}

// Request message for rpc `RestartServer`.
type RestartServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RestartServerRequest) Reset() {
	*x = RestartServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartServerRequest) ProtoMessage() {}

func (x *RestartServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartServerRequest.ProtoReflect.Descriptor instead.
func (*RestartServerRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{4}
}

func (x *RestartServerRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `RestartServer`.
type RestartServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestartServerResponse) Reset() {
	*x = RestartServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartServerResponse) ProtoMessage() {}

func (x *RestartServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartServerResponse.ProtoReflect.Descriptor instead.
func (*RestartServerResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{5}
}

// Request message for rpc `ServerStatus`.
type ServerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ServerStatusRequest) Reset() {
	*x = ServerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusRequest) ProtoMessage() {}

func (x *ServerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusRequest.ProtoReflect.Descriptor instead.
func (*ServerStatusRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{6}
}

func (x *ServerStatusRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for rpc `ServerStatus`.
type ServerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port   uint32       `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Status ServerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=texture_studio.ServerStatus" json:"status,omitempty"`
}

func (x *ServerStatusResponse) Reset() {
	*x = ServerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatusResponse) ProtoMessage() {}

func (x *ServerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatusResponse.ProtoReflect.Descriptor instead.
func (*ServerStatusResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{7}
}

func (x *ServerStatusResponse) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServerStatusResponse) GetStatus() ServerStatus {
	if x != nil {
		return x.Status
	}
	return ServerStatus_UNKNOWN_STATUS
}

// Request message for rpc `UploadProject`.
type UploadProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId    uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	// Types that are assignable to Project:
	//	*UploadProjectRequest_Code
	//	*UploadProjectRequest_File
	Project isUploadProjectRequest_Project `protobuf_oneof:"project"`
}

func (x *UploadProjectRequest) Reset() {
	*x = UploadProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProjectRequest) ProtoMessage() {}

func (x *UploadProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProjectRequest.ProtoReflect.Descriptor instead.
func (*UploadProjectRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{8}
}

func (x *UploadProjectRequest) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *UploadProjectRequest) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (m *UploadProjectRequest) GetProject() isUploadProjectRequest_Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (x *UploadProjectRequest) GetCode() string {
	if x, ok := x.GetProject().(*UploadProjectRequest_Code); ok {
		return x.Code
	}
	return ""
}

func (x *UploadProjectRequest) GetFile() []byte {
	if x, ok := x.GetProject().(*UploadProjectRequest_File); ok {
		return x.File
	}
	return nil
}

type isUploadProjectRequest_Project interface {
	isUploadProjectRequest_Project()
}

type UploadProjectRequest_Code struct {
	Code string `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type UploadProjectRequest_File struct {
	File []byte `protobuf:"bytes,5,opt,name=file,proto3,oneof"`
}

func (*UploadProjectRequest_Code) isUploadProjectRequest_Project() {}

func (*UploadProjectRequest_File) isUploadProjectRequest_Project() {}

// Response message for rpc `UploadProject`.
type UploadProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UploadProjectResponse) Reset() {
	*x = UploadProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadProjectResponse) ProtoMessage() {}

func (x *UploadProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadProjectResponse.ProtoReflect.Descriptor instead.
func (*UploadProjectResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{9}
}

// Request message for rpc `GetProject`.
type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{10}
}

func (x *GetProjectRequest) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Response message for rpc `GetProject`.
type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{11}
}

func (x *GetProjectResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

// Request message for rpc `GetProjects`.
type GetProjectsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *GetProjectsRequest) Reset() {
	*x = GetProjectsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsRequest) ProtoMessage() {}

func (x *GetProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsRequest.ProtoReflect.Descriptor instead.
func (*GetProjectsRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{12}
}

func (x *GetProjectsRequest) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// Response message for rpc `GetProjects`.
type GetProjectsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *GetProjectsResponse) Reset() {
	*x = GetProjectsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectsResponse) ProtoMessage() {}

func (x *GetProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectsResponse.ProtoReflect.Descriptor instead.
func (*GetProjectsResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{13}
}

func (x *GetProjectsResponse) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// Request message for rpc `SubscribeToProjectsChanges`.
type SubscribeToProjectsChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerId uint32 `protobuf:"varint,1,opt,name=server_id,json=serverId,proto3" json:"server_id,omitempty"`
}

func (x *SubscribeToProjectsChangesRequest) Reset() {
	*x = SubscribeToProjectsChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToProjectsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToProjectsChangesRequest) ProtoMessage() {}

func (x *SubscribeToProjectsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToProjectsChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToProjectsChangesRequest) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{14}
}

func (x *SubscribeToProjectsChangesRequest) GetServerId() uint32 {
	if x != nil {
		return x.ServerId
	}
	return 0
}

// Response message for rpc `SubscribeToProjectsChanges`.
type SubscribeToProjectsChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SubscribeToProjectsChangesResponse) Reset() {
	*x = SubscribeToProjectsChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_texturestudio_texturestudio_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToProjectsChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToProjectsChangesResponse) ProtoMessage() {}

func (x *SubscribeToProjectsChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_texturestudio_texturestudio_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToProjectsChangesResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToProjectsChangesResponse) Descriptor() ([]byte, []int) {
	return file_texturestudio_texturestudio_server_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeToProjectsChangesResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_texturestudio_texturestudio_server_proto protoreflect.FileDescriptor

var file_texturestudio_texturestudio_server_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x15,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x74,
	0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x60, 0x0a, 0x14, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x31, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x22, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x33, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f,
	0x46, 0x46, 0x10, 0x02, 0x32, 0x8c, 0x09, 0x0a, 0x1a, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74,
	0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x96, 0x01, 0x0a,
	0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x24,
	0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x32, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x1a, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x65,
	0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4d, 0x72, 0x75, 0x56, 0x2d, 0x52, 0x50, 0x2f, 0x6d, 0x72, 0x75, 0x76, 0x2d, 0x70,
	0x62, 0x2d, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x73, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_texturestudio_texturestudio_server_proto_rawDescOnce sync.Once
	file_texturestudio_texturestudio_server_proto_rawDescData = file_texturestudio_texturestudio_server_proto_rawDesc
)

func file_texturestudio_texturestudio_server_proto_rawDescGZIP() []byte {
	file_texturestudio_texturestudio_server_proto_rawDescOnce.Do(func() {
		file_texturestudio_texturestudio_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_texturestudio_texturestudio_server_proto_rawDescData)
	})
	return file_texturestudio_texturestudio_server_proto_rawDescData
}

var file_texturestudio_texturestudio_server_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_texturestudio_texturestudio_server_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_texturestudio_texturestudio_server_proto_goTypes = []interface{}{
	(ServerStatus)(0),                          // 0: texture_studio.ServerStatus
	(*StartServerRequest)(nil),                 // 1: texture_studio.StartServerRequest
	(*StartServerResponse)(nil),                // 2: texture_studio.StartServerResponse
	(*StopServerRequest)(nil),                  // 3: texture_studio.StopServerRequest
	(*StopServerResponse)(nil),                 // 4: texture_studio.StopServerResponse
	(*RestartServerRequest)(nil),               // 5: texture_studio.RestartServerRequest
	(*RestartServerResponse)(nil),              // 6: texture_studio.RestartServerResponse
	(*ServerStatusRequest)(nil),                // 7: texture_studio.ServerStatusRequest
	(*ServerStatusResponse)(nil),               // 8: texture_studio.ServerStatusResponse
	(*UploadProjectRequest)(nil),               // 9: texture_studio.UploadProjectRequest
	(*UploadProjectResponse)(nil),              // 10: texture_studio.UploadProjectResponse
	(*GetProjectRequest)(nil),                  // 11: texture_studio.GetProjectRequest
	(*GetProjectResponse)(nil),                 // 12: texture_studio.GetProjectResponse
	(*GetProjectsRequest)(nil),                 // 13: texture_studio.GetProjectsRequest
	(*GetProjectsResponse)(nil),                // 14: texture_studio.GetProjectsResponse
	(*SubscribeToProjectsChangesRequest)(nil),  // 15: texture_studio.SubscribeToProjectsChangesRequest
	(*SubscribeToProjectsChangesResponse)(nil), // 16: texture_studio.SubscribeToProjectsChangesResponse
}
var file_texturestudio_texturestudio_server_proto_depIdxs = []int32{
	0,  // 0: texture_studio.ServerStatusResponse.status:type_name -> texture_studio.ServerStatus
	1,  // 1: texture_studio.TextureStudioServerService.StartServer:input_type -> texture_studio.StartServerRequest
	3,  // 2: texture_studio.TextureStudioServerService.StopServer:input_type -> texture_studio.StopServerRequest
	5,  // 3: texture_studio.TextureStudioServerService.RestartServer:input_type -> texture_studio.RestartServerRequest
	7,  // 4: texture_studio.TextureStudioServerService.ServerStatus:input_type -> texture_studio.ServerStatusRequest
	9,  // 5: texture_studio.TextureStudioServerService.UploadProject:input_type -> texture_studio.UploadProjectRequest
	11, // 6: texture_studio.TextureStudioServerService.GetProject:input_type -> texture_studio.GetProjectRequest
	13, // 7: texture_studio.TextureStudioServerService.GetProjects:input_type -> texture_studio.GetProjectsRequest
	15, // 8: texture_studio.TextureStudioServerService.SubscribeToProjectsChanges:input_type -> texture_studio.SubscribeToProjectsChangesRequest
	2,  // 9: texture_studio.TextureStudioServerService.StartServer:output_type -> texture_studio.StartServerResponse
	4,  // 10: texture_studio.TextureStudioServerService.StopServer:output_type -> texture_studio.StopServerResponse
	6,  // 11: texture_studio.TextureStudioServerService.RestartServer:output_type -> texture_studio.RestartServerResponse
	8,  // 12: texture_studio.TextureStudioServerService.ServerStatus:output_type -> texture_studio.ServerStatusResponse
	10, // 13: texture_studio.TextureStudioServerService.UploadProject:output_type -> texture_studio.UploadProjectResponse
	12, // 14: texture_studio.TextureStudioServerService.GetProject:output_type -> texture_studio.GetProjectResponse
	14, // 15: texture_studio.TextureStudioServerService.GetProjects:output_type -> texture_studio.GetProjectsResponse
	16, // 16: texture_studio.TextureStudioServerService.SubscribeToProjectsChanges:output_type -> texture_studio.SubscribeToProjectsChangesResponse
	9,  // [9:17] is the sub-list for method output_type
	1,  // [1:9] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_texturestudio_texturestudio_server_proto_init() }
func file_texturestudio_texturestudio_server_proto_init() {
	if File_texturestudio_texturestudio_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_texturestudio_texturestudio_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToProjectsChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_texturestudio_texturestudio_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToProjectsChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_texturestudio_texturestudio_server_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*UploadProjectRequest_Code)(nil),
		(*UploadProjectRequest_File)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_texturestudio_texturestudio_server_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_texturestudio_texturestudio_server_proto_goTypes,
		DependencyIndexes: file_texturestudio_texturestudio_server_proto_depIdxs,
		EnumInfos:         file_texturestudio_texturestudio_server_proto_enumTypes,
		MessageInfos:      file_texturestudio_texturestudio_server_proto_msgTypes,
	}.Build()
	File_texturestudio_texturestudio_server_proto = out.File
	file_texturestudio_texturestudio_server_proto_rawDesc = nil
	file_texturestudio_texturestudio_server_proto_goTypes = nil
	file_texturestudio_texturestudio_server_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TextureStudioServerServiceClient is the client API for TextureStudioServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TextureStudioServerServiceClient interface {
	// Start a texture studio server.
	StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error)
	// Stop a texture studio server.
	StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error)
	// Restart a texture studio server.
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	// Get texture studio server status.
	ServerStatus(ctx context.Context, in *ServerStatusRequest, opts ...grpc.CallOption) (*ServerStatusResponse, error)
	// Upload project to texture studio.
	UploadProject(ctx context.Context, in *UploadProjectRequest, opts ...grpc.CallOption) (*UploadProjectResponse, error)
	// Get texture-studio objects project.
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// Get all projects.
	GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error)
	// Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
	SubscribeToProjectsChanges(ctx context.Context, in *SubscribeToProjectsChangesRequest, opts ...grpc.CallOption) (TextureStudioServerService_SubscribeToProjectsChangesClient, error)
}

type textureStudioServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTextureStudioServerServiceClient(cc grpc.ClientConnInterface) TextureStudioServerServiceClient {
	return &textureStudioServerServiceClient{cc}
}

func (c *textureStudioServerServiceClient) StartServer(ctx context.Context, in *StartServerRequest, opts ...grpc.CallOption) (*StartServerResponse, error) {
	out := new(StartServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/StartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) StopServer(ctx context.Context, in *StopServerRequest, opts ...grpc.CallOption) (*StopServerResponse, error) {
	out := new(StopServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/StopServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/RestartServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) ServerStatus(ctx context.Context, in *ServerStatusRequest, opts ...grpc.CallOption) (*ServerStatusResponse, error) {
	out := new(ServerStatusResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/ServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) UploadProject(ctx context.Context, in *UploadProjectRequest, opts ...grpc.CallOption) (*UploadProjectResponse, error) {
	out := new(UploadProjectResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/UploadProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) GetProjects(ctx context.Context, in *GetProjectsRequest, opts ...grpc.CallOption) (*GetProjectsResponse, error) {
	out := new(GetProjectsResponse)
	err := c.cc.Invoke(ctx, "/texture_studio.TextureStudioServerService/GetProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *textureStudioServerServiceClient) SubscribeToProjectsChanges(ctx context.Context, in *SubscribeToProjectsChangesRequest, opts ...grpc.CallOption) (TextureStudioServerService_SubscribeToProjectsChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TextureStudioServerService_serviceDesc.Streams[0], "/texture_studio.TextureStudioServerService/SubscribeToProjectsChanges", opts...)
	if err != nil {
		return nil, err
	}
	x := &textureStudioServerServiceSubscribeToProjectsChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextureStudioServerService_SubscribeToProjectsChangesClient interface {
	Recv() (*SubscribeToProjectsChangesResponse, error)
	grpc.ClientStream
}

type textureStudioServerServiceSubscribeToProjectsChangesClient struct {
	grpc.ClientStream
}

func (x *textureStudioServerServiceSubscribeToProjectsChangesClient) Recv() (*SubscribeToProjectsChangesResponse, error) {
	m := new(SubscribeToProjectsChangesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextureStudioServerServiceServer is the server API for TextureStudioServerService service.
type TextureStudioServerServiceServer interface {
	// Start a texture studio server.
	StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error)
	// Stop a texture studio server.
	StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error)
	// Restart a texture studio server.
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	// Get texture studio server status.
	ServerStatus(context.Context, *ServerStatusRequest) (*ServerStatusResponse, error)
	// Upload project to texture studio.
	UploadProject(context.Context, *UploadProjectRequest) (*UploadProjectResponse, error)
	// Get texture-studio objects project.
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// Get all projects.
	GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error)
	// Listen for project changes - if texture studio project has been created or modified, this will trigger an event.
	SubscribeToProjectsChanges(*SubscribeToProjectsChangesRequest, TextureStudioServerService_SubscribeToProjectsChangesServer) error
}

// UnimplementedTextureStudioServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTextureStudioServerServiceServer struct {
}

func (*UnimplementedTextureStudioServerServiceServer) StartServer(context.Context, *StartServerRequest) (*StartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServer not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) StopServer(context.Context, *StopServerRequest) (*StopServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServer not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) ServerStatus(context.Context, *ServerStatusRequest) (*ServerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerStatus not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) UploadProject(context.Context, *UploadProjectRequest) (*UploadProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadProject not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) GetProjects(context.Context, *GetProjectsRequest) (*GetProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjects not implemented")
}
func (*UnimplementedTextureStudioServerServiceServer) SubscribeToProjectsChanges(*SubscribeToProjectsChangesRequest, TextureStudioServerService_SubscribeToProjectsChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToProjectsChanges not implemented")
}

func RegisterTextureStudioServerServiceServer(s *grpc.Server, srv TextureStudioServerServiceServer) {
	s.RegisterService(&_TextureStudioServerService_serviceDesc, srv)
}

func _TextureStudioServerService_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).StartServer(ctx, req.(*StartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).StopServer(ctx, req.(*StopServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/RestartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_ServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).ServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/ServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).ServerStatus(ctx, req.(*ServerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_UploadProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).UploadProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/UploadProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).UploadProject(ctx, req.(*UploadProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_GetProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextureStudioServerServiceServer).GetProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/texture_studio.TextureStudioServerService/GetProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextureStudioServerServiceServer).GetProjects(ctx, req.(*GetProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TextureStudioServerService_SubscribeToProjectsChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToProjectsChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextureStudioServerServiceServer).SubscribeToProjectsChanges(m, &textureStudioServerServiceSubscribeToProjectsChangesServer{stream})
}

type TextureStudioServerService_SubscribeToProjectsChangesServer interface {
	Send(*SubscribeToProjectsChangesResponse) error
	grpc.ServerStream
}

type textureStudioServerServiceSubscribeToProjectsChangesServer struct {
	grpc.ServerStream
}

func (x *textureStudioServerServiceSubscribeToProjectsChangesServer) Send(m *SubscribeToProjectsChangesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _TextureStudioServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "texture_studio.TextureStudioServerService",
	HandlerType: (*TextureStudioServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServer",
			Handler:    _TextureStudioServerService_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _TextureStudioServerService_StopServer_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _TextureStudioServerService_RestartServer_Handler,
		},
		{
			MethodName: "ServerStatus",
			Handler:    _TextureStudioServerService_ServerStatus_Handler,
		},
		{
			MethodName: "UploadProject",
			Handler:    _TextureStudioServerService_UploadProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _TextureStudioServerService_GetProject_Handler,
		},
		{
			MethodName: "GetProjects",
			Handler:    _TextureStudioServerService_GetProjects_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToProjectsChanges",
			Handler:       _TextureStudioServerService_SubscribeToProjectsChanges_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "texturestudio/texturestudio_server.proto",
}
