// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: objects/models.proto

package objects

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _models_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ObjectModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ObjectModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Model

	// no validation rules for ModelName

	// no validation rules for Name

	// no validation rules for Category

	// no validation rules for Length

	// no validation rules for Width

	// no validation rules for Height

	// no validation rules for Size

	// no validation rules for HasCollision

	// no validation rules for BreaksOnHit

	// no validation rules for HasAnimation

	// no validation rules for VisibleByTime

	// no validation rules for VisibleFrom

	// no validation rules for VisibleTo

	return nil
}

// ObjectModelValidationError is the validation error returned by
// ObjectModel.Validate if the designated constraints aren't met.
type ObjectModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectModelValidationError) ErrorName() string { return "ObjectModelValidationError" }

// Error satisfies the builtin error interface
func (e ObjectModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectModelValidationError{}

// Validate checks the field values on CreateObjectModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectModelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObjectType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectModelRequestValidationError{
				field:  "ObjectType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateObjectModelRequestValidationError is the validation error returned by
// CreateObjectModelRequest.Validate if the designated constraints aren't met.
type CreateObjectModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectModelRequestValidationError) ErrorName() string {
	return "CreateObjectModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectModelRequestValidationError{}

// Validate checks the field values on CreateObjectModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectModelResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateObjectModelResponseValidationError is the validation error returned by
// CreateObjectModelResponse.Validate if the designated constraints aren't met.
type CreateObjectModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectModelResponseValidationError) ErrorName() string {
	return "CreateObjectModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectModelResponseValidationError{}

// Validate checks the field values on GetObjectModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetObjectModelRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Model

	return nil
}

// GetObjectModelRequestValidationError is the validation error returned by
// GetObjectModelRequest.Validate if the designated constraints aren't met.
type GetObjectModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectModelRequestValidationError) ErrorName() string {
	return "GetObjectModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetObjectModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectModelRequestValidationError{}

// Validate checks the field values on GetObjectModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetObjectModelResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObjectType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetObjectModelResponseValidationError{
				field:  "ObjectType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetObjectModelResponseValidationError is the validation error returned by
// GetObjectModelResponse.Validate if the designated constraints aren't met.
type GetObjectModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectModelResponseValidationError) ErrorName() string {
	return "GetObjectModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetObjectModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectModelResponseValidationError{}

// Validate checks the field values on UpdateObjectModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectModelRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObjectType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateObjectModelRequestValidationError{
				field:  "ObjectType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateObjectModelRequestValidationError is the validation error returned by
// UpdateObjectModelRequest.Validate if the designated constraints aren't met.
type UpdateObjectModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectModelRequestValidationError) ErrorName() string {
	return "UpdateObjectModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectModelRequestValidationError{}

// Validate checks the field values on UpdateObjectModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectModelResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateObjectModelResponseValidationError is the validation error returned by
// UpdateObjectModelResponse.Validate if the designated constraints aren't met.
type UpdateObjectModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectModelResponseValidationError) ErrorName() string {
	return "UpdateObjectModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectModelResponseValidationError{}

// Validate checks the field values on DeleteObjectModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectModelRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Model

	return nil
}

// DeleteObjectModelRequestValidationError is the validation error returned by
// DeleteObjectModelRequest.Validate if the designated constraints aren't met.
type DeleteObjectModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectModelRequestValidationError) ErrorName() string {
	return "DeleteObjectModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectModelRequestValidationError{}

// Validate checks the field values on DeleteObjectModelResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectModelResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteObjectModelResponseValidationError is the validation error returned by
// DeleteObjectModelResponse.Validate if the designated constraints aren't met.
type DeleteObjectModelResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectModelResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectModelResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectModelResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectModelResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectModelResponseValidationError) ErrorName() string {
	return "DeleteObjectModelResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectModelResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectModelResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectModelResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectModelResponseValidationError{}
