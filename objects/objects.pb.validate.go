// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: objects/objects.proto

package objects

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _objects_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Object with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Object) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Model

	// no validation rules for X

	// no validation rules for Y

	// no validation rules for Z

	// no validation rules for Rx

	// no validation rules for Ry

	// no validation rules for Rz

	// no validation rules for WorldId

	// no validation rules for InteriorId

	// no validation rules for PlayerId

	// no validation rules for AreaId

	// no validation rules for StreamDistance

	// no validation rules for DrawDistance

	// no validation rules for Priority

	// no validation rules for EstateId

	return nil
}

// ObjectValidationError is the validation error returned by Object.Validate if
// the designated constraints aren't met.
type ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectValidationError) ErrorName() string { return "ObjectValidationError" }

// Error satisfies the builtin error interface
func (e ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectValidationError{}

// Validate checks the field values on CreateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateObjectRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateObjectRequestValidationError is the validation error returned by
// CreateObjectRequest.Validate if the designated constraints aren't met.
type CreateObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectRequestValidationError) ErrorName() string {
	return "CreateObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectRequestValidationError{}

// Validate checks the field values on CreateObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateObjectResponseValidationError is the validation error returned by
// CreateObjectResponse.Validate if the designated constraints aren't met.
type CreateObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateObjectResponseValidationError) ErrorName() string {
	return "CreateObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateObjectResponseValidationError{}

// Validate checks the field values on GetObjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetObjectRequestValidationError is the validation error returned by
// GetObjectRequest.Validate if the designated constraints aren't met.
type GetObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectRequestValidationError) ErrorName() string { return "GetObjectRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectRequestValidationError{}

// Validate checks the field values on GetObjectResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetObjectResponseValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetObjectResponseValidationError is the validation error returned by
// GetObjectResponse.Validate if the designated constraints aren't met.
type GetObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetObjectResponseValidationError) ErrorName() string {
	return "GetObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetObjectResponseValidationError{}

// Validate checks the field values on UpdateObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetObject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateObjectRequestValidationError{
				field:  "Object",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateObjectRequestValidationError is the validation error returned by
// UpdateObjectRequest.Validate if the designated constraints aren't met.
type UpdateObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectRequestValidationError) ErrorName() string {
	return "UpdateObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectRequestValidationError{}

// Validate checks the field values on UpdateObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateObjectResponseValidationError is the validation error returned by
// UpdateObjectResponse.Validate if the designated constraints aren't met.
type UpdateObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateObjectResponseValidationError) ErrorName() string {
	return "UpdateObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateObjectResponseValidationError{}

// Validate checks the field values on DeleteObjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteObjectRequestValidationError is the validation error returned by
// DeleteObjectRequest.Validate if the designated constraints aren't met.
type DeleteObjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectRequestValidationError) ErrorName() string {
	return "DeleteObjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectRequestValidationError{}

// Validate checks the field values on DeleteObjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteObjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteObjectResponseValidationError is the validation error returned by
// DeleteObjectResponse.Validate if the designated constraints aren't met.
type DeleteObjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteObjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteObjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteObjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteObjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteObjectResponseValidationError) ErrorName() string {
	return "DeleteObjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteObjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteObjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteObjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteObjectResponseValidationError{}
