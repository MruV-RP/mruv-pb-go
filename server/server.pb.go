// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/server.proto

package server

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for `MruVServerService`
type RegisterServerRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterServerRequest) Reset()         { *m = RegisterServerRequest{} }
func (m *RegisterServerRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterServerRequest) ProtoMessage()    {}
func (*RegisterServerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{0}
}

func (m *RegisterServerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterServerRequest.Unmarshal(m, b)
}
func (m *RegisterServerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterServerRequest.Marshal(b, m, deterministic)
}
func (m *RegisterServerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterServerRequest.Merge(m, src)
}
func (m *RegisterServerRequest) XXX_Size() int {
	return xxx_messageInfo_RegisterServerRequest.Size(m)
}
func (m *RegisterServerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterServerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterServerRequest proto.InternalMessageInfo

// Response message for `MruVServerService`
type RegisterServerResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterServerResponse) Reset()         { *m = RegisterServerResponse{} }
func (m *RegisterServerResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterServerResponse) ProtoMessage()    {}
func (*RegisterServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde5b5d7aefe7c04, []int{1}
}

func (m *RegisterServerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterServerResponse.Unmarshal(m, b)
}
func (m *RegisterServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterServerResponse.Marshal(b, m, deterministic)
}
func (m *RegisterServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterServerResponse.Merge(m, src)
}
func (m *RegisterServerResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterServerResponse.Size(m)
}
func (m *RegisterServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterServerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterServerRequest)(nil), "mruv.RegisterServerRequest")
	proto.RegisterType((*RegisterServerResponse)(nil), "mruv.RegisterServerResponse")
}

func init() { proto.RegisterFile("server/server.proto", fileDescriptor_fde5b5d7aefe7c04) }

var fileDescriptor_fde5b5d7aefe7c04 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x87, 0x50, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x2c, 0xb9, 0x45, 0xa5,
	0x65, 0x52, 0x32, 0xe9, 0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x89, 0x05, 0x99, 0xfa, 0x89, 0x79,
	0x79, 0xf9, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79, 0xc5, 0x10, 0x35, 0x52, 0x92, 0x28, 0x1a, 0xe3,
	0x73, 0xf3, 0x53, 0x52, 0x73, 0x20, 0x52, 0x4a, 0xe2, 0x5c, 0xa2, 0x41, 0xa9, 0xe9, 0x99, 0xc5,
	0x25, 0xa9, 0x45, 0xc1, 0x60, 0xd9, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x09, 0x2e,
	0x31, 0x74, 0x89, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0xe9, 0x8c, 0x5c, 0x82, 0xbe, 0x45,
	0xa5, 0x61, 0x10, 0x61, 0x10, 0x99, 0x99, 0x9c, 0x2a, 0xe4, 0xcd, 0xc5, 0x87, 0xaa, 0x5e, 0x48,
	0x5a, 0x0f, 0xe4, 0x34, 0x3d, 0xac, 0xc6, 0x4b, 0xc9, 0x60, 0x97, 0x84, 0x58, 0x21, 0x64, 0xca,
	0xc5, 0xef, 0x9e, 0x5a, 0x02, 0xb5, 0xa0, 0x24, 0xb1, 0xa4, 0xb4, 0x58, 0x88, 0x0f, 0xa2, 0x01,
	0x22, 0xe6, 0xe9, 0x22, 0x25, 0x84, 0xcc, 0x87, 0xa8, 0x71, 0x52, 0x8b, 0x52, 0x49, 0xcf, 0x2c,
	0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x07, 0xb9, 0x51, 0x37, 0x28, 0x40, 0x1f, 0xa4,
	0x4e, 0xb7, 0x20, 0x49, 0x37, 0x3d, 0x1f, 0x1a, 0x00, 0x49, 0x6c, 0x60, 0xbf, 0x1b, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x1b, 0xf7, 0x38, 0x96, 0x51, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MruVServerServiceClient is the client API for MruVServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MruVServerServiceClient interface {
	// Register instance of server for further managing
	RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*RegisterServerResponse, error)
	// Get game server status
	GetServerStatus(ctx context.Context, in *ServerID, opts ...grpc.CallOption) (*ServerStatus, error)
}

type mruVServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewMruVServerServiceClient(cc *grpc.ClientConn) MruVServerServiceClient {
	return &mruVServerServiceClient{cc}
}

func (c *mruVServerServiceClient) RegisterServer(ctx context.Context, in *RegisterServerRequest, opts ...grpc.CallOption) (*RegisterServerResponse, error) {
	out := new(RegisterServerResponse)
	err := c.cc.Invoke(ctx, "/mruv.MruVServerService/RegisterServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mruVServerServiceClient) GetServerStatus(ctx context.Context, in *ServerID, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := c.cc.Invoke(ctx, "/mruv.MruVServerService/GetServerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MruVServerServiceServer is the server API for MruVServerService service.
type MruVServerServiceServer interface {
	// Register instance of server for further managing
	RegisterServer(context.Context, *RegisterServerRequest) (*RegisterServerResponse, error)
	// Get game server status
	GetServerStatus(context.Context, *ServerID) (*ServerStatus, error)
}

// UnimplementedMruVServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMruVServerServiceServer struct {
}

func (*UnimplementedMruVServerServiceServer) RegisterServer(ctx context.Context, req *RegisterServerRequest) (*RegisterServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (*UnimplementedMruVServerServiceServer) GetServerStatus(ctx context.Context, req *ServerID) (*ServerStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStatus not implemented")
}

func RegisterMruVServerServiceServer(s *grpc.Server, srv MruVServerServiceServer) {
	s.RegisterService(&_MruVServerService_serviceDesc, srv)
}

func _MruVServerService_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVServerServiceServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVServerService/RegisterServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVServerServiceServer).RegisterServer(ctx, req.(*RegisterServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MruVServerService_GetServerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MruVServerServiceServer).GetServerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mruv.MruVServerService/GetServerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MruVServerServiceServer).GetServerStatus(ctx, req.(*ServerID))
	}
	return interceptor(ctx, in, info, handler)
}

var _MruVServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mruv.MruVServerService",
	HandlerType: (*MruVServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterServer",
			Handler:    _MruVServerService_RegisterServer_Handler,
		},
		{
			MethodName: "GetServerStatus",
			Handler:    _MruVServerService_GetServerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/server.proto",
}
