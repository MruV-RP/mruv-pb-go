// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: houses/houses.proto

package houses

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _houses_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHouseRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateHouseRequestValidationError is the validation error returned by
// CreateHouseRequest.Validate if the designated constraints aren't met.
type CreateHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHouseRequestValidationError) ErrorName() string {
	return "CreateHouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHouseRequestValidationError{}

// Validate checks the field values on CreateHouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateHouseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateHouseResponseValidationError is the validation error returned by
// CreateHouseResponse.Validate if the designated constraints aren't met.
type CreateHouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHouseResponseValidationError) ErrorName() string {
	return "CreateHouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHouseResponseValidationError{}

// Validate checks the field values on GetHouseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetHouseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetHouseRequestValidationError is the validation error returned by
// GetHouseRequest.Validate if the designated constraints aren't met.
type GetHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHouseRequestValidationError) ErrorName() string { return "GetHouseRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHouseRequestValidationError{}

// Validate checks the field values on GetHouseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetHouseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetHouseResponseValidationError is the validation error returned by
// GetHouseResponse.Validate if the designated constraints aren't met.
type GetHouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHouseResponseValidationError) ErrorName() string { return "GetHouseResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHouseResponseValidationError{}

// Validate checks the field values on UpdateHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHouseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateHouseRequestValidationError is the validation error returned by
// UpdateHouseRequest.Validate if the designated constraints aren't met.
type UpdateHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHouseRequestValidationError) ErrorName() string {
	return "UpdateHouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHouseRequestValidationError{}

// Validate checks the field values on UpdateHouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHouseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateHouseResponseValidationError is the validation error returned by
// UpdateHouseResponse.Validate if the designated constraints aren't met.
type UpdateHouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHouseResponseValidationError) ErrorName() string {
	return "UpdateHouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHouseResponseValidationError{}

// Validate checks the field values on DeleteHouseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteHouseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteHouseRequestValidationError is the validation error returned by
// DeleteHouseRequest.Validate if the designated constraints aren't met.
type DeleteHouseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHouseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHouseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHouseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHouseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHouseRequestValidationError) ErrorName() string {
	return "DeleteHouseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHouseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHouseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHouseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHouseRequestValidationError{}

// Validate checks the field values on DeleteHouseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteHouseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteHouseResponseValidationError is the validation error returned by
// DeleteHouseResponse.Validate if the designated constraints aren't met.
type DeleteHouseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHouseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHouseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHouseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHouseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHouseResponseValidationError) ErrorName() string {
	return "DeleteHouseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHouseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHouseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHouseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHouseResponseValidationError{}
