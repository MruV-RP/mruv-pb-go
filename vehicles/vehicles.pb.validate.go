// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: vehicles/vehicles.proto

package vehicles

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _vehicles_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVehicleRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateVehicleRequestValidationError is the validation error returned by
// CreateVehicleRequest.Validate if the designated constraints aren't met.
type CreateVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVehicleRequestValidationError) ErrorName() string {
	return "CreateVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVehicleRequestValidationError{}

// Validate checks the field values on CreateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVehicleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateVehicleResponseValidationError is the validation error returned by
// CreateVehicleResponse.Validate if the designated constraints aren't met.
type CreateVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVehicleResponseValidationError) ErrorName() string {
	return "CreateVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVehicleResponseValidationError{}

// Validate checks the field values on GetVehicleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetVehicleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetVehicleRequestValidationError is the validation error returned by
// GetVehicleRequest.Validate if the designated constraints aren't met.
type GetVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleRequestValidationError) ErrorName() string {
	return "GetVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleRequestValidationError{}

// Validate checks the field values on GetVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetVehicleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetVehicleResponseValidationError is the validation error returned by
// GetVehicleResponse.Validate if the designated constraints aren't met.
type GetVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVehicleResponseValidationError) ErrorName() string {
	return "GetVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVehicleResponseValidationError{}

// Validate checks the field values on UpdateVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVehicleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateVehicleRequestValidationError is the validation error returned by
// UpdateVehicleRequest.Validate if the designated constraints aren't met.
type UpdateVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleRequestValidationError) ErrorName() string {
	return "UpdateVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleRequestValidationError{}

// Validate checks the field values on UpdateVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVehicleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateVehicleResponseValidationError is the validation error returned by
// UpdateVehicleResponse.Validate if the designated constraints aren't met.
type UpdateVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVehicleResponseValidationError) ErrorName() string {
	return "UpdateVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVehicleResponseValidationError{}

// Validate checks the field values on DeleteVehicleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVehicleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteVehicleRequestValidationError is the validation error returned by
// DeleteVehicleRequest.Validate if the designated constraints aren't met.
type DeleteVehicleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVehicleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVehicleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVehicleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVehicleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVehicleRequestValidationError) ErrorName() string {
	return "DeleteVehicleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVehicleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVehicleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVehicleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVehicleRequestValidationError{}

// Validate checks the field values on DeleteVehicleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVehicleResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteVehicleResponseValidationError is the validation error returned by
// DeleteVehicleResponse.Validate if the designated constraints aren't met.
type DeleteVehicleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVehicleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVehicleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVehicleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVehicleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVehicleResponseValidationError) ErrorName() string {
	return "DeleteVehicleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVehicleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVehicleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVehicleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVehicleResponseValidationError{}
